{"version":3,"file":"components/javascript/image-comp.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AA3WA;AAAA;AAAA;AA8WA;;AA9WA;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AA1wBA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6wBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAtxBA;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAjzDA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAozDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAz2DA","sources":["webpack://Imageannotation/./components/javascript/image-comp.js","webpack://Imageannotation/./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-drawer.js","webpack://Imageannotation/./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-modal.js"],"sourcesContent":["import './../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-drawer.js';\nimport {Component} from \"@slyte/component\";\nimport { prop } from \"@slyte/core\";\nimport { AnnotationSchema } from \"../../data-store/schemas/Annotation\";\n\nclass ImageComp extends Component {\n\tconstructor() {\n\t\tsuper();\n        this.currentRect = null;\n        this.startX = 0;\n        this.startY = 0;\n        this.isDrawing = false;\n        this.isDragging = false;\n        this.isResizing = false;\n        this.dragOffsetX = 0;\n        this.dragOffsetY = 0;\n        this.resizeHandle = null;\n    }\n\n    init() {\n        const data = localStorage.getItem(\"imageData\");\n        console.log(\"Init - image Annotations:\", this.data.imageAnnotations);\n        \n        if (data) {\n            this.setData(\"imageUrl\", data);\n            \n        }\n    }\n\n    didConnect() {\n       \n        const data = localStorage.getItem(\"imageData\");\n        console.log(\"image Annotations \", this.data.imageAnnotations);\n        \n        if (data) {\n            this.setData(\"imageUrl\", data);\n            this.setData(\"Bbox\", this.data.imageAnnotations);\n            \n          \n            setTimeout(() => {\n                this.loadExistingBoxes();\n            }, 500);\n            \n        }\n    }\n\n    loadExistingBoxes() {\n        const parent = document.querySelector(\".edit-image-container\");\n        const Bbox = this.getData(\"Bbox\");\n        \n        console.log(\"Loading boxes, parent:\", parent);\n        console.log(\"Bbox data:\", Bbox);\n        \n        if (!parent || !Bbox || !Bbox._recMap) {\n            console.log(\"Cannot load boxes - missing parent or data\");\n            return;\n        }\n        \n        // const existingBoxes = parent.querySelectorAll('.edit-rectangle-box');\n        // existingBoxes.forEach(box => box.remove());\n        \n        console.log(\"Number of annotations in _recMap:\", Bbox.length);\n        \n        Bbox._recMap.forEach((annotation, key) => {\n            console.log(\"Creating box for annotation:\", annotation);\n            \n            const box = document.createElement('div');\n            box.className = 'edit-rectangle-box';\n            box.style.position = 'absolute';\n            box.style.border = '2px solid red';\n            box.style.backgroundColor = 'rgba(255, 0, 0, 0.1)';\n            box.style.cursor = 'move';\n            box.style.zIndex = '10';\n            \n            const bbox = annotation.Bbox || annotation.bbox;\n            \n            if (bbox) {\n                console.log(\"Bbox values:\", bbox);\n                \n                const addPx = (val) => {\n                    if (!val) return '0px';\n                    return String(val).includes('px') ? val : val + 'px';\n                };\n                \n                box.style.left = addPx(bbox.x);\n                box.style.top = addPx(bbox.y);\n                box.style.width = addPx(bbox.width);\n                box.style.height = addPx(bbox.height);\n                \n                console.log(\"Box final styles:\", {\n                    left: box.style.left,\n                    top: box.style.top,\n                    width: box.style.width,\n                    height: box.style.height\n                });\n                \n                parent.appendChild(box);\n                \n                this.createResizeHandles(box);\n                console.log(\"Box created and handles added\");\n            } else {\n                console.log(\"No bbox data found in annotation\");\n            }\n        });\n        \n        console.log(\"Finished loading all boxes\");\n    }\n\n    data() {\n        return {\n            imageUrl: prop(\"string\"),\n\t\t\tflgRectangle: prop(\"boolean\", {default: false}),\n\t\t\tBbox: prop(\"array\", {default: []})\n        }\n    }\n\n    createResizeHandles(rect) {\n        const existingHandles = rect.querySelectorAll('.resize-handle');\n        existingHandles.forEach(handle => handle.remove());\n\n        const positions = ['nw', 'ne', 'sw', 'se', 'n', 's', 'e', 'w'];\n        positions.forEach(pos => {\n            const handle = document.createElement('div');\n            handle.className = `resize-handle resize-${pos}`;\n            handle.style.position = 'absolute';\n            handle.style.width = '8px';\n            handle.style.height = '8px';\n            handle.style.backgroundColor = 'red';\n            handle.style.border = '1px solid white';\n            handle.style.cursor = this.getCursorForPosition(pos);\n            handle.style.display = 'none';\n            handle.style.zIndex = '1000';\n         \n            switch(pos) {\n                case 'nw': handle.style.left = '-4px'; handle.style.top = '-4px'; break;\n                case 'ne': handle.style.right = '-4px'; handle.style.top = '-4px'; break;\n                case 'sw': handle.style.left = '-4px'; handle.style.bottom = '-4px'; break;\n                case 'se': handle.style.right = '-4px'; handle.style.bottom = '-4px'; break;\n                case 'n': handle.style.left = 'calc(50% - 4px)'; handle.style.top = '-4px'; break;\n                case 's': handle.style.left = 'calc(50% - 4px)'; handle.style.bottom = '-4px'; break;\n                case 'e': handle.style.right = '-4px'; handle.style.top = 'calc(50% - 4px)'; break;\n                case 'w': handle.style.left = '-4px'; handle.style.top = 'calc(50% - 4px)'; break;\n            }\n            \n            rect.appendChild(handle);\n        });\n    }\n\n    getCursorForPosition(pos) {\n        const cursors = {\n            'nw': 'nw-resize', 'ne': 'ne-resize', 'sw': 'sw-resize', 'se': 'se-resize',\n            'n': 'n-resize', 's': 's-resize', 'e': 'e-resize', 'w': 'w-resize'\n        };\n        return cursors[pos] || 'default';\n    }\n\n    hideAllHandles() {\n        const allHandles = document.querySelectorAll('.resize-handle');\n        allHandles.forEach(handle => handle.style.display = 'none');\n    }\n    \n    showHandlesForRect(rect) {\n        this.hideAllHandles();\n        const handles = rect.querySelectorAll('.resize-handle');\n        handles.forEach(handle => handle.style.display = 'block');\n    }\n\n    static methods() {\n        return {\n        }\n    }\n\n    static actions() {\n        return {\n            handleRectangleCreation: function(event) {\n                event.preventDefault();\n                if(!this.getData(\"flgRectangle\")) return;\n               \n                if (event.target.classList.contains('resize-handle')) {\n                    this.isResizing = true;\n                    this.currentRect = event.target.parentElement;\n                    this.resizeHandle = event.target;\n                    this.startX = event.clientX;\n                    this.startY = event.clientY;\n                    const rectStyle = this.currentRect.style;\n                    this.initialLeft = parseInt(rectStyle.left);\n                    this.initialTop = parseInt(rectStyle.top);\n                    this.initialWidth = parseInt(rectStyle.width);\n                    this.initialHeight = parseInt(rectStyle.height);\n                    return;\n                }\n                \n                if (event.target.classList.contains(\"edit-rectangle-box\")) {\n                    this.currentRect = event.target;\n                    this.isDragging = true;\n                    \n                    this.showHandlesForRect(this.currentRect);\n                    \n                    const container = document.querySelector('.edit-image-container');\n                    const containerRect = container.getBoundingClientRect();\n                    const rectRect = this.currentRect.getBoundingClientRect();\n                    \n                    this.dragOffsetX = event.clientX - rectRect.left;\n                    this.dragOffsetY = event.clientY - rectRect.top;\n                    return;\n                }\n                \n                this.hideAllHandles();\n                \n                const container = document.querySelector('.edit-image-container');\n                if (!container) return;\n                \n                const rect = container.getBoundingClientRect();\n                \n                this.startX = event.clientX - rect.left;\n                this.startY = event.clientY - rect.top;\n                this.isDrawing = true;\n                \n                this.currentRect = document.createElement('div');\n                this.currentRect.className = 'edit-rectangle-box';\n                this.currentRect.style.position = 'absolute';\n                this.currentRect.style.left = this.startX + 'px';\n                this.currentRect.style.top = this.startY + 'px';\n                this.currentRect.style.width = '0px';\n                this.currentRect.style.height = '0px';\n                this.currentRect.style.border = '2px solid red';\n                this.currentRect.style.backgroundColor = 'rgba(255, 0, 0, 0.1)';\n                this.currentRect.style.cursor = 'move';\n                \n                container.appendChild(this.currentRect);\n            },\n            \n            resizeRectangle: function(event) {\n                if (this.isResizing && this.currentRect && this.resizeHandle) {\n                    const deltaX = event.clientX - this.startX;\n                    const deltaY = event.clientY - this.startY;\n                    const handleClass = this.resizeHandle.className;\n                    \n                    let newLeft = this.initialLeft;\n                    let newTop = this.initialTop;\n                    let newWidth = this.initialWidth;\n                    let newHeight = this.initialHeight;\n                    \n                    if (handleClass.includes('resize-w')) {\n                        newLeft = this.initialLeft + deltaX;\n                        newWidth = this.initialWidth - deltaX;\n                    }\n                    if (handleClass.includes('resize-e')) {\n                        newWidth = this.initialWidth + deltaX;\n                    }\n                    if (handleClass.includes('resize-n')) {\n                        newTop = this.initialTop + deltaY;\n                        newHeight = this.initialHeight - deltaY;\n                    }\n                    if (handleClass.includes('resize-s')) {\n                        newHeight = this.initialHeight + deltaY;\n                    }\n                    \n                    if (newWidth < 10) newWidth = 10;\n                    if (newHeight < 10) newHeight = 10;\n                    \n                    this.currentRect.style.left = newLeft + 'px';\n                    this.currentRect.style.top = newTop + 'px';\n                    this.currentRect.style.width = newWidth + 'px';\n                    this.currentRect.style.height = newHeight + 'px';\n                    \n                    return;\n                }\n                       \n                if (this.isDragging && this.currentRect && !this.isDrawing) {\n                    const container = document.querySelector('.edit-image-container');\n                    const containerRect = container.getBoundingClientRect();\n                    \n                    const newLeft = event.clientX - containerRect.left - this.dragOffsetX;\n                    const newTop = event.clientY - containerRect.top - this.dragOffsetY;\n                    \n                    this.currentRect.style.left = Math.max(0, newLeft) + 'px';\n                    this.currentRect.style.top = Math.max(0, newTop) + 'px';\n                    return;\n                }\n                \n                if (!this.currentRect || !this.isDrawing) return;\n                \n                const container = document.querySelector('.edit-image-container');\n                if (!container) return;\n                \n                const rect = container.getBoundingClientRect();\n                const currentX = event.clientX - rect.left;\n                const currentY = event.clientY - rect.top;\n                \n                const width = Math.abs(currentX - this.startX);\n                const height = Math.abs(currentY - this.startY);\n                \n                const left = Math.min(currentX, this.startX);\n                const top = Math.min(currentY, this.startY);\n                \n                this.currentRect.style.left = left + 'px';\n                this.currentRect.style.top = top + 'px';\n                this.currentRect.style.width = width + 'px';\n                this.currentRect.style.height = height + 'px';\n            },\n            \n            handleRectangleRelease: function() {\n                console.log(\"this is updating\")\n                if (this.isDrawing && this.currentRect) {\n                    this.createResizeHandles(this.currentRect);\n                    this.showHandlesForRect(this.currentRect);\n                    var rec = this.$db.newEntity({schema: AnnotationSchema});\n                    var x = parseInt(this.currentRect.style.left);\n                    var y = parseInt(this.currentRect.style.top);\n                    var width = parseInt(this.currentRect.style.width);\n                    var height = parseInt(this.currentRect.style.height);\n                    var config = {x: x, y: y, width: width, height: height};\n                    console.log(\"config\", config); \n                    rec.$.set(\"Bbox\",config);\n                    var image_id = localStorage.getItem(\"imageId\");\n                    rec.$.set(\"image_id\",image_id)\n                    console.log(image_id)\n                   \n                    \n                    var self = this;\n                    \n                    var result=rec.$.save().then(function(data) {\n                      console.log(\"success\")\n                    }, function(err) {\n                    console.log(\"not success\",err)\n                    });\n                    console.log(result)\n                    \n                }\n                \n                this.isDrawing = false;\n                this.isDragging = false;\n                this.isResizing = false;\n                this.resizeHandle = null;\n                this.currentRect = null;\n            },\n            \n            handleDelete: function() {\n                const rectangles = document.querySelectorAll('.edit-rectangle-box');\n                rectangles.forEach(rect => rect.remove());\n                this.hideAllHandles();\n            },\n            \n            handleDownload: function() {\n                console.log('Download functionality would be implemented here');\n                alert('Download functionality would capture the image with rectangles');\n            },\n            \n            handleRectangleClick: function() {\n                var current = !this.getData(\"flgRectangle\");\n                this.setData(\"flgRectangle\", current);\n            }\n        }\n    }\n\n    static observers() {\n        return {\n            Bbox: function(newValue) {\n                if (newValue && newValue._recMap && newValue._recMap.size > 0) {\n                    // When Bbox changes, reload boxes\n                    console.log(\"Bbox observer triggered, reloading boxes\");\n                    setTimeout(() => {\n                        this.loadExistingBoxes();\n                    }, 50);\n                }\n            }\n        }\n    }\n}\n\nexport {ImageComp};","import './../helpers/helpers-dev.js';\nimport './lyte-modal.js';\nimport { prop } from \"@slyte/core\";\nimport { Component } from \"../component.js\";\nimport $L from \"@zoho/lyte-dom\";\n\nwindow.addCloseEvent = function() {\n\n\tdocument.addEventListener('click',function(event){\n\t\tvar ele = event.target;\n\t\twhile(!$L(ele).hasClass('modalWrapper') && ele.tagName != \"LYTE-DRAWER-BODY\" && ele.tagName != \"LYTE-DRAWER\" && ele.tagName !=\"LYTE-DRAWER-FREEZE\" && ele.tagName != \"LYTE-MODAL-FREEZE\" && ele.tagName != 'LYTE-DROP-BOX' && ele.tagName != 'HTML'){\n            ele = ele.parentElement;\n            if(!ele){\n                return\n            }\n        }\n\t\tif(ele.tagName == 'HTML' || ele.tagName == \"LYTE-MODAL-FREEZE\" || ele.tagName == \"LYTE-DRAWER-FREEZE\"){\n\t\t\tvar last = window._LyteDrawer_.length-1;\n\t\t\tif(last > -1){\n\t\t\t\tif(window._LyteDrawer_[last].tagName == \"LYTE-DRAWER\" && window._LyteDrawer_[last].ltProp('show') && window._LyteDrawer_[last].ltProp(\"overlayClose\")){\n\t\t\t\t\tif(window._LyteDrawer_[last]){\n\t\t\t\t\t\twindow._LyteDrawer_[last].ltProp('show',false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},true);\n\tdocument.addEventListener('keydown',function(event){\n\t\t\tevent = event || window.event;\n            var isEscape = false;\n            if (\"key\" in event) {\n                isEscape = (event.key == \"Escape\" || event.key == \"Esc\");\n            } else {\n                isEscape = (event.keyCode == 27);\n            }\n            if (isEscape) {\n\t\t\t\tvar last = window._LyteDrawer_.length-1;\n\t\t\t\tif(last > -1){\n\t\t\t\t\tif(window._LyteDrawer_[last].tagName == \"LYTE-DRAWER\" && window._LyteDrawer_[last].ltProp('show') && window._LyteDrawer_[last].ltProp(\"closeOnEscape\")){\n\t\t\t\t\t\tif(window._LyteDrawer_[last]){\n\t\t\t\t\t\t\twindow._LyteDrawer_[last].ltProp('show',false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n\t},true);\n};\n\n/**\n * Renders a Drawer\n * @component lyte-drawer\n * @version  4.0.0\n * @methods onBeforeShow,onShow,onBeforeClose,onClose,onSelected\n */\nif(!window._LyteDrawer_){\n    window._LyteDrawer_ = [];\n}\n\nclass LyteDrawerComponent extends Component {\n    constructor() {\n        super();\n    }\n\n    data() {\n\t\treturn {\n\t\t\t/** \n\t\t\t * @componentProperty  {left | right} ltPropPosition=left\n\t\t\t */\n\t\t\tltPropPosition:prop(\"string\",{\"default\":\"left\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropWidth=200px\n\t\t\t */\n\t\t\tltPropWidth:prop(\"string\",{\"default\":\"200px\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropHeight=100%\n\t\t\t */\n\t\t\tltPropHeight:prop(\"string\",{\"default\":\"100%\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {object} ltPropModal={}\n\t\t\t */\n\t\t\tltPropModal:prop(\"object\",{\"default\":{}}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropFreeze=true\n\t\t\t */\n\t\t\tltPropFreeze:prop(\"boolean\",{\"default\":true}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropAnimationDuration=0.3s\n\t\t\t */\n\t\t\tltPropAnimationDuration:prop(\"string\",{\"default\":\"0.3s\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropMiniVariant=false\n\t\t\t */\n\t\t\tltPropMiniVariant:prop(\"boolean\",{\"default\":false}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropUserValue=name\n\t\t\t */\n\t\t\tltPropUserValue: prop(\"string\",{default:\"name\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropSystemValue=value\n\t\t\t */\n\t\t\tltPropSystemValue:prop(\"string\",{default:\"value\"}),\n\t\t\t/** \n\t\t\t * @componentProperty {array} ltPropOptions\n\t\t\t * @default []\n\t\t\t */\n\t\t\tltPropOptions:prop(\"array\",{default:[]}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropShow=false\n\t\t\t */\n\t\t\tltPropShow:prop(\"boolean\",{\"default\":false}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropSelectedClass\n\t\t\t */\n\t\t\tltPropSelectedClass:prop(\"string\"),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropSelected\n\t\t\t */\n\t\t\tltPropSelected:prop(\"string\"),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropCloseOnSelect=false\n\t\t\t */\n\t\t\tltPropCloseOnSelect:prop(\"boolean\",{\"default\":false}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropOverlayClose=true\n\t\t\t */\n\t\t\tltPropOverlayClose : prop(\"boolean\",{\"default\":true}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropShowOpenButton=true\n\t\t\t */\n\t\t\t ltPropShowOpenButton : prop(\"boolean\",{\"default\":true}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropShowCloseButton=true\n\t\t\t */\n\t\t\t ltPropShowCloseButton : prop(\"boolean\",{\"default\":true}),\n\t\t\t /** \n\t\t\t * @componentProperty  {boolean} ltPropCloseOnEscape=true\n\t\t\t */\n\t\t\tltPropCloseOnEscape : prop(\"boolean\",{\"default\":true}),\n\t\t\t/** \n\t\t\t * @componentProperty  {array} ltPropDisabledList\n\t\t\t * @default []\n\t\t\t */\n\t\t\t ltPropDisabledList:prop(\"array\",{\"default\":[]}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropWrapperClass\n\t\t\t */\n\t\t\tltPropWrapperClass:prop(\"string\"),\n\t\t\t/** \n\t\t\t * @componentProperty  {inline | overlay |  inlineOverlay} ltPropLayout=overlay\n\t\t\t */\n\t\t\tltPropLayout: prop(\"string\",{\"default\":\"overlay\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropExpandMiniVariant=\"click\"\n\t\t\t */\n\t\t\tltPropExpandMiniVariant: prop(\"string\",{\n\t\t\t\t\"default\": \"click\"\n\t\t\t}),\n\t\t\t/** \n\t\t\t * @componentProperty  {string} ltPropMiniVariantWidth=50px\n\t\t\t */\n\t\t\tltPropMiniVariantWidth : prop(\"string\",{\"default\": \"50px\"}),\n\t\t\t/** \n\t\t\t * @componentProperty  {boolean} ltPropYield=false\n\t\t\t */\n\t\t\tltPropYield:prop(\"boolean\",{default:false}),\n\t\t\tltPropDataTabindex : prop(\"string\",{\"default\" : \"\"}),\n\n\t\t\treturnedFalse : prop(\"boolean\",{\"default\" : false}),\n\t\t\tcurrentPosition : prop(\"string\"),\n\t\t\tconfig : prop(\"object\",{\n\t\t\t\t\"default\" : {}\n\t\t\t}),\n\t\t\tisMouseEvent : prop(\"boolean\",{\"default\":false}),\n\t\t\tmodalAttr : prop(\"object\",{\"default\": {}})\n\t\t};\t\t\n\t}\n\n    // methods calling start\n    selected(selectedValue, lyteDrawerItem) {\n\t\tif(this.getMethods(\"onSelected\")){\n\t\t\tthis.executeMethod(\"onSelected\",selectedValue,lyteDrawerItem,this); \n\t\t}\n\t}\n\n    beforeShow(skip) {\n\t\tif(!skip && this.getMethods(\"onBeforeShow\")){\n\t\t\treturn this.executeMethod(\"onBeforeShow\", this); \n\t\t}\n\t}\n\n    show(skip) {\n\t\tif(!skip && this.getMethods(\"onShow\")){\n\t\t\tthis.executeMethod(\"onShow\", this); \n\t\t}\n\t}\n\n    beforeClose(skip) {\n\t\tif(!skip && this.getMethods(\"onBeforeClose\")){\n\t\t\treturn this.executeMethod(\"onBeforeClose\", this); \n\t\t}\n\t}\n\n    close(skip) {\n\t\tif(!skip && this.getMethods(\"onClose\")){\n\t\t\tthis.executeMethod(\"onClose\", this); \n\t\t}\n\t}\n\n    // methods calling end\n\n    getDrawerForModal() {\n\t\tvar actualModalDiv = this.$node.querySelector(\"lyte-modal\").component.actualModalDiv;\n\t\tif(actualModalDiv) {\n\t\t\treturn actualModalDiv.querySelector(\"lyte-modal-content\");\n\t\t}\n\t}\n\n    getParentElement() {\n\t\t/* \n\t\t\tget parent element based on layout\n\t\t*/\n\t\tvar layout = this.data.ltPropLayout;\n\t\tif(layout == \"overlay\"){\n\t\t\treturn this.getDrawerForModal();\n\t\t}\n\t\treturn this.$node.querySelector(\".lyteDrawerInlineBody\");\n\t}\n\n    getDrawerPanel() {\n\t\tvar layout = this.data.ltPropLayout;\n\t\tif(layout == \"overlay\"){\n\t\t\treturn this.getDrawerForModal();\n\t\t}\n\t\treturn this.$node.querySelector(\".lyteDrawerPanel\");\n\t}\n\n    getLyteDrawerItem(parentElement, drawerItemvalue) {\n\t\t/* \n\t\t\tget lyte drawer item from parent element\n\t\t*/\n\t\treturn parentElement.querySelector(\"[data-value ='\"+window._lyteUiUtils.escape(drawerItemvalue)+\"']\");\n\t}\n\n    getActiveDrawerItem(parentElement) {\n\t\t/* \n\t\t\tget active drawer item using active class\n\t\t*/\n\t\treturn parentElement.querySelector(\".lyteDrawerActiveItem\");\n\t}\n\n    activeClassActionForDrawerItem(element, action) {\n\t\t/*\n\t\tfunction used to add or remove activeClass from a element\n\t\t*/ \n\t\tif(element){\n\t\t\tvar selectedClass = this.data.ltPropSelectedClass;\n\t\t\telement.classList[action](\"lyteDrawerActiveItem\");\n\t\t\tif(selectedClass){\n\t\t\t\telement.classList[action](selectedClass);\n\t\t\t}\n\t\t}\n\t}\n\n    removePreviouslySelected(parent) {\n\t\t/* \n\t\t\tremoving the selected class from the previously selected element\n\t\t*/\n\t\tvar prevActiveDrawerItem = this.getActiveDrawerItem(parent);\n\t\tthis.activeClassActionForDrawerItem(prevActiveDrawerItem, \"remove\");\n\t}\n\n    addDisableClassForDrawerItem(parentElement, value) {\n\t\t/* \n\t\t\tadding disabled class to drawerItem\n\t\t*/\n\t\tvar element = this.getLyteDrawerItem(parentElement, value);\n\t\tif(element){\n\t\t\telement.classList.add(\"lyteDrawerDisabledItem\");\n\t\t}\n\t}\n\n    removeDisableClassFromDrawerItem(element) {\n\t\t/* \n\t\t\tremove disabled class from lyte drawer item\n\t\t*/\n\t\telement.classList.add(\"lyteDrawerDisabledItem\");\n\t}\n\n    selectDrawerItem() {\n\t\t/* \n\t\t\tselecting drawerItem using ltPropSelected\n\t\t*/\n\t\tvar close = this.data.ltPropCloseOnSelect,\n\t\tparent = this.getDrawerPanel();\n\t\tif(parent){\n\t\t\tvar selected = this.data.ltPropSelected;\n\t\t\tvar curActiveDrawerItem = this.getLyteDrawerItem(parent, selected);\n\t\t\tthis.removePreviouslySelected(parent);\n\t\t\tthis.activeClassActionForDrawerItem(curActiveDrawerItem, \"add\");\n\t\t\tif(curActiveDrawerItem){\n\t\t\t\tif(close){\n\t\t\t\t\tthis.setData(\"ltPropShow\",false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.setData(\"config.selection\",true);\n\t\t}\n\t}\n\n    disableDrawerItems() {\n\t\t/* \n\t\t\tdisabling drawerItem using ltPropDisableList\n\t\t*/\n\t\tvar array = this.getData(\"ltPropDisabledList\"),\n\t\tparent = this.getDrawerPanel();\n\t\tif(parent){\n\t\t\tvar disabledlist = parent.querySelectorAll(\".lyteDrawerDisabledItem\");\n\t\t\tfor(var index = 0 ; index<disabledlist.length;index++){\n\t\t\t\tthis.removeDisableClassFromDrawerItem(disabledlist[index]);\n\t\t\t}\n\t\t\tfor(var index = 0 ; index<array.length;index++){\n\t\t\t\tthis.addDisableClassForDrawerItem(parent, array[index]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.setData(\"config.disable\",true);\n\t\t}\n\t}\n\n    removeDrawerFromStore() {\n\t\t/* \n\t\tremoving the lyteDrawer node from global variable(_LyteDrawer_)\n\t\t*/\n\t\tvar drawer = this.$node;\n\t\tvar lyteDrawers =  _LyteDrawer_;\n\t\tvar drawerlength = lyteDrawers.length;\n\t\tfor(var index=0; index<drawerlength; index++) {\n\t\t\tif(lyteDrawers[index] === drawer) {\n\t\t\t\tlyteDrawers.splice(index,1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n    getPosition() {\n\t\t/* checking the rtl direction and getting correct position */\n\t\treturn this.data.ltPropPosition;\n\t}\n\n    initializeDataForModal() {\n\t\t/* setting initial data for modal like slideFromLeft or slideFromRight*/\n\t\tvar lyteModal = this.$node.querySelector(\"lyte-modal\");\n\t\tvar offset = lyteModal.ltProp(\"offset\"),\n\t\tcurrentPosition = this.getPosition(),\n\t\tseconds =  (this.data.ltPropAnimationDuration || '').replace(/s/g, '');\n\t\tlyteModal.ltProp(\"transition\",{\n\t\t\t\"animation\": \"slideFrom\"+window._lyteUiUtils.capitalize(currentPosition),\n\t\t\t\"duration\":seconds\n\t\t});\n\t\tlyteModal.ltProp(\"offset\",{[currentPosition] : \"0px\", top: offset.top});\n\t}\n\n    getFreezeLayer() {\n\t\t/* To get freeze layer element from dom*/\n\t\treturn this.$node.querySelector(\"lyte-drawer-freeze\");\n\t}\n\n    showFreezeLayer() {\n\t\t/* To show freeze layer for inline and inlineOverlay drawer*/\n\t\tif(this.data.ltPropFreeze) {\n\t\t\tvar freezeLayer = this.getFreezeLayer();\n\t\t\tfreezeLayer.style.display = \"block\";\n\t\t\tsetTimeout(function(){\n\t\t\t\tfreezeLayer.classList.add('lyteDrawerFreezeLayerShown');\n\t\t\t},0);\n\t\t}\n\t}\n\n    hideFreezeLayer(initialStage) {\n\t\t/* To hide freeze layer for inline and inlineOverlay drawers*/\n\t\tif(this.data.ltPropFreeze) {\n\t\t\tvar freezeLayer = this.getFreezeLayer();\n\t\t\tfreezeLayer.classList.remove('lyteDrawerFreezeLayerShown');\n\t\t}\n\t}\n\n    focusDrawerPanel() {\n\t\tthis.getDrawerPanel().focus();\n\t}\n\n    showInlineDrawer() {\n\t\t/* Used to open inline and inlineOverlay drawer*/\n\t\tvar returnValue =  this.beforeShow();\n\t\tif(returnValue === false){\n\t\t\tthis.setData({\n\t\t\t\t\"returnedFalse\": true,\n\t\t\t\t\"ltPropShow\": false\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tthis.showFreezeLayer();\n\t\t\tthis.show();\n\t\t\t_LyteDrawer_.push(this.$node);\n\t\t}\n\t}\n\n    closeInlineDrawer() {\n\t\t/* close the opened inline and inlineOverlay drawer*/\n\t\tvar returnValue = this.beforeClose();\n\t\tif(returnValue === false){\n\t\t\tthis.setData({\n\t\t\t\t\"returnedFalse\": true,\n\t\t\t\t\"ltPropShow\": true\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tthis.hideFreezeLayer();\n\t\t\tthis.close();\n\t\t\tthis.removeDrawerFromStore();\t\n\t\t}\n\t}\n\n    isFocusedLyteDrawerItem(element) {\n\t\tvar focusClassName = \"lyteDrawerItemFocused\";\n\t\treturn element.classList.contains(focusClassName);\n\t}\n\n    isActiveLyteDrawerItem(element) {\n\t\tvar activeClassName = \"lyteDrawerActiveItem\";\n\t\treturn element.classList.contains(activeClassName);\n\t}\n\n    isDisabledLyteDrawerItem(element) {\n\t\tvar disabledClassname = \"lyteDrawerDisabledItem\";\n\t\treturn element.classList.contains(disabledClassname);\n\t}\n\n    isLyteDrawerItem(element) {\n\t\tif(element && element.tagName == \"LYTE-DRAWER-ITEM\" && \n\t\t!this.isDisabledLyteDrawerItem(element)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n    getActiveOrFocusedItem(elements) {\n\t\tvar len = elements.length,\n\t\tactiveIndex;\n\t\tfor(var index=0; index<len; index++) {\n\t\t\tif(this.isFocusedLyteDrawerItem(elements[index])){\n\t\t\t\treturn index;\n\t\t\t}\n\t\t\telse if(this.isActiveLyteDrawerItem(elements[index])) {\n\t\t\t\tactiveIndex =  index;\n\t\t\t}\n\t\t}\n\t\treturn activeIndex;\n\t}\n\n    isNotActiveElement(element) {\n\t\tif(element) {\n\t\t\treturn !element.classList.contains(\"lyteDrawerActiveItem\");\n\t\t}\n\t}\n\n    isValidFocusableItem(element) {\n\t\treturn !element.classList.contains(\"lyteDrawerDisabledItem\");\n\t}\n\n    findNextActive(elements, index, forward) {\n\t\tvar increment = forward ? 1 : -1,\n\t\teleLen = elements.length;\n\t\tif(index === undefined){\n\t\t\tindex = forward ? 0 : eleLen-1;\n\t\t}\n\t\telse {\n\t\t\tindex = index + increment;\n\t\t}\n\t\tfor( ;  forward ? index < eleLen : index > -1; index = index + increment ) {\n\t\t\tif( this.isValidFocusableItem(elements[index])) {\n\t\t\t\treturn elements[index];\n\t\t\t}\n\t\t}\n\t}\n\n    getAllDrawerItems() {\n\t\tvar parentElement = this.getDrawerPanel();\n\t\treturn parentElement.querySelectorAll(\"lyte-drawer-item\");\n\t}\n\n    isValidateElement(element) {\n\t\treturn element != document \n\t\t&& element != document.body\n\t\t&& element != document.documentElement \n\t\t && element.tagName != 'LYTE-DRAWER-BODY';\n\t}\n\n    elementsFromPoint(x, y) {\n        var elements = [], \n\t\telement = document.elementFromPoint(x, y), \n\t\tprevElement;\n        while (this.isValidateElement(element)) {\n            element._pointerEvents = element.style.pointerEvents;\n            element.style.pointerEvents = 'none';\n            elements.push(element);\n            prevElement = element;\n            element = document.elementFromPoint(x, y);\n            if (prevElement === element) {\n                break\n            }\n        }\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.pointerEvents = elements[i]._pointerEvents;\n            delete elements[i]._pointerEvents;\n        }\n        return elements;\n    }\n\n    openDrawer() {\n\t\tvar parentElement = this.getDrawerPanel();\n\t\tvar expandMiniVariant =  this.data.ltPropExpandMiniVariant;\n\t\tvar eventName = this.data.isMouseEvent?\"mouseenter\":expandMiniVariant;\n\t\tthis.setData(\"ltPropShow\",true);\n\t\tif(this.data.ltPropShow) {\n\t\t\tparentElement.removeEventListener( eventName, this._bindedDrawerOpen, true);\n\t\t\tif(this.data.isMouseEvent) {\n\t\t\t\tdocument.addEventListener( \"mousemove\", this._bindedDrawerClose, true);\n\t\t\t}\n\t\t}\n\t}\n\n    closeOnHover(event) {\n        if (this.$node) {\n            var elements = document.elementsFromPoint ? document.elementsFromPoint(event.clientX, event.clientY) \n\t\t\t: this.elementsFromPoint(event.clientX, event.clientY);\n\t\t\tvar parentElement = this.getDrawerPanel();\n            if (elements.indexOf(parentElement) == -1 ) {\n\t\t\t\tthis.setData(\"ltPropShow\", false);\n\t\t\t\tif(!this.data.ltPropShow) {\n\t\t\t\t\tdocument.removeEventListener( \"mousemove\", this._bindedDrawerClose, true);\n\t\t\t\t\tparentElement.addEventListener( \"mouseenter\", this._bindedDrawerOpen, true);\n\t\t\t\t}\n            }\n        }\n    }\n\n    isMiniVariant() {\n\t\treturn this.data.ltPropMiniVariant;\n\t}\n\n    isMouseEvent(eventName) {\n\t\treturn /^(mouseenter|mousemove|mouseover|hover)$/.test(eventName);\n\t}\n\n    initializeEvent() {\n\t\tif(this.isMiniVariant()) {\n\t\t\tvar parentElement = this.getDrawerPanel();\n\t\t\tif(parentElement) {\n\t\t\t\tvar expandMiniVariant = this.data.ltPropExpandMiniVariant;\n\t\t\t\tvar eventName = expandMiniVariant;\n\t\t\t\tif(eventName) {\n\t\t\t\t\tvar isMouseEvent =  this.isMouseEvent(eventName);\n\t\t\t\t\tthis._bindedDrawerOpen = this.openDrawer.bind(this);\n\t\t\t\t\tif(isMouseEvent) {\n\t\t\t\t\t\tthis._bindedDrawerClose = this.closeOnHover.bind(this);\n\t\t\t\t\t\teventName = \"mouseenter\";\n\t\t\t\t\t}\n\t\t\t\t\tparentElement.addEventListener(eventName,this._bindedDrawerOpen,true);\n\t\t\t\t\tthis.setData(\"isMouseEvent\", isMouseEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    checkAndUpdateSelectedValue(config) {\n\t\tif(config.selection) {\n\t\t\tthis.selectDrawerItem();\n\t\t\tthis.$addon.objectUtils(config, \"delete\", \"selection\");\n\t\t}\n\t}\n\n    checkAndUpdateDisbaleList(config) {\n\t\tif(config.disable) {\n\t\t\tthis.disableDrawerItems();\n\t\t\tthis.$addon.objectUtils(config, \"delete\", \"disable\");\n\t\t}\n\t}\n\n    initializeDrawerDefaultData() {\n\t\tvar config = this.data.config;\n\t\tthis.checkAndUpdateSelectedValue(config);\n\t\tthis.checkAndUpdateDisbaleList(config);\n\t}\n\n    moveIntoView(element) {\n\t\tvar panel = this.getDrawerPanel(),\n\t\tpanelScrollTop = panel.scrollTop,\n\t\telementTop = element.offsetTop;\n\n\t\tif( elementTop <= panelScrollTop ) {\n\t\t\tpanel.scrollTop = elementTop;\n\t\t}\n\t\telse {\n\t\t\tpanel.scrollTop =elementTop + element.offsetHeight - panel.offsetHeight;\n\t\t}\n\t}\n\n    updateModalAttr() {\n\t\tvar modalAttr =  this.$addon.deepCopyObject(this.data.ltPropModal);\n\t\tvar notAllowed = [\"width\", \"height\",\"showCloseButton\",\"closeOnEscape\", \n\t\t\"allowMultiple\", \"overlayClose\",\"freeze\", \"wrapperClass\"];\n\t\tnotAllowed.forEach(function(item){\n\t\t\tif(modalAttr.hasOwnProperty(item)) {\n\t\t\t\tdelete modalAttr[item]\n\t\t\t}\n\t\t});\n\t\tthis.setData(\"modalAttr\",  modalAttr);\n\t}\n\n    removeAttachedEvents() {\n\t\tif(this.isMiniVariant()){\n\t\t\tvar parentElement = this.getDrawerPanel();\n\t\t\tvar\texpandMiniVariant = this.data.ltPropExpandMiniVariant;\n\t\t\tif(expandMiniVariant) {\n\t\t\t\tvar eventName = this.data.isMouseEvent?\"mouseenter\":expandMiniVariant; \n\t\t\t\tif(this.data.isMouseEvent){\n\t\t\t\t\tdocument.removeEventListener( \"mousemove\", this._bindedDrawerClose, true);\n\t\t\t\t}\n\t\t\t\tparentElement.addEventListener( eventName, this._bindedDrawerOpen, true);\n\t\t\t\tdelete this._bindedDrawerClose;\n\t\t\t\tdelete this._bindedDrawerOpen;\n\t\t\t}\n\t\t}\n\t}\n\n    initializeShow() {\n\t\tvar show  = this.data.ltPropShow;\n\t\tif(show) {\n\t\t\tvar layout = this.data.ltPropLayout;\n\t\t\tif(layout === \"inline\" ||  layout === \"inlineOverlay\"){\n\t\t\t\tthis.showInlineDrawer(!window.changes);\n\t\t\t}\n\t\t}\n\t}\n\n    removeMiniVariantEvent() {\n\t\tvar parentElement = this.getDrawerPanel();\n\t\tvar eventName =  this.data.ltPropExpandMiniVariant;\n\t\tif(!this.isMouseEvent(eventName)) {\n\t\t\tparentElement.addEventListener(eventName,this._bindedDrawerOpen,true);\n\t\t}\n\t}\n\n    // lifecycle hooks start\n\n    init() {\n\t\tthis.initializeShow();\n\t}\n\n    didConnect() {\n\t\tthis.initializeEvent();\n\t}\n\n    didDestroy() {\n\t\t//remove documnet event listener\n\t\tthis.removeDrawerFromStore();\n\t\tthis.removeAttachedEvents();\n\t}\n\n    //observers end\n\n    static actions() {\n        return {\n\n            selectedItem:function(event,type){\n                var closestItem = $L(event.target).closest(\"lyte-drawer-item\", this.$node)[0];\n                if(this.isLyteDrawerItem(closestItem)) {\n                    var value = closestItem.getAttribute(\"data-value\");\n                    this.setData(\"ltPropSelected\",value);\n                    this.selected( this.data.ltPropSelected, closestItem);\n                }\n            },\n\n            makeDrawerItemActive : function(event) {\n                \n                var keyCode = event.keyCode;\n                var drawerItems = this.getAllDrawerItems();\n                var activeIndex = this.getActiveOrFocusedItem(drawerItems);\n                var activeItem =  drawerItems[activeIndex];\n                if(this.data.ltPropShow){\n                    if( keyCode === 38  || keyCode === 40 ) {\n                        var forward = keyCode === 40;\n                        var nextActiveItem = this.findNextActive(drawerItems, activeIndex, forward);\n                        if(nextActiveItem) {\n                            if(activeItem){\n                                activeItem.classList.remove(\"lyteDrawerItemFocused\");\n                            }\n                            nextActiveItem.classList.add(\"lyteDrawerItemFocused\");\n                            this.moveIntoView(nextActiveItem);\n                            event.preventDefault();\n                        }\n                    }\n                    else if(keyCode === 13 && this.isNotActiveElement(activeItem)) {\n                        var value = activeItem.getAttribute(\"data-value\");\n                        activeItem.classList.remove(\"lyteDrawerItemFocused\");\n                        this.setData(\"ltPropSelected\",value);\n                        this.selected( this.data.ltPropSelected, activeItem);\n                        event.preventDefault();\n                    }\n                }\n\n            },\n\n            selectActiveItem : function(event){\n                var closestItem = $L(event.target).closest(\"lyte-drawer-item\", this.$node)[0];\n                var drawerPanel = this.getDrawerPanel();\n                var focusedItem = drawerPanel.querySelector(\".lyteDrawerItemFocused\");\n                if(focusedItem) {\n                    focusedItem.classList.remove(\"lyteDrawerItemFocused\");\n                }\n                if(closestItem) {\n                    closestItem.classList.add(\"lyteDrawerItemFocused\");\n                }\n            },\n\n            openDrawer : function() {\n                this.setData(\"ltPropShow\",true);\n            },\n            \n            closeDrawer : function() {\n                this.setData(\"ltPropShow\",false);\n            },\n\n            updateFreezeLayerStyle : function(node) {\n                if(this.data.ltPropShow ===  false) {\n                    node.style.setProperty(\"display\", \"none\");\n                }\n            }\n\n        };\n    }\n\n    static methods() {\n        return {\n            /* These below methods will work for overlay drawer only*/\n\n            modalOnBeforeShow:function(component){\n                this.initializeDataForModal(component.$node);\n                return this.beforeShow();\n            },\n\n            modalOnShow:function(component){\n                this.initializeDrawerDefaultData();\n                this.show();\n                this.focusDrawerPanel();\n                _LyteDrawer_.push(this.$node);\n            },\n\n            modalOnBeforeClose:function(event,component){\n                return this.beforeClose();\n            },\n\n            modalOnClose:function(component){\n                if(this.isMiniVariant()) {\n                    return;\n                }\n                this.removeDrawerFromStore();\n                this.close();\n            }\n\n        };\n    }\n\n    static observers() {\n        return {\n            // lifecycle hooks end\n\n            //observers start\n            selectedObserver : function(changes){\n                this.selectDrawerItem();\n            }.observes(\"ltPropSelected\").on('didConnect'),\n\n            disabledListObserver : function(){\n                this.disableDrawerItems();\n            }.observes(\"ltPropDisabledList\").on('didConnect'),\n\n            showChanges:function(changes){\n                if(this.data.returnedFalse){\n                    this.setData('returnedFalse',false);\n                    return;\n                }\n                var  show  = this.data.ltPropShow,\n                layout = this.$node.ltProp(\"layout\"),\n                position = this.getPosition();\n                this.setData(\"currentPosition\",position);\n                if(show){\n                    if(layout === \"inline\" ||  layout === \"inlineOverlay\"){\n                        this.showInlineDrawer(!changes);\n                    }\n                }\n                else {\n                    if(layout == \"inline\" || layout === \"inlineOverlay\"){\n                        this.closeInlineDrawer(!changes);\n                        if(this.isMiniVariant()) {\n                            this.removeMiniVariantEvent();\n                        }\n                    }\n                }\n            }.observes(\"ltPropShow\").on('didConnect'),\n\n            styleObserver : function(observerChange){\n                // all animation are handled using css variable in css\n                if(this.data.ltPropLayout != \"overlay\"){\n                    var drawerPanel =  this.getDrawerPanel();\n                    var compData =  this.data;\n                    var cssVarMapping  =  {\n                        ltPropWidth : \"--lyte-drawer-width\",\n                        ltPropMiniVariantWidth : \"--lyte-drawer-mini-variant-width\",\n                        ltPropAnimationDuration : \"--lyte-drawer-transition-duration\"\n                    }\n                    if(observerChange) {\n                        var key = observerChange.item;\n                        drawerPanel.style.setProperty( cssVarMapping[key], compData[key]);\n                    }\n                    else {\n                        for(var key in cssVarMapping) {\n                            drawerPanel.style.setProperty( cssVarMapping[key], compData[key]);\n                        }\n                    }\n                }\n            }.observes(\"ltPropWidth\",\"ltPropAnimationDuration\",\"ltPropMiniVariantWidth\").on(\"didConnect\"),\n\n            modalAttrObserver :  function(){\n                this.updateModalAttr();\n            }.observes(\"ltPropModal\")\n        };\n    }\n}\n\n//need to be moved as common code\nif (document.readyState === \"complete\" || document.readyState === \"interactive\"){\n    window.addCloseEvent();\n}\nelse{\n    document.addEventListener(\"DOMContentLoaded\", function(){\n        window.addCloseEvent();\n    });\n}\nexport { LyteDrawerComponent };\n","import './lyte-wormhole.js';\nimport { prop } from \"@slyte/core\";\nimport { Component } from \"../component.js\";\nimport $L from \"@zoho/lyte-dom\";\n\nwindow.addModalEvent = function(event) {\n    window.addEventListener('resize',function(event){\n        // console.log(Math.max(document.documentElement.clientHeight, window.innerHeight || 0));\n        if(window.LytePopup._lyteModalRTId){\n            // console.log(LytePopup._lyteModalRTId);\n            clearTimeout(window.LytePopup._lyteModalRTId);\n            window.LytePopup._lyteModalRTId = false;\n        }\n        window.LytePopup._lyteModalRTId = setTimeout(function(){\n            // for(var i = LytePopup.components.length - 1 ; i >= 0 ; i--){\n            for(var i = 0  ; i < LytePopup.components.length ; i++){\n            // console.log(LytePopup.components[i].$node);\n                if(LytePopup.components[i].$node && LytePopup.components[i].$node.nodeName == \"LYTE-MODAL\" && LytePopup.components[i].childComp.style.visibility == \"visible\" && LytePopup.components[i].childComp.querySelector('.lyteModal')){\n                    LytePopup.components[i].$node.component.setData('resizeCalled',true);\n                    if(LytePopup.components[i].getData('ltPropParentModalId') == '' && LytePopup.components[i].getData('ltPropDependentModalId') != '') {\n                        LytePopup.components[i].$node.component.updateScrollHandling();\n                    }\n                    else if(LytePopup.components[i].getData('ltPropParentModalId') == '' && LytePopup.components[i].getData('ltPropDependentModalId') == '') {\n                        if((i == LytePopup.components.length - 1) && LytePopup.components[i].renderSidewise){\n                            continue;\n                        }\n                        LytePopup.components[i].$node.component.updateScrollHandling();\n                    }\n                }\n            }\n            LytePopup._lyteModalRTId = false;\n        },100);\n    },true);\n\n    document.addEventListener('click',function(event){\n        var ele = event.target;\n        while(!$L(ele).hasClass('modalWrapper') && ele.tagName != \"LYTE-MODAL-FREEZE\" && ele.tagName != 'LYTE-DROP-BOX' && ele.tagName != 'HTML'){\n            ele = ele.parentElement;\n            if(!ele){\n                return\n            }\n        }\n        if(ele.tagName == \"HTML\" || ele.tagName == \"LYTE-MODAL-FREEZE\"){\n            for(var i = window.LytePopup.components.length -1 ; i>=0; i--){\n                if(window.LytePopup.components[i].$node.tagName == \"LYTE-MODAL\" && window.LytePopup.components[i].childComp.style.visibility == \"visible\"){\n                    var modal = window.LytePopup.components[i].$node;\n                    var dontClose = true\n                    if(modal.component.getData('ltPropAllowContainment') && ele.tagName === 'HTML'){\n                        dontClose = false\n                    }\n                    if(modal && modal.component.getData('ltPropOverlayClose') && dontClose){\n                        modal.ltProp('show',false);\n                        break;\n                    }\n                }\n            }\n        }\n        else{\n            /*  If ele is having modalWrapper class ie. a modal and it is not the modal that is opened at last which is the current modal element in the page\n            this means the click has happened outside the current modal\n            so the current modal should be closed */\n            if(ele.classList.contains('modalWrapper') && window.LytePopup.components.length > 1 && window.LytePopup.components[window.LytePopup.components.length -1].$node.tagName == \"LYTE-MODAL\"){\n                var modal = window.LytePopup.components[window.LytePopup.components.length -1];\n                var dontClose = true\n                if(modal.getData('ltPropAllowContainment') && ele.tagName === 'HTML'){\n                    dontClose = false\n                }\n                if(!(modal.childComp.contains(ele)) && modal.childComp.style.visibility == \"visible\" && modal.getData('ltPropOverlayClose') && dontClose){\n                    modal.$node.ltProp('show',false);\n                }\n            }\n        }\n    },true);\n};\n\n/**\n * Renders a modal\n * @component lyte-modal\n * @version 1.0.0\n * @dependencies lyte-wormhole\n * @methods onBeforeShow,onShow,onBeforeClose,onClose,onResize\n * @utility alignModal,calculateOffset,trapFocus, reflectTransitionChange\n */\n\n/**\n * @customElement lyte-modal-header\n */\n/**\n * @customElement lyte-modal-content\n */\n/**\n * @customElement  lyte-modal-footer\n */\n\nclass LyteModalComponent extends Component {\n    constructor() {\n        super();\n    }\n\n    data() {\n        return {\n            //config from callee\n\n            /**\n             * @componentProperty {boolean} ltPropShow\n             * @version 1.0.0\n             * @default false\n             */\n            \"ltPropShow\":prop(\"boolean\",{\"default\": false}),\n\n            /**\n             * @componentProperty {boolean} ltPropFreeze\n             * @version 1.0.0\n             * @default true\n             */\n            \"ltPropFreeze\":prop(\"boolean\",{\"default\": true}),\n\n            /**\n             * @componentProperty {boolean} ltPropShowCloseButton\n             * @version 1.0.0\n             * @default true\n             */\n            \"ltPropShowCloseButton\":prop(\"boolean\",{\"default\": true}),\n\n            /**\n             * @componentProperty {boolean} ltPropCloseOnEscape\n             * @version 1.0.0\n             * @default true\n             */\n            \"ltPropCloseOnEscape\":prop(\"boolean\",{\"default\": true}),\n            /**\n             * @typedef {object} transition\n             * @property {slideFromTop|slideFromBottom|slideFromLeft|slideFromRight|fadeIn|zoom} animation\n             * @property {string} duration\n             */\n            /**\n             * @componentProperty {transition} ltPropTransition\n             * @version 1.0.0\n             * @default { \"animation\" :\"slideFromTop\" , \"duration\":\"0.5s\"}\n             */\n            \"ltPropTransition\":prop(\"object\",{\"default\":{\"animation\":\"slideFromTop\",\"duration\":\"0.5\"}}),\n            /**\n             * @typedef {object} offset\n             * @property {string} top\n             * @property {string} left\n             * @property {string} bottom\n             * @property {string} right\n             */\n            /**\n             * @componentProperty {offset} ltPropOffset\n             * @version 1.0.0\n             * @default { \"top\" :\"center\", \"left\" :\"center\"}\n             */\n            \"ltPropOffset\":prop(\"object\",{\"default\":{\"top\":\"center\",\"left\":\"center\"}}),\n            /**\n             * @typedef {object} dimmer\n             * @property {colorstring} color\n             * @property {string} opacity\n             */\n            /**\n             * @componentProperty {dimmer} ltPropDimmer\n             * @version 1.0.0\n             */\n            \"ltPropDimmer\":prop(\"object\"), //,{\"default\":{\"color\":\"black\",\"opacity\":\"0.4\"}}\n\n            /**\n             * @componentProperty {boolean} ltPropDraggable\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropDraggable\":prop(\"boolean\",{\"default\": false}),\n\n            /**\n             * @componentProperty {boolean} ltPropAllowMultiple\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropAllowMultiple\":prop(\"boolean\",{\"default\": false}),\n\n            /**\n             * @componentProperty {boolean} ltPropScrollable\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropScrollable\":prop(\"boolean\",{\"default\": false}),\n\n            /**\n             * @componentProperty {string} ltPropMaxHeight\n             * @version 1.0.0\n             * @suffix px,pt,cm,mm,vh,vm,em\n             */\n            \"ltPropMaxHeight\":prop(\"string\",{\"default\":\"\"}),\n\n            /**\n             * @componentProperty {string} ltPropMaxWidth\n             * @version 1.0.0\n             * @suffix px,pt,cm,mm,vh,vm,em\n             */\n            \"ltPropMaxWidth\":prop(\"string\",{\"default\":\"\"}),\n\n            /**\n             * @componentProperty {string} ltPropWidth\n             * @version 1.0.0\n             * @suffix px,pt,cm,mm,vh,vm,em\n             */\n            \"ltPropWidth\":prop(\"string\",{\"default\":\"\"}),\n\n            /**\n             * @componentProperty {string} ltPropHeight\n             * @version 1.0.0\n             * @default auto\n             * @suffix px,pt,cm,mm,vh,vm,em\n             */\n            \"ltPropHeight\":prop(\"string\",{\"default\":\"auto\"}),\n\n            /**\n             * @componentProperty {string} ltPropWrapperClass\n             * @version 1.0.0\n             */\n            \"ltPropWrapperClass\":prop(\"string\",{\"default\":\"\"}),\n\n            /**\n             * @componentProperty {boolean} ltPropBindToBody\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropBindToBody\":prop(\"boolean\",{\"default\":false}),\n\n            /**\n             * @experimental ltPropShowCopy\n             */\n            \"ltPropShowCopy\":prop(\"boolean\",{\"default\": false}),\n\n            /**\n             * @componentProperty {boolean} ltPropReRenderModal\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropReRenderModal\":prop(\"boolean\",{\"default\":false}),\n\n            /**\n             * @componentProperty {boolean} ltPropOverlayClose\n             * @version 1.0.0\n             * @default false\n             *\n             */\n            \"ltPropOverlayClose\":prop(\"boolean\",{\"default\":false}),\n\n            /**\n             * @componentProperty {boolean} ltPropAria\n             * @version 3.1.0\n             * @default false\n             *\n             */\n            \"ltPropAria\" : prop( 'boolean', { default : false } ),\n\n            /**\n             * @componentProperty {object} ltPropAriaAttributes\n             * @version 3.1.0\n             */\n            \"ltPropAriaAttributes\" : prop( 'object', { default : {} } ),\n\n            /**\n             * @componentProperty {boolean} ltPropPreventFocus\n             * @version 3.3.0\n             * @default false\n             *\n             */\n            \"ltPropPreventFocus\" : prop('boolean', { default : false } ),\n\n            /**\n             * @componentProperty {boolean} ltPropSetContentHeight\n             * @version 3.9.0\n             * @default false\n             *\n             */\n            \"ltPropSetContentHeight\" : prop('boolean', { default : false } ),\n\n            /**\n             * @componentProperty {number} ltPropCloseDuration\n             * @version 3.10.0\n             * @default undefined\n             */\n            \"ltPropCloseDuration\" : prop(\"number\",{\"default\" : undefined}),\n\n            /**\n             * @componentProperty {boolean} ltPropOverlapModal\n             * @version 3.19.0\n             * @default true\n             *\n             */\n            \"ltPropOverlapModal\" : prop('boolean', { default : true } ),\n\n            /**\n             * @componentProperty {boolean} ltPropIgnoreInlineDirection\n             * @version 3.19.0\n             * @default true\n             *\n             */\n            \"ltPropIgnoreInlineDirection\" : prop('boolean', { default : false } ),\n\n            /**\n             * @componentProperty {boolean} ltPropAllowContainment\n             * @version 3.68.0\n             * @default false\n             *\n             */\n\n             \"ltPropAllowContainment\" : prop('boolean' , {\n                default : false\n            }),\n            \"ltPropFocusOnClose\" : prop('boolean' , {\n                default : false\n            }),\n            \"ltPropPadding\" : prop('string' , {\n                default : \"\"\n            }),\n\n            \"ltPropDependentModalId\": prop('string', {default: ''}),\n            \"ltPropParentModalId\": prop('string', {default: ''}),\n            \"ltPropShowWormhole\" : prop('boolean' , {\n                default : false\n            }),\n\n            \n            //local properties\n            \"first\":prop(\"boolean\",{\"default\":true}),\n            'resizeCalled' : prop(\"boolean\",{\"default\":false}),\n            'initializedPosition' : prop(\"boolean\",{\"default\":false}),\n            \"prevHeight\" : prop(\"number\"),\n            \"returnedFalse\" : prop(\"boolean\",{\"default\" : false}),\n            \"prevModalHeight\" : prop(\"number\"),\n            \"prevModalWidth\" : prop(\"number\"),\n            \"calculateHW\" : prop(\"boolean\", {\"default\":false}),\n            \"checkAria\" : prop(\"number\", {\"default\":0}),\n            \"beforeDragPosition\" : prop('object' , {default : {xPos:0,yPos:0}}),\n            \"resetTriggered\" : prop('boolean' , {default : false})\n            // \"modalCreationOrder\" : Lyte.attr('number' , {'default' : -1}),\n        };\n    }\n\n    addDragHandler() {\n        var dragHeader = this.actualModalDiv.querySelector('lyte-modal-header');\n        if(this.$node.ltProp(\"draggable\")){\n            $L(dragHeader).addClass('lyteModalDragRunning');\n        }\n        if(dragHeader){\n            dragHeader.parentEle = this;\n            if(this.$node.ltProp(\"draggable\")){\n                dragHeader.addEventListener('mousedown',this.handleMove,true);\n                dragHeader.addEventListener('touchstart',this.handleMove,true);\n                dragHeader.classList.add('lyteModalHeaderDraggable');\n            }\n            else{\n                dragHeader.removeEventListener('mousedown',this.handleMove,true);\n                dragHeader.removeEventListener('touchstart',this.handleMove,true);\n                dragHeader.classList.remove('lyteModalHeaderDraggable');\n            }\n        }\n        else{\n            console.warn(\"This modal is not draggable because it has no header\");\n            this.$node.ltProp(\"draggable\",false);\n        }\n    }\n\n    handleMove(e) {\n        if(e.button === 2){\n            return\n        }\n        var drag = e.currentTarget.parentEle.actualModalDiv, mouseOffset;\n        window.LytePopup.node=drag;\n        if(e.type == \"mousedown\"){\n            mouseOffset = { x : e.clientX, y : e.clientY};\n        }\n        if(e.type == \"touchstart\"){\n            mouseOffset = { x : e.touches[0].clientX, y : e.touches[0].clientY};\n        }\n        if(e.currentTarget.parentEle.getData('ltPropTransition').animation == \"fadeIn\"){\n            LytePopup.xPos=mouseOffset.x-this.getBoundingClientRect().left;\n            LytePopup.yPos=mouseOffset.y-this.getBoundingClientRect().top;\n        }\n        else{\n            LytePopup.xPos=mouseOffset.x;\n            LytePopup.yPos=mouseOffset.y;\n        }\n        var elePos = drag.getBoundingClientRect();\n        drag.style.transitionDuration = \"0s\";\n        if(e.type == \"mousedown\"){\n            window.addEventListener('mousemove',e.currentTarget.parentEle.handleDrag,true);\n            window.addEventListener('mouseup',e.currentTarget.parentEle.stopDrag,true);\n        }\n        if(e.type == \"touchstart\"){\n            document.body.addEventListener('touchmove',e.currentTarget.parentEle.handleDrag,true);\n            document.body.addEventListener('touchend',e.currentTarget.parentEle.stopDrag,true);\n        }\n\n    }\n\n    handleDrag(e) {\n        var drag = window.LytePopup.node;\n        var curComp = $L(drag).closest('lyte-wormhole')[0]._callee\n        var dragBounding = drag.getBoundingClientRect()\n        var compStyle = window.getComputedStyle(drag);\n        if(!window.LytePopup.node){\n            return;\n        }\n        var curleft = 0\n        var curtop = 0\n        var mouseOffset;\n        if(e.type == \"mousemove\"){\n            mouseOffset = { x : e.clientX, y : e.clientY};\n        }\n        if(e.type == \"touchmove\"){\n            mouseOffset = { x : e.touches[0].clientX, y : e.touches[0].clientY};\n        }\n        if(window.LytePopup.node.closest('lyte-wormhole')._callee.component.getData('ltPropTransition').animation == \"fadeIn\"){\n            curleft = (mouseOffset.x-window.LytePopup.xPos)\n            curtop = (mouseOffset.y-window.LytePopup.yPos)\n            if(!curComp.getData('ltPropAllowContainment')){\n                drag.style.left = curleft+'px';\n                drag.style.top = curtop+'px';\n            } else {\n                if(curleft + drag.getBoundingClientRect().width <= window.innerWidth && (curleft >= 0)){\n                    drag.style.left = curleft + 'px';\n                }else if(curleft < 0){\n                    drag.style.left = \"0px\";\n                } else {\n                    drag.style.left = ( window.innerWidth - drag.getBoundingClientRect().width ) + 'px';\n                }\n        \n                if(curtop + drag.getBoundingClientRect().height <= window.innerHeight && (curtop >= 0)){\n                    drag.style.top = curtop + 'px';\n                }else if(curtop < 0){\n                    drag.style.top = \"0px\";\n                } else {\n                    drag.style.top = ( window.innerHeight - drag.getBoundingClientRect().height ) + 'px';\n                }\n            }\n\n        }\n        else{\n          var matrix = window.LytePopup.node.closest('lyte-wormhole')._callee.component.transform\n          if((window.LytePopup.node.closest('lyte-wormhole')._callee.component.getData('ltPropTransition').animation == \"zoom\") && !matrix){\n            matrix = {}\n            matrix.x = 0;\n            matrix.y = 0\n          } \n            var x = matrix.x+(mouseOffset.x-window.LytePopup.xPos),\n                y = matrix.y+(mouseOffset.y-window.LytePopup.yPos);\n                drag.style.transform = \"translate(\"+x+\"px, \"+y+\"px)\";\n\n                dragBounding = drag.getBoundingClientRect()\n\n            if(curComp.getData('ltPropAllowContainment')){\n                if(dragBounding.left + dragBounding.width > window.innerWidth && (dragBounding.left >= 0)){\n                    x = (window.innerWidth - dragBounding.width) - parseFloat(compStyle.left)\n                } else if(dragBounding.left<0){\n                    x =  - parseFloat(compStyle.left)\n                }\n                if(dragBounding.top + dragBounding.height > window.innerHeight && (dragBounding.top >= 0)){\n                    y = (window.innerHeight - dragBounding.height) - parseFloat(compStyle.top)\n                } else if(dragBounding.top<0){\n                    y = - parseFloat(compStyle.top)\n                }\n                drag.style.transform = \"translate(\"+x+\"px, \"+y+\"px)\";\n            }\n\n\n        }\n        window.getSelection().removeAllRanges();\n    }\n\n    stopDrag(e) {\n        var targetElem = e.target;\n        if(!$L(targetElem).hasClass('lyteModalDragRunning')){\n            targetElem = $L('.lyteModalDragRunning')[0]\n        }\n        while(targetElem && targetElem !== document){\n            if(targetElem.parentEle){\n                if(e.type == \"mouseup\"){\n                    this.removeEventListener('mousemove',targetElem.parentEle.handleDrag,true);\n                    this.removeEventListener('mouseup',targetElem.parentEle.stopDrag,true);\n                }\n                if(e.type == \"touchend\"){\n                    this.removeEventListener('touchmove',targetElem.parentEle.handleDrag,true);\n                    this.removeEventListener('touchend',targetElem.parentEle.stopDrag,true);\n                }\n                break;\n            }\n            targetElem = targetElem.parentElement ? targetElem.parentElement : document;\n        }\n        if(window.LytePopup.node){\n            var comp = window.LytePopup.node.closest('lyte-wormhole')._callee.component;\n            window.LytePopup.node.style.transitionDuration = comp.getData('ltPropTransition').duration;\n            if(comp.getData('ltPropTransition').animation != \"fadeIn\"){\n                var matrix = new window.WebKitCSSMatrix(window.getComputedStyle(comp.actualModalDiv).transform);\n                comp.transform = {'x' : matrix.m41, 'y' : matrix.m42};\n            }\n            LytePopup.node = null;\n        }\n    }\n\n    clearFastdomBatch() {\n        if(this.fastdomfn1){\n            $L.fastdom.clear(this.fastdomfn1);\n        }\n        if(this.fastdomfn2){\n            $L.fastdom.clear(this.fastdomfn2);\n        }\n        if(this.fastdomfn3){\n            $L.fastdom.clear(this.fastdomfn3);\n        }\n        if(this.fastdomfn4){\n            $L.fastdom.clear(this.fastdomfn4);\n        }\n        if(this.fastdomfn5){\n            $L.fastdom.clear(this.fastdomfn5);\n        }\n        if(this.fastdomfn6){\n            $L.fastdom.clear(this.fastdomfn6);\n        }\n        if(this.fastdomfn7){\n            $L.fastdom.clear(this.fastdomfn7);\n        }\n        if(this.fastdomfn8){\n            $L.fastdom.clear(this.fastdomfn8);\n        }\n        if(this.beforeShowId){\n            clearTimeout(this.beforeShowId);\n        }\n    }\n\n    /**\n     * The method is going to set height and width of the modal\n     *\n     */\n    updateScrollHandling() {    //It sets the height and width of the modal\n        if(!this.$node.ltProp(\"freeze\")){\n            // this.$node.ltProp(\"scrollable\",true);\n            this.setData(\"calculateHW\",true);\n        }\n        var modalElem = this.actualModalDiv;\n        var oldHeight, oldWidth, newHeight, newWidth,\n        w =  Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n        contentNode = modalElem.querySelector(\"lyte-modal-content\");\n        // contentNode = contentNode ? contentNode : modalElem;\n        modalElem.style.maxWidth = \"\";\n        modalElem.style.maxHeight = \"\";\n        modalElem.style.height = this.$node.ltProp(\"height\")?this.$node.ltProp(\"height\"):\"auto\";\n        modalElem.style.width = this.$node.ltProp(\"width\")?( (!(this.getData('ltPropOverlapModal')) && this.$node.ltProp(\"width\").indexOf('%') != -1) ? ((parseFloat(this.$node.ltProp(\"width\"))/100) * w) + \"px\" : this.$node.ltProp(\"width\") ):\"auto\";\n        // console.log(this.$node.ltProp(\"width\"));\n        /*------------------------------ MEASURE STARTS --------------------------*/\n        this.fastdomfn2 = $L.fastdom.measure(function() {    //Measures the initial height and width\n            delete this.fastdomfn2;\n            var modalElemOffset = modalElem.getBoundingClientRect();\n            /*IF maxwidth or maxheigth given as a percentage then to calculate the actual width or height\n                                we need the modalElements parent element's width and height*/\n            var modalParentOff = modalElem.parentElement.getBoundingClientRect();\n            var cs = window.getComputedStyle(modalElem);\n            var borderDimensionY = ((cs.borderTopWidth ? parseFloat(cs.borderTopWidth) : 0) +\n                                     (cs.borderBottomWidth ? parseFloat(cs.borderBottomWidth) : 0));\n            var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - (this.getData('ltPropFreeze') ? parseInt(window.getComputedStyle(modalElem.parentElement).top) : 0);\n            // console.log(modalElemOffset);\n            /*------------------------------ MUTATE STARTS --------------------------*/\n            this.fastdomfn3 = $L.fastdom.mutate(function(){    //Checks for the max height and width provided by the user and sets the modal height and width based on that\n                delete this.fastdomfn3;\n                if(this.$node.ltProp(\"maxWidth\")){\n                    // this.$node.ltProp(\"scrollable\",true);\n                    // this.setData(\"calculateHW\",true);\n                    // oldWidth = modalElemOffset.width /*- borderDimensionX*/;\n                    newWidth = this.$node.ltProp(\"maxWidth\").indexOf('%') != -1 ? ((parseFloat(this.$node.ltProp(\"maxWidth\"))/100) * modalParentOff.width) : parseFloat(this.$node.ltProp(\"maxWidth\"));\n                    modalElem.style.maxWidth = newWidth + \"px\";\n                    // if(oldWidth < newWidth){\n                    //     modalElem.style.width = oldWidth+\"px\";\n                    //     // newWidth = oldWidth;\n                    // }\n                    modalElem.style.overflowX = \"auto\";\n                }\n                else{\n                    newWidth = modalElemOffset.width /*- borderDimensionX*/;\n                }\n\n                if(this.$node.ltProp(\"maxHeight\")){\n                    this.childComp.querySelector(\".modalWrapper\").classList.add(\"scrollable\");\n                    // this.$node.ltProp(\"scrollable\",true);\n                    this.setData(\"calculateHW\",true);\n                    oldHeight = modalElemOffset.height - borderDimensionY;\n                    var newH = this.$node.ltProp(\"maxHeight\").indexOf('%') != -1 ? ((parseFloat(this.$node.ltProp(\"maxHeight\"))/100) * modalParentOff.height) : parseFloat(this.$node.ltProp(\"maxHeight\"));\n                    // modalElem.style.height = newH + \"px\";\n                    modalElem.style.maxHeight = newH + \"px\";\n                    newHeight = newH - borderDimensionY;\n                }\n                else{\n                    /*  +1 is added here to the oldHeight as offsetHeights are rounded off values. ie. 5.5 => 6.\n                        So, if 5.5 + 5.5 = 11. But offsetHeight will give 6 + 6 by rounding off 5.5 which is != 11.\n                        So for safety we add extra 1 px to the total height.\n                    */\n                    oldHeight = modalElem.offsetHeight - borderDimensionY + 1;\n                    //If height is provided in px or em then we dont compare if it is greater than window height as it is fixed\n                    if(this.$node.ltProp('height') && this.$node.ltProp('height') != \"auto\"/* && ((this.$node.ltProp('height')).indexOf('px') != -1 || (this.$node.ltProp('height')).indexOf('em') != -1)*/){\n                        newHeight = oldHeight;\n                        this.setData(\"calculateHW\",true);\n                    }\n                    else{\n                        newHeight = oldHeight > h ? h-40 : oldHeight;\n                    }\n                    if(this.$node.ltProp(\"scrollable\")){\n                        if(!(this.$node.ltProp('height')) || this.$node.ltProp('height') == \"auto\"){\n                            newHeight = h-40;\n                        }\n                        this.setData(\"calculateHW\",true);\n                    }\n                    if(contentNode /*this.actualModalDiv.querySelector(\"lyte-modal-content\")*/ && contentNode.offsetHeight /*this.actualModalDiv.querySelector(\"lyte-modal-content\")*/ > oldHeight - ((this.actualModalDiv.querySelector(\"lyte-modal-header\") ? this.actualModalDiv.querySelector(\"lyte-modal-header\").offsetHeight : 0) + (this.actualModalDiv.querySelector(\"lyte-modal-footer\") ? this.actualModalDiv.querySelector(\"lyte-modal-footer\").offsetHeight : 0))){\n                        // this.$node.ltProp(\"scrollable\",true);\n                        this.setData(\"calculateHW\",true);\n                    }\n                }\n                if(this.getData(\"calculateHW\") && contentNode){\n                    var modalheader = this.actualModalDiv.querySelector(\"lyte-modal-header\"), modalFooter = this.actualModalDiv.querySelector(\"lyte-modal-footer\");\n                    var modalHOff = null,modalFOff = null;\n                    /*------------------------------ MEASURE STARTS --------------------------*/\n                    this.fastdomfn4 = $L.fastdom.measure(function(){   //measures the content haeder, content and footer dimensions\n                        delete this.fastdomfn4;\n                        if(modalheader){\n                            modalHOff = modalheader.offsetHeight;\n                        }\n                        if(modalFooter){\n                            modalFOff = modalFooter.offsetHeight;\n                        }\n                        var diff = 0;\n                        var modalHeight = modalElem.getBoundingClientRect().height;\n                        // if(this.getData('resizeCalled')){\n                        //     //to get the difference between previous height and current height\n                        //     if(this.getData('prevHeight') < modalHeight){\n                        //         diff = modalHeight - this.getData('prevHeight');\n                        //     }\n                        //     this.setData('resizeCalled',false);\n                        // }\n                        this.setData('prevHeight',modalHeight);\n                        /*------------------------------ MUTATE STARTS --------------------------*/\n                        this.fastdomfn5 = $L.fastdom.mutate(function(){   //Sets the final height and width of the modal\n                            delete this.fastdomfn5;\n                            var newH = (newHeight - ((modalHOff ? modalHOff : 0)+ (modalFOff ? modalFOff : 0)));\n                            contentNode.style.maxHeight = (newH > 0 ? newH : 50) + diff +\"px\";\n                            contentNode.style.overflowY = \"auto\";\n                            if(this.$node.ltProp('height') != \"auto\" && this.getData('ltPropSetContentHeight')){\n                                contentNode.style.height = newH + \"px\";\n                            }\n                            // if(this.getData('first')){\n                            //     contentNode.style.height = (oldHeight - ((modalHOff ? modalHOff.height : 0)+ (modalFOff ? modalFOff.height : 0))) +\"px\";\n                            // }\n                            // modalElem.style.width = this.$node.ltProp(\"width\")?this.$node.ltProp(\"width\"):\"auto\";\n                            // this.actualModalDiv.style.maxWidth = newWidth > 0 ? (newWidth +\"px\"):(\"70%\");\n                            modalElem = null;\n                            contentNode = null;\n                            modalheader = null;\n                            modalFooter = null;\n                            if(!this.getData('initializedPosition')){\n                                this.computeOffsetImpl();\n                                this.setData('initializedPosition',true);\n                            }\n                            else if(this.getData('resizeCalled')){\n                                this.computeOffsetImplOnResize();\n                                this.setData('resizeCalled',false);\n                            }\n                        },this);\n                        /*------------------------------ MUTATE ENDS --------------------------*/\n                    },this);\n                    /*------------------------------ MEASURE ENDS --------------------------*/\n                }\n                else{\n                    this.childComp.querySelector(\".modalWrapper\").classList.remove(\"scrollable\");\n                    modalElem = null;\n                    contentNode = null;\n                    if(!this.getData('initializedPosition')){\n                        this.computeOffsetImpl();\n                        this.setData('initializedPosition',true);\n                    }\n                    else if(this.getData('resizeCalled')){\n                        this.computeOffsetImplOnResize();\n                        this.setData('resizeCalled',false);\n                    }\n                }\n\n                if (!this.$node.ltProp(\"freeze\")) {\n                    this.childComp.querySelector(\".modalWrapper\").classList.add('noFreeze');\n                    if(!this.renderSidewise){\n                        this.actualModalDiv.style.position = \"fixed\";\n                    }\n                }\n                // else{\n                //     this.childComp.querySelector(\".modalWrapper\").style.position = \"fixed\";\n                // }\n            },this);\n            /*------------------------------ MUTATE ENDS --------------------------*/\n        },this);\n        /*------------------------------ MEASURE ENDS --------------------------*/\n\n\n    }\n\n    callOnShow() {\n        // if(this.getData('ltPropFreeze')){\n        //     this.childComp.querySelector(\"lyte-modal-freeze\").style.transitionDuration = this.getData('ltPropTransition').duration + \"s\";\n        // }\n        this.$node.classList.add('lyteModalOpened');\n        var _this = this\n        setTimeout(function(){\n          var style = window.getComputedStyle(_this.actualModalDiv);\n          var matrix = new window.WebKitCSSMatrix(style.transform);\n          _this.setData('beforeDragPosition' , {\n            xPos : matrix.m41,\n            yPos : matrix.m42,\n            scale : matrix.a\n          })\n          window._lyteUiUtils.dispatchEvent('lyteModalOpened' , _this.actualModalDiv)\n        },(parseFloat(this.getData('ltPropTransition').duration)*1000+10))\n        if(this.getMethods(\"onShow\")){\n            this.executeMethod(\"onShow\",this);\n        }\n        if(this.addAriaValues){\n            this.addAriaValues();\n        }\n    }\n\n    callOnResize() {\n        // this.updateScrollHandling();\n        var dependentModalId = this.getData('ltPropDependentModalId');\n        if(dependentModalId != '') {\n            var dependentModalObj = $L(dependentModalId)[0].component;\n            dependentModalObj.updateScrollHandling();\n        }\n        // if(this.isResponsibleForSidewiseRender()){\n        //     LytePopup.components[1].$node.component.updateScrollHandling();\n        // }\n        var style = window.getComputedStyle(this.actualModalDiv);\n        var matrix = new window.WebKitCSSMatrix(style.transform);\n        this.setData('beforeDragPosition' , {\n          xPos : matrix.m41,\n          yPos : matrix.m42,\n          scale : matrix.a\n        })\n        if(this.getMethods(\"onResize\")){\n            this.executeMethod(\"onResize\",this);\n        }\n    }\n\n    enableTransform(val, pos, duration) {\n        this.$node.ltProp('showCopy',true);\n        var self = this;\n        setTimeout(function(){\n            if(pos == 'x'){\n                self.actualModalDiv.style.transform = \"translate(\"+val+\"px,0px)\";\n                self.transform = {'x' : val, 'y' : 0};\n            }\n            if(pos == 'y'){\n                self.actualModalDiv.style.transform = \"translate(0px,\"+val+\"px)\";\n                self.transform = {'x' : 0, 'y' : val};\n            }\n        },(duration != undefined ? duration : undefined))\n\n    }\n\n    /**\n     * The method is going to redo the left and top computation when the modal is opened and the window is resized\n     *\n     */\n    computeOffsetImplOnResize() {\n        /*------------------------------ MEASURE STARTS --------------------------*/\n         $L.fastdom.measure(function() {\n            var modalEle = this.actualModalDiv,\n                modalElePosition = modalEle.getBoundingClientRect(),\n                parentStyle = window.getComputedStyle(modalEle.parentElement),\n                parentTop = parseInt(parentStyle.top), //Takes the modalWrapper's top value and subtracts it from the modals top to nullify the parent's top\n                parentLeft = parseInt(parentStyle.left),\n                correctedTop = modalEle.offsetTop,\n                w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - (this.getData('ltPropFreeze') ? parentLeft : 0),\n                h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - (this.getData('ltPropFreeze') ? parentTop : 0),\n                prevWinH = this.getData('prevWinH'),\n                prevWinW = this.getData('prevWinW'),\n                transform = this.transform /*new WebKitCSSMatrix(window.getComputedStyle(modalEle).transform)*/,\n                newTop = null,\n                newLeft = null,\n                offsetObj = this.getData('ltPropOffset'),\n                heightDiff = this.getData('prevModalHeight') - modalElePosition.height,\n                widthDiff = this.getData('prevModalWidth') - modalElePosition.width,\n                freezeLayer, wrapperDiv;\n                this.calculateForSidewiseRender();\n            if(this.renderSidewise){\n                this.renderProps.windowWidth = w;\n                w = this.getData('ltPropTransition').animation == 'slideFromRight' ? this.renderProps.left : (this.renderProps.windowWidth - this.renderProps.right);\n                freezeLayer = this.childComp.querySelector('lyte-modal-freeze');\n                wrapperDiv = this.actualModalDiv.parentElement;\n            }\n            if(this.getData('ltPropTransition').animation === \"fadeIn\" || this.getData('ltPropTransition').animation === \"zoom\"){\n              prevWinH = modalElePosition.height\n              prevWinW = modalElePosition.width\n                if(w < prevWinW){\n                    if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                        newLeft = ((prevWinW - w) / 2);\n                    }\n                    else if(offsetObj.right){\n                        newLeft = modalElePosition.left - (prevWinW - w);\n                    }\n                    else if(offsetObj.left){\n                        newLeft = modalElePosition.left;\n                    }\n                }\n                if(w > prevWinW){\n                    if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                        newLeft = ((w - prevWinW) / 2);\n                    }\n                    else if(offsetObj.right){\n                        newLeft = modalElePosition.left + (w - prevWinW);\n                    }\n                    else if(offsetObj.left){\n                        newLeft = modalElePosition.left;\n                    }\n                }\n                if(h < prevWinH){\n                    if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                        newTop = (h - modalElePosition.height)/2 /*correctedTop - ((prevWinH - h) / 2)*/;\n                    }\n                    else if(offsetObj.bottom){\n                        newTop = correctedTop - (prevWinH - h);\n                    }\n                    else if(offsetObj.top){\n                        newTop = correctedTop;\n                    }\n                }\n                if(h > prevWinH){\n                    if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                        newTop = (h - modalElePosition.height)/2 /*correctedTop + ((h - prevWinH) / 2)*/;\n                    }\n                    else if(offsetObj.bottom && offsetObj.bottom != \"center\"){\n                        newTop = correctedTop + (h - prevWinH);\n                    }\n                    else if(offsetObj.top && offsetObj.top != \"center\"){\n                        newTop = correctedTop;\n                    }\n                }\n                $L.fastdom.mutate(function() {\n                    if(newTop){\n                        modalEle.style.top = newTop + \"px\";\n                    }\n                    if(newLeft){\n                        modalEle.style.left = newLeft + \"px\";\n                    }\n                    this.callOnResize();\n                },this);\n            }\n            else{\n                if(w < prevWinW){\n                    if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                        newLeft = transform.x - ((prevWinW - w) / 2) + (widthDiff / 2);\n                    }\n                    else if(offsetObj.right){\n                        newLeft = transform.x - (prevWinW - w) + widthDiff;\n                    }\n                    else if(offsetObj.left){\n                        newLeft = transform.x;\n                    }\n                    this.transform.x = newLeft;\n                }\n                if(w > prevWinW){\n                    if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                        newLeft = transform.x + ((w - prevWinW) / 2) + (widthDiff / 2);\n                    }\n                    else if(offsetObj.right){\n                        newLeft = transform.x + (w - prevWinW) + widthDiff;\n                    }\n                    else if(offsetObj.left){\n                        newLeft = transform.x;\n                    }\n                    this.transform.x = newLeft;\n                }\n                if(h < prevWinH){\n                    if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                        newTop = transform.y - ((prevWinH - h) / 2) + (heightDiff / 2);\n                    }\n                    else if(offsetObj.bottom){\n                        newTop = transform.y - (modalElePosition.bottom - h + parseInt(offsetObj.bottom)) /*(prevWinH - h)*/;\n                    }\n                    else if(offsetObj.top){\n                        newTop = transform.y;\n                    }\n                    this.transform.y = newTop;\n                }\n                if(h > prevWinH){\n                    if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                        newTop = transform.y + ((h - prevWinH) / 2) + (heightDiff / 2);\n                    }\n                    else if(offsetObj.bottom && offsetObj.bottom != \"center\"){\n                        newTop = transform.y + (h - modalElePosition.bottom - parseInt(offsetObj.bottom))/*(h - prevWinH)*/;\n                    }\n                    else if(offsetObj.top && offsetObj.top != \"center\"){\n                        newTop = transform.y;\n                    }\n                    // console.log(\"prev top\", this.transform.y);\n                    // console.log(\"new top\", newTop);\n                    this.transform.y = newTop;\n                }\n                $L.fastdom.mutate(function() {\n                    modalEle.style.transitionDuration = \"0s\";\n                    if(this.getData('ltPropTransition').animation === \"slideFromTop\" || this.getData('ltPropTransition').animation === \"slideFromBottom\"){\n                        if(w < prevWinW){\n                            if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                                modalEle.style.left = modalElePosition.left - ((prevWinW - w) / 2) + (widthDiff/2) + \"px\";\n                            }\n                            else if(offsetObj.right){\n                                modalEle.style.left = modalElePosition.left - (prevWinW - w) + widthDiff + \"px\";\n                            }\n                            else if(offsetObj.left){\n                                modalEle.style.left = modalElePosition.left + \"px\";\n                            }\n                            // modalEle.style.left = modalElePosition.left - ((prevWinW - w)/2) + \"px\";\n                        }\n                        if(w > prevWinW){\n                            if((offsetObj.left && offsetObj.left == \"center\") || (offsetObj.right && offsetObj.right == \"center\")){\n                              modalEle.style.left = modalElePosition.left + ((w - prevWinW) / 2) + (widthDiff/2) + \"px\";\n                            }\n                            else if(offsetObj.right){\n                                modalEle.style.left = modalElePosition.left + (w - prevWinW) + widthDiff + \"px\";\n                            }\n                            else if(offsetObj.left){\n                                modalEle.style.left = modalElePosition.left + \"px\";\n                            }\n                            // modalEle.style.left = modalElePosition.left + ((w - prevWinW)/2) + \"px\";\n                        }\n                        modalEle.style.transform = \"translate(0px,\"+this.transform.y+\"px)\";\n                    }\n                    else if(this.getData('ltPropTransition').animation === \"slideFromLeft\" || this.getData('ltPropTransition').animation === \"slideFromRight\"){\n                        if(h < prevWinH){\n                            if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                                modalEle.style.top = correctedTop - ((prevWinH - h) / 2) + (heightDiff/2) + \"px\";\n                            }\n                            else if(offsetObj.bottom){\n                                modalEle.style.top = correctedTop - (prevWinH - h) + \"px\";\n                            }\n                            else if(offsetObj.top){\n                                modalEle.style.top = correctedTop + \"px\";\n                            }\n                            // modalEle.style.top = modalElePosition.top - ((prevWinH - h)/2) + \"px\";\n                        }\n                        if(h > prevWinH){\n                            if((offsetObj.top && offsetObj.top == \"center\") || (offsetObj.bottom && offsetObj.bottom == \"center\")){\n                                modalEle.style.top = correctedTop + ((h - prevWinH) / 2) + (heightDiff/2) + \"px\";\n                            }\n                            else if(offsetObj.bottom && offsetObj.bottom != \"center\"){\n                                modalEle.style.top = correctedTop + (h - prevWinH) + \"px\";\n                            }\n                            else if(offsetObj.top && offsetObj.top != \"center\"){\n                                modalEle.style.top = correctedTop + \"px\";\n                            }\n                            // modalEle.style.top = modalElePosition.top + ((h - prevWinH)/2) + \"px\";\n                        }\n                        modalEle.style.transform = \"translate(\"+this.transform.x+\"px,0px)\";\n                        if(this.renderSidewise){\n                            if(this.getData('ltPropTransition').animation == 'slideFromRight'){\n                                var rightValue = this.renderProps.windowWidth - this.renderProps.left;\n                                if(freezeLayer){\n                                    freezeLayer.style.right = rightValue + \"px\";\n                                }\n                                if(wrapperDiv){\n                                    wrapperDiv.style.right = rightValue - 5 + \"px\";\n                                }\n                            }\n                            if(this.getData('ltPropTransition').animation == 'slideFromLeft'){\n                                if(freezeLayer){\n                                    freezeLayer.style.left = this.renderProps.right + \"px\";\n                                }\n                                if(wrapperDiv){\n                                    wrapperDiv.style.left = (this.renderProps.right + 1) + \"px\";\n                                }\n                            }\n                        }\n                    }\n                    this.callOnResize();\n                    // modalEle.style.transitionDuration = this.$node.ltProp(\"transition\").duration+\"s\";\n                },this);\n            }\n            this.setData('prevModalHeight',modalElePosition.height);\n            this.setData('prevModalWidth',modalElePosition.width);\n            this.setData('prevWinH',h);\n            this.setData('prevWinW',w);\n        },this);\n        /*------------------------------ MEASURE ENDS --------------------------*/\n        // modalEle = null;\n    }\n\n    isResponsibleForSidewiseRender() {\n        var components = window.LytePopup.components;\n        if(components.length > 1 && components[components.length - 2] === this && components[components.length - 1].renderSidewise){\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * The method is going to calculate the left and top value of the modal and perform the animation\n     *\n     */\n    computeOffsetImpl(arg, triggeredFromTransChange) {\n        var lyteSelf = this;\n        //sets the left and top of the modal based on user provided values\n        var _this = this.nodeName && this.nodeName === \"LYTE-MODAL\" ? this.component : this;\n        /*------------------------------ MEASURE STARTS --------------------------*/\n        _this.fastdomfn6 = $L.fastdom.measure(function() {\n           delete _this.fastdomfn6;\n           if(!_this.actualModalDiv){\n               return;\n           }\n           _this.calculateForSidewiseRender();\n           var modalEle = _this.actualModalDiv;\n           var freezeLayer, wrapperDiv;\n           var offsetObj = lyteSelf.$addon .deepCopyObject(_this.$node.ltProp('offset'));\n           var modalRect = modalEle.getBoundingClientRect();\n           var modalElePosition = {top: modalRect.top,\n                                   right: modalRect.right,\n                                   bottom: modalRect.bottom,\n                                   left: modalRect.left,\n                                   width: modalEle.offsetWidth,\n                                   height: modalEle.offsetHeight\n                               };\n           var parentLeft = 0, parentTop = 0;\n           if(_this.getData('ltPropFreeze')){\n               var parentStyle = window.getComputedStyle(modalEle.parentElement);\n               parentLeft = parseInt(parentStyle.left);\n               parentTop = parseInt(parentStyle.top);\n           }\n           var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - parentLeft;\n           if(_this.renderSidewise){\n               _this.renderProps.windowWidth = w;\n               w = _this.getData('ltPropTransition').animation == 'slideFromRight' ? _this.renderProps.left : (_this.renderProps.windowWidth - _this.renderProps.right);\n               freezeLayer = _this.childComp.querySelector('lyte-modal-freeze');\n               wrapperDiv = _this.actualModalDiv.parentElement;\n           }\n           var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - parentTop;\n            // $L.fastdom.mutate(() => {\n               modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp(\"transition\").duration)+\"s\";\n           // },this);\n           _this.setData('prevWinH',h);\n           _this.setData('prevWinW',w);\n           _this.setData('prevModalHeight',modalElePosition.height);\n           _this.setData('prevModalWidth',modalElePosition.width);\n           if(offsetObj){\n               if(offsetObj.left === \"center\" || offsetObj.right === \"center\"){\n                   var offLeft = (w - modalElePosition.width)/2;\n                   if(offLeft < 0){\n                       offLeft = 20;\n                   }\n                   offsetObj.left = offLeft;\n               }\n               if(offsetObj.top === \"center\" || offsetObj.bottom === \"center\"){\n                   var offTop = (h - modalElePosition.height)/2;\n                   if(offTop < 0){\n                       offTop = 20;\n                   }\n                   offsetObj.top = offTop;\n               }\n               if(offsetObj.right && offsetObj.right !== \"center\"){\n                   if(offsetObj.right.indexOf(\"%\") > -1){\n                       offsetObj.left = w-(modalElePosition.width+(w/parseFloat(offsetObj.right)));\n                   }\n                   else{\n                       offsetObj.left = w-(modalElePosition.width+parseFloat(offsetObj.right));\n                   }\n               }\n               if(offsetObj.bottom && offsetObj.bottom !== \"center\"){\n                   if(offsetObj.bottom.indexOf(\"%\") > -1){\n                       offsetObj.top = h-(modalElePosition.height+(h/parseFloat(offsetObj.bottom)));\n                   }\n                   else{\n                       offsetObj.top = h-(modalElePosition.height+parseFloat(offsetObj.bottom));\n                   }\n               }\n               if(offsetObj.left === \"\" || offsetObj.left == undefined){\n                   _this.data.ltPropOffset.left = \"center\";\n                   offsetObj.left = ((w - modalElePosition.width)/2);\n               }\n               if(offsetObj.top === \"\" || offsetObj.top == undefined){\n                   _this.data.ltPropOffset.top = \"center\";\n                   offsetObj.top = ((h - modalElePosition.height)/2);\n               }\n               if(_this.getData('ltPropTransition').originElement){\n                   var ele = document.querySelector(_this.getData('ltPropTransition').originElement);\n                   if(!ele){\n                       console.error(\"The originElement provided does not exist. Kindly Check!\");\n                   }\n                   else{\n                       var eleOffset = ele.getBoundingClientRect();\n                       offsetObj.originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (parseFloat(offsetObj.left) + (modalElePosition.width/2)),\n                                                     yDiff : (eleOffset.top + (eleOffset.height/2)) - (parseFloat(offsetObj.top) + (modalElePosition.height/2)) };\n                   }\n               }\n               /*------------------------------ MUTATE STARTS --------------------------*/\n                _this.fastdomfn7 = $L.fastdom.mutate(function() {\n                   delete _this.fastdomfn7;\n                   if(_this.getData('first')){\n                       window.LytePopup.bindTransitionEnd(_this.actualModalDiv);\n                   }\n                   if(_this.getData('ltPropTransition').animation == \"slideFromTop\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = (-1 * modalElePosition.height) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(0px,\"+(parseInt(offsetObj.top)+modalElePosition.height)+\"px)\";\n                           _this.transform = {'x' : 0, 'y' : (parseInt(offsetObj.top)+modalElePosition.height)};\n                           return;\n                       }\n                       _this.enableTransform(parseInt(offsetObj.top)+modalElePosition.height,\"y\",arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromBottom\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = h+1 + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(0px,\"+(-1 * (h - parseInt(offsetObj.top) + 1))+\"px)\";\n                           _this.transform = {'x': 0, 'y': (-1 * (h - parseInt(offsetObj.top) + 1))};\n                           return;\n                       }\n                       _this.enableTransform(-1 * (h - parseInt(offsetObj.top) + 1),\"y\",arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                       if(_this.renderSidewise){\n                           if(freezeLayer){\n                               freezeLayer.style.left = _this.renderProps.right + \"px\";\n                           }\n                           if(wrapperDiv){\n                               wrapperDiv.style.left = _this.renderProps.right + \"px\";\n                           }\n                       }\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.left = (-1 * modalElePosition.width) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(\"+(parseInt(offsetObj.left)+modalElePosition.width)+\"px,0px)\";\n                           _this.transform = {'x' : (parseInt(offsetObj.left)+modalElePosition.width), 'y' : 0};\n                           return;\n                       }\n                       _this.enableTransform(parseInt(offsetObj.left)+modalElePosition.width,'x',arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                       if(_this.renderSidewise){\n                           var rightValue = _this.renderProps.windowWidth - _this.renderProps.left;\n                           if(freezeLayer){\n                               freezeLayer.style.right = rightValue + \"px\";\n                           }\n                           if(wrapperDiv){\n                               wrapperDiv.style.right = rightValue - 5 + \"px\";\n                           }\n                       }\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.left = w + 1 + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(\"+(-1 * (w - parseInt(offsetObj.left) + 1))+\"px,0px)\";\n                           _this.transform = {'x' : (-1 * (w - parseInt(offsetObj.left) + 1)), 'y' : 0};\n                           return;\n                       }\n                       _this.enableTransform(-1 * (w - parseInt(offsetObj.left) + 1),'x',arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"fadeIn\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"\";\n                           return;\n                       }\n                       _this.$node.ltProp('showCopy',true);\n                       // setTimeout(function(){\n                           modalEle.style.opacity = 1;\n                       // },200);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"zoom\"){\n                       _this.$node.ltProp('showCopy',true);\n                       var transform = \"scale(0)\";\n                       if(offsetObj.originElementPos){\n                           transform = \"translateX( \"+ offsetObj.originElementPos.xDiff + \"px) translateY( \"+ offsetObj.originElementPos.yDiff + \"px) scale(0)\";\n                       }\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.transition = \"none\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = offsetObj.originElementPos ? 'translateX(0) translateY(0) scale(1)' : 'scale(1)';\n                           setTimeout(function(){\n                               modalEle.style.transition = \"\";\n                           },16)\n                           return;\n                       }\n                       modalEle.style.transform = transform;\n                       modalEle.style.opacity = 1;\n                       setTimeout(function(){\n                           modalEle.style.transition = \"\";\n                           modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp(\"transition\").duration)+\"s\";\n                           if(offsetObj.originElementPos){\n                               modalEle.style.transform = 'translateX(0) translateY(0) scale(1)';\n                           }\n                           else{\n                               modalEle.style.transform = 'scale(1)';\n                           }\n                       },50);\n                   }\n\n                   if(_this.$node.ltProp(\"freeze\")){\n                       document.body.classList.add('bodyWrapper');\n                       // LytePopup.bodywrapperCount += 1;\n                   }\n                   if(_this.getData('first')){\n                       // LytePopup.bindTransitionEnd(_this.actualModalDiv);\n                       _this.callOnShow();\n                       _this.setData(\"first\",false);\n                   }\n               },_this);\n               /*------------------------------ MUTATE ENDS --------------------------*/\n           }\n           else{\n               _this.setData('ltPropOffset',{left:\"center\", top:\"center\"});\n               // _this.data.ltPropOffset.left = \"center\";\n               // _this.data.ltPropOffset.top = \"center\";\n               offsetObj.left = ((w - modalElePosition.width)/2);\n               offsetObj.top = ((h - modalElePosition.height)/2);\n               if(!_this.$node.ltProp(\"scrollable\")){\n                   if(offsetObj.left < 0){\n                       offsetObj.left = 20;\n                   }\n                   if(offsetObj.top < 0){\n                       offsetObj.top = 20;\n                   }\n               }\n               if(_this.getData('ltPropTransition').originElement){\n                   var ele = document.querySelector(_this.getData('ltPropTransition').originElement);\n                   if(!ele){\n                       console.error(\"The originElement provided does not exist. Kindly Check!\");\n                   }\n                   else{\n                       var eleOffset = ele.getBoundingClientRect();\n                       offsetObj.originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (offsetObj.left + (modalElePosition.width/2)),\n                                                     yDiff : (eleOffset.top + (eleOffset.height/2)) - (offsetObj.top + (modalElePosition.height/2)) };\n                   }\n               }\n               /*------------------------------ MUTATE STARTS --------------------------*/\n               _this.fastdomfn8 = $L.fastdom.mutate(function() {\n                   delete _this.fastdomfn8;\n                   if(_this.getData('first')){\n                       window.LytePopup.bindTransitionEnd(_this.actualModalDiv);\n                   }\n                   if(_this.getData('ltPropTransition').animation == \"slideFromTop\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = (-1 * modalElePosition.height) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(0px,\"+(parseInt(offsetObj.top)+modalElePosition.height)+\"px)\";\n                           _this.transform = {'x' : 0, 'y' : (parseInt(offsetObj.top)+modalElePosition.height)};\n                           return;\n                       }\n                       _this.enableTransform(parseInt(offsetObj.top)+modalElePosition.height,\"y\",arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromBottom\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = h+1 + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(0px,\"+(-1 * (h - parseInt(offsetObj.top) + 1))+\"px)\";\n                           _this.transform = {'x': 0, 'y': (-1 * (h - parseInt(offsetObj.top) + 1))};\n                           return;\n                       }\n                       _this.enableTransform(-1 * (h - parseInt(offsetObj.top) + 1),\"y\",arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                       if(_this.renderSidewise){\n                           if(freezeLayer){\n                               freezeLayer.style.left = _this.renderProps.right + \"px\";\n                           }\n                           if(wrapperDiv){\n                               wrapperDiv.style.left = _this.renderProps.right + \"px\";\n                           }\n                       }\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.left = (-1 * modalElePosition.width) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(\"+(parseInt(offsetObj.left)+modalElePosition.width)+\"px,0px)\";\n                           _this.transform = {'x' : (parseInt(offsetObj.left)+modalElePosition.width), 'y' : 0};\n                           return;\n                       }\n                       _this.enableTransform(parseInt(offsetObj.left)+modalElePosition.width,'x',arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                       if(_this.renderSidewise){\n                           var rightValue = _this.renderProps.windowWidth - _this.renderProps.left;\n                           if(freezeLayer){\n                               freezeLayer.style.right = rightValue + \"px\";\n                           }\n                           if(wrapperDiv){\n                               wrapperDiv.style.right = rightValue - 5 + \"px\";\n                           }\n                       }\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.left = w + 1 + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"translate(\"+(-1 * (w - parseInt(offsetObj.left) + 1))+\"px,0px)\";\n                           _this.transform = {'x' : (-1 * (w - parseInt(offsetObj.left) + 1)), 'y' : 0};\n                           return;\n                       }\n                       _this.enableTransform(-1 * (w - parseInt(offsetObj.left) + 1),'x',arg);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"fadeIn\"){\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = \"\";\n                           return;\n                       }\n                       _this.$node.ltProp('showCopy',true);\n                       // setTimeout(function(){\n                           modalEle.style.opacity = 1;\n                       // },200);\n                   }\n                   else if(_this.getData('ltPropTransition').animation == \"zoom\"){\n                       _this.$node.ltProp('showCopy',true);\n                       var transform = \"scale(0)\";\n                       if(offsetObj.originElementPos){\n                           transform = \"translateX( \"+ offsetObj.originElementPos.xDiff + \"px) translateY( \"+ offsetObj.originElementPos.yDiff + \"px) scale(0)\";\n                       }\n                       modalEle.style.left = parseFloat(offsetObj.left) + \"px\";\n                       modalEle.style.top = parseFloat(offsetObj.top) + \"px\";\n                       modalEle.style.transition = \"none\";\n                       if(triggeredFromTransChange){\n                           modalEle.style.transform = offsetObj.originElementPos ? 'translateX(0) translateY(0) scale(1)' : 'scale(1)';\n                           setTimeout(function(){\n                               modalEle.style.transition = \"\";\n                           },16)\n                           return;\n                       }\n                       modalEle.style.transform = transform;\n                       modalEle.style.opacity = 1;\n                       setTimeout(function(){\n                           modalEle.style.transition = \"\";\n                           modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp(\"transition\").duration)+\"s\";\n                           if(offsetObj.originElementPos){\n                               modalEle.style.transform = 'translateX(0) translateY(0) scale(1)';\n                           }\n                           else{\n                               modalEle.style.transform = 'scale(1)';\n                           }\n                       },50);\n                   }\n                   if(_this.$node.ltProp(\"freeze\")){\n                       document.body.classList.add('bodyWrapper');\n                       // LytePopup.bodywrapperCount += 1;\n                   }\n                   if(_this.getData('first')){\n                       _this.callOnShow();\n                       _this.setData(\"first\",false);\n                   }\n               },_this);\n               /*------------------------------ MUTATE ENDS --------------------------*/\n           }\n       },_this);\n        /*------------------------------ MEASURE ENDS --------------------------*/\n        // modalEle = null;\n    }\n\n    /**\n     * The method is going to check if sidewise render will be done and assigns the values that will be used for sidewise rendering of the modal\n     *\n     */\n    calculateForSidewiseRender() {\n        if(window.LytePopup.components.length > 1){\n            var prevModal;\n            // if(this.getData('modalCreationOrder') > 0) {\n            // // if(LytePopup.components[LytePopup.components.length - 2].$node.tagName === \"LYTE-MODAL\"){\n                // prevModal = LytePopup.components[this.getData('modalCreationOrder')-1];\n            // }\n            var parentModalId = this.getData('ltPropParentModalId');\n            if( parentModalId != '') {\n                prevModal = $L(parentModalId)[0].component;\n            }\n            else if(parentModalId == '' && this.getData('ltPropDependentModalId') == '') {\n                var curModalIndexInArray = window.LytePopup.components.indexOf(this);\n\t\t\t\tif((curModalIndexInArray > 0) && (window.LytePopup.components[curModalIndexInArray - 1].$node.tagName === \"LYTE-MODAL\")){\n\t\t\t\t\tprevModal = window.LytePopup.components[curModalIndexInArray - 1];\n\t\t\t\t}\n            }\n            if(!this.getData('ltPropOverlapModal') && prevModal && prevModal.getData('ltPropAllowMultiple') && [\"slideFromLeft\",\"slideFromRight\"].indexOf(this.getData('ltPropTransition').animation) != -1){\n                this.renderSidewise = true;\n                var prevModalOffset = prevModal.actualModalDiv.getBoundingClientRect();\n                this.renderProps = {\n                    prevModal : prevModal,\n                    left : Math.round(prevModalOffset.left),\n                    right : Math.round(prevModalOffset.right),\n                    width : Math.round(prevModalOffset.width)\n                };\n            }\n        }\n    }\n\n    closeModal() {\n        var freezeLayer = this.childComp.querySelector('lyte-modal-freeze');\n        if(this.renderSidewise){\n            if(this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                if(freezeLayer){\n                    freezeLayer.style.right = \"\";\n                }\n                this.actualModalDiv.parentElement.style.right = \"\";\n            }\n            if(this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                if(freezeLayer){\n                    freezeLayer.style.left = \"\";\n                }\n                this.actualModalDiv.parentElement.style.left = \"\";\n            }\n            delete this.renderSidewise;\n            delete this.renderProps;\n        }\n        if(window._lyteUiUtils.getRTL()){\n            if(!this.getData('ltPropIgnoreInlineDirection')){\n              if(this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                  this.getData('ltPropTransition').animation = \"slideFromRight\";\n              }\n              else if(this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                  this.getData('ltPropTransition').animation = \"slideFromLeft\";\n              }\n            var offset = this.getData('ltPropOffset'),\n                newOffset = {};\n            for(window.key in offset){\n                if(window.key == \"left\" && offset[window.key] != \"center\"){\n                    newOffset.right = offset[window.key];\n                }\n                else if(window.key == \"right\"){\n                    newOffset.left = offset[window.key];\n                }\n                else{\n                    newOffset[window.key] = offset[window.key];\n                }\n            }\n            this.setData('ltPropOffset',newOffset);\n          }\n        }\n        if(this.getData('ltPropTransition').animation == \"zoom\"){\n            this.actualModalDiv.style.opacity = \"0\";\n            this.actualModalDiv.style.transform = \"\";\n        }\n        if(!this.$node.ltProp('freeze')){\n            this.childComp.querySelector(\".modalWrapper\").classList.remove('noFreeze');\n        }\n        this.$node.ltProp({\"showCopy\":false,\"show\":false});\n        // LytePopup.closePopup(this);\n\n        if(!this.$node.ltProp('freeze')){\n            this.actualModalDiv.style.position = \"\";\n        }\n        this.$node.classList.remove('lyteModalOpened');\n        if(this.actualModalDiv){\n            this.actualModalDiv.style.transform = \"\";\n        }\n\n\t\tvar transitionDuration = this.getData('ltPropTransition').duration;\n\t\tvar closeDuration = this.getData('ltPropCloseDuration');\n\t\tif(closeDuration) {\n\t\t\ttransitionDuration = (closeDuration / 1000);\n\t\t}\n\t\tvar _this = this;\n\t\tsetTimeout(function() {\n\t\t\tvar modalElem = _this.$node;\n            if(modalElem){\n                modalElem.ltProp({\"showCopy\":false, \"show\": false});\n                modalElem.classList.remove('lyteModalOpened');\n                $L(_this.childComp).addClass('lyteModalHidden');\n                if( _this.getData('ltPropTransition').animation == \"zoom\"){\n                    _this.actualModalDiv.style.opacity = \"0\";\n                    _this.actualModalDiv.style.transform = \"\";\n                }\n            }\n            if(_this.getMethods(\"onClose\")){\n                _this.executeMethod(\"onClose\",_this);\n            }\n\t\t}, (transitionDuration * 1000));\n\n        window._lyteUiUtils.dispatchEvent('lyteModalClosed' , this.actualModalDiv)\n        if(window._lyteUiUtils.popupStack.modalStack.length < 1 ){\n            document.body.classList.remove('bodyWrapper');\n            document.body.classList.remove('lyteBodyWrapper');\n        }\n        this.setData('ltPropShowWormhole' , false);\n        // if(this.getMethods(\"onClose\")){\n        //     this.executeMethod(\"onClose\",this);\n        // }\n        window.LytePopup.checkAndRemoveWrapper();\n    }\n\n    onBeforeCloseHandling(event) {\n        var result = true;\n        var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n        if(this.actualModalDiv){\n            window._lyteUiUtils.dispatchEvent('lyteModalBeforeClose' , this.actualModalDiv)\n        }\n        if(this.getMethods(\"onBeforeClose\")){\n            result = this.executeMethod(\"onBeforeClose\",event,this);\n        }\n        if(result === undefined || result){\n            if(this.actualModalDiv && this.childComp){\n                if(this.getData('ltPropFreeze') && this.addedFreezeDetails){\n                    window.LytePopup.hideOrShowFreeze(\"close\",this);\n                    delete this.addedFreezeDetails;\n                }\n                var animDur = parseFloat(this.$node.ltProp('transition').duration) * 1000;\n                var self = this;\n                // console.log(\"duration\",animDur);\n                // var t1 = performance.now();\n                this.timeOutId = setTimeout(function(){\n                    delete self.timeOutId;\n                    // var t2 = performance.now();\n                    // console.log(t2 -t1);\n                    self.closeModal();\n                },animDur);\n                var modalEle = this.actualModalDiv;\n                if(this.getData('ltPropCloseDuration')){\n                    modalEle.style.transitionDuration = (this.getData('ltPropCloseDuration') / 1000)+\"s\";\n                }\n                else{\n                    modalEle.style.transitionDuration = (animDur / 1000)+\"s\";\n                }\n                // console.log(\"transitionDuration\", modalEle.style.transitionDuration);\n                var modalElemOffset;\n                var transform = \"scale(0)\", transformVal;\n                /*------------------------------ MEASURE STARTS --------------------------*/\n                $L.fastdom.measure(function(){\n                    modalElemOffset = modalEle.getBoundingClientRect();\n                    if(this.getData('ltPropTransition').animation == \"zoom\" && this.getData('ltPropTransition').originElement){\n                        var ele = document.querySelector(this.getData('ltPropTransition').originElement);\n                        if(!ele){\n                            Console.error(\"The originElement provided does not exist. Kindly Check!\");\n                        }\n                        else{\n                            var eleOffset = ele.getBoundingClientRect();\n                            var modalElePosition = {top: modalElemOffset.top,\n                                                    right: modalElemOffset.right,\n                                                    bottom: modalElemOffset.bottom,\n                                                    left: modalElemOffset.left,\n                                                    width: modalEle.offsetWidth,\n                                                    height: modalEle.offsetHeight\n                                                };\n                            var originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (modalElePosition.left + (modalElePosition.width/2)),\n                                                          yDiff : (eleOffset.top + (eleOffset.height/2)) - (modalElePosition.top + (modalElePosition.height/2)) };\n                            transform = \"translateX( \"+ originElementPos.xDiff + \"px) translateY( \"+ originElementPos.yDiff + \"px) scale(0)\"\n                        }\n                    }\n                },this);\n                /*------------------------------ MEASURE ENDS --------------------------*/\n                /*------------------------------ MUTATE STARTS --------------------------*/\n                $L.fastdom.mutate(function(){\n                    if(this.getData('ltPropTransition').animation == \"slideFromTop\"){\n                        // modalEle.style.transform = \"translateY(-100%)\";\n                        transformVal = -(Math.ceil(modalElemOffset.height) + parseInt(modalEle.style.top) + 10) + \"px\";\n                        modalEle.style.transform = \"translateY(\"+transformVal+\")\";\n                    }\n                    else if(this.getData('ltPropTransition').animation == \"slideFromBottom\"){\n                        // modalEle.style.transform = \"translateY(100%)\";\n                        transformVal = (h - parseInt(modalEle.style.top) + 10) + \"px\";\n                        modalEle.style.transform = \"translateY(\"+transformVal+\")\";\n                    }\n                    else if(this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                        // modalEle.style.transform = \"translateX(-100%)\";\n                        transformVal = -(Math.ceil(modalElemOffset.width) + parseInt(modalEle.style.left) + 10) + \"px\";\n                        modalEle.style.transform = \"translateX(\"+transformVal+\")\";\n                    }\n                    else if(this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                        // modalEle.style.transform = \"translateX(100%)\";\n                        transformVal = (((this.renderProps && this.renderProps.left) || w ) - parseInt(modalEle.style.left) + 10) + \"px\";\n                        modalEle.style.transform = \"translateX(\"+transformVal+\")\";\n                    }\n                    else if(this.getData('ltPropTransition').animation == \"fadeIn\"){\n                        modalEle.style.opacity = 0;\n                    }\n                    else if(this.getData('ltPropTransition').animation == \"zoom\"){\n                        modalEle.style.transform = transform;\n                    }\n                    delete this.transform;\n                    if(!(this.$node.classList.contains('lyteModalOpened'))){\n                        modalEle.style.transform = \"\";\n                    }\n                },this);\n                $L.fastdom.mutate(function(){\n                    modalEle = null;\n                });\n                /*------------------------------ MUTATE ENDS --------------------------*/\n\n                modalEle.classList.remove('lyteModalFromTop','lyteModalFromBottom','lyteModalFromLeft','lyteModalFromRight','lyteModalFadeIn','lyteZoom');\n                if(this.$node.ltProp('freeze') && this.childComp.querySelector(\"lyte-modal-freeze\")){\n                    var freezeLayer = this.childComp.querySelector(\"lyte-modal-freeze\");\n                    setTimeout(function(){\n                        freezeLayer.style.opacity = 0;\n                        freezeLayer.style.visibility = \"\";\n                    }.bind(this), 300);\n                }\n                window.LytePopup.closePopup(this);\n                // LytePopup.bindTransitionEnd(this.actualModalDiv);\n                this.setData(\"first\",true);\n                this.setData('initializedPosition',false);\n                this.setData('calculateHW', false);\n            }\n            this.$node.alignModal = null;\n            this.$node.resetPosition = null;\n            this.$node.alignLyteModal = null;\n            this.$node.calculateOffset = null;\n            this.$node.reflectTransitionChange = null;\n        }\n        else{\n            this.setData('returnedFalse',true);\n            this.$node.ltProp('show',true);\n        }\n    }\n\n    onBeforeShowHandling() {\n        var result = true;\n        if(this.getMethods(\"onBeforeShow\")){\n            result = this.executeMethod(\"onBeforeShow\",this) ;\n        }\n        // if(!_lyteUiUtils.modalCreationOrder){\n        //   _lyteUiUtils.modalCreationOrder = 0\n        // }\n        // _lyteUiUtils.modalCreationOrder += 1\n        // this.setData('modalCreationOrder' , _lyteUiUtils.modalCreationOrder-1);\n        if(result === undefined || result){\n            this.setData('checkAria', this.getData('checkAria')+1);\n            this.addDragHandler();\n            this.updateScrollHandling();\n\n            var modalEle = this.actualModalDiv;\n            var val = \"\";\n            modalEle.style.transitionDuration = this.$node.ltProp(\"transition\").duration+\"s\";\n            var classVal = \"lyteModalFrom\";\n            var modalStyle = this.actualModalDiv.style;\n            var modalElemOffset = this.actualModalDiv.getBoundingClientRect();\n            var windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\n            switch(this.$node.ltProp(\"transition\").animation){\n                case \"slideFromTop\":\n                    classVal += \"Top\";\n                    break;\n                case \"slideFromBottom\":\n                    classVal += \"Bottom\";\n                    break;\n                case \"slideFromLeft\":\n                    classVal += \"Left\";\n                    break;\n                case \"slideFromRight\":\n                    classVal += \"Right\";\n                    break;\n                case \"fadeIn\":\n                    classVal = \"lyteModalFadeIn\";\n                    break;\n                case \"zoom\":\n                    classVal = \"lyteZoom\";\n                    break;\n            }\n            /*------------------------------ MUTATE STARTS --------------------------*/\n            this.fastdomfn1 = $L.fastdom.mutate(function(){\n                delete this.fastdomfn1;\n                this.actualModalDiv.classList.add(classVal);\n                this.actualModalDiv.style.opacity = \"\";\n                modalEle = null;\n            },this);\n            /*------------------------------ MUTATE ENDS --------------------------*/\n            window.LytePopup.addPopup(this);\n            this.calculateForSidewiseRender();\n            if(this.$node.ltProp('freeze')){\n                var freezeLayer = this.childComp.querySelector(\"lyte-modal-freeze\");\n                if(this.renderSidewise){\n                    if(this.getData('ltPropTransition').animation == 'slideFromRight'){\n                        freezeLayer.style.right = (windowWidth - this.renderProps.left) + \"px\";\n                    }\n                    if(this.getData('ltPropTransition').animation == 'slideFromLeft'){\n                        freezeLayer.style.left = this.renderProps.right + \"px\";\n                    }\n\n                }\n                var freezeStyle = freezeLayer.style;\n                // freezeStyle.opacity = this.getData('ltPropDimmer').opacity;\n                if(this.getData('ltPropDimmer') && this.getData('ltPropDimmer').color){\n                    freezeStyle.background = this.getData('ltPropDimmer').color;\n                }\n                if(!this.addedFreezeDetails){\n                    freezeStyle.opacity = this.getData('ltPropDimmer') && this.getData('ltPropDimmer').opacity ? this.getData('ltPropDimmer').opacity : \"\";\n                }\n            }\n            this.$node.alignModal = this.computeOffsetImpl.bind(this, 0, true)\n            this.$node.resetPosition = function(){\n              window.LytePopup.x = this.getData('beforeDragPosition').xPos\n              LytePopup.y = this.getData('beforeDragPosition').yPos\n              LytePopup.xPos = this.getData('beforeDragPosition').xPos\n              LytePopup.yPos = this.getData('beforeDragPosition').yPos\n              this.component.transform.x = this.getData('beforeDragPosition').xPos\n              this.component.transform.y = this.getData('beforeDragPosition').yPos\n              if(this.getData('ltPropTransition').animation === \"zoom\"){\n                this.component.actualModalDiv.style.transform = \"translate(\"+this.getData('beforeDragPosition').xPos+\"px ,\"+this.getData('beforeDragPosition').yPos+\"px) scale(\"+this.getData('beforeDragPosition').scale+\")\"\n              } else {\n                this.component.actualModalDiv.style.transform = \"translate(\"+this.getData('beforeDragPosition').xPos+\"px ,\"+this.getData('beforeDragPosition').yPos+\"px)\"\n              }\n            }\n            this.$node.alignLyteModal = function(){\n              this.component.updateScrollHandling()\n              this.component.computeOffsetImpl.bind(this.component, 0, true)\n            }\n            this.$node.calculateOffset = this.updateScrollHandling.bind(this);\n            this.$node.reflectTransitionChange = this.reflectTransitionChange.bind(this);\n        }\n        else{\n            this.setData('returnedFalse',true);\n            this.$node.ltProp({\"showCopy\":false,\"show\":false});\n        }\n    }\n\n    /**\n     * The method is going to change the transition property when the modal is opened with different animation and closed with different animation\n     * This util function is required to be triggered by the developer after they change the ltPropTransition value\n     * The function can be triggered in onShow inside a setTimeout of 500ms or before the ltPropShow of the modal is set to false\n     *\n     */\n    reflectTransitionChange() {\n        this.computeOffsetImpl(null, true);\n    }\n\n    didDestroy() {\n        //   _lyteUiUtils.modalCreationOrder -= 1;\n        this.setData('ltPropShowWormhole', false);\n        this.$node.classList.remove('lyteModalOpened');\n        if(this.timeOutId){\n            clearTimeout(this.timeOutId);\n            delete this.timeOutId;\n        }\n        if(this.beforeCloseId){\n            clearTimeout(this.beforeCloseId);\n            delete this.beforeCloseId;\n        }\n        if(this.renderSidewise){\n            delete this.renderSidewise;\n            delete this.renderProps;\n        }\n        if(this.childComp){\n            this.clearFastdomBatch();\n            if(this.getData('ltPropFreeze') && this.addedFreezeDetails){\n                window.LytePopup.hideOrShowFreeze(\"close\",this);\n                delete this.addedFreezeDetails;\n            }\n            window.LytePopup.closePopup(this);\n            this.childComp.remove();\n            delete this.actualModalDiv;\n            delete this.childComp;\n            // if(this.$node.ltProp('freeze')){\n            //     LytePopup.bodywrapperCount -= 1;\n            //     if(LytePopup.bodywrapperCount == 0 || LytePopup.components.length == 0){\n            //         document.body.classList.remove('bodyWrapper');\n            //     }\n            // }\n            window.LytePopup.checkAndRemoveWrapper();\n        }\n        // LytePopup.components = [];\n    }\n\n    static actions() {\n        return {\n            close : function(){\n               this.$node.ltProp(\"show\",false);\n            }\n        };\n    }\n\n    static methods() {\n        return {\n            beforeWormholeAppend : function(arg){\n                if(this.childComp){\n                    delete this.childComp;\n                }\n                if(this.actualModalDiv){\n                    delete this.actualModalDiv;\n                }\n                this.childComp = arg;\n                this.actualModalDiv = this.childComp.querySelector(\".lyteModal\");\n            }\n        };\n    }\n\n    static observers() {\n        return {\n            showToggled : function(){\n\n                var event = event || window.event;\n                if(this.getData('returnedFalse')){\n                    this.setData('returnedFalse',false);\n                    return;\n                }\n                if(this.$node.ltProp(\"reRenderModal\")){\n                    if(this.$node.ltProp(\"show\")){\n                        this.$node.ltProp({\"showCopy\":false, \"show\":false});\n                        window.LytePopup.closePopup(this);\n                        this.setData(\"first\",true);\n                        this.setData('initializedPosition',false);\n                    }\n                    this.$node.ltProp(\"reRenderModal\",false);\n                }\n                if(this.timeOutId){\n                    delete this.timeOutId;\n                    this.closeModal();\n                    window.LytePopup.closePopup(this);\n                }\n                if(this.$node.ltProp(\"show\") && !this.$node.ltProp(\"showCopy\")){\n                    $L(this.childComp).removeClass('lyteModalHidden')\n                    if(window._lyteUiUtils.getRTL()){\n                      if(!this.getData('ltPropIgnoreInlineDirection')){\n                        if(this.getData('ltPropTransition').animation == \"slideFromLeft\"){\n                            this.getData('ltPropTransition').animation = \"slideFromRight\";\n                        }\n                        else if(this.getData('ltPropTransition').animation == \"slideFromRight\"){\n                            this.getData('ltPropTransition').animation = \"slideFromLeft\";\n                        }\n                        var offset = this.getData('ltPropOffset'),\n                            newOffset = {};\n                        for(window.key in offset){\n                            if(window.key == \"left\" && offset[window.key] != \"center\"){\n                                newOffset.right = offset[window.key];\n                            }\n                            else if(window.key == \"right\"){\n                                newOffset.left = offset[window.key];\n                            }\n                            else{\n                                newOffset[window.key] = offset[window.key];\n                            }\n                        }\n                        this.setData('ltPropOffset',newOffset);\n                      }\n                    }\n                    if(window.LytePopup.components.indexOf(this) != -1){\n                        window.LytePopup.closePopup(this);\n                        this.setData(\"first\",true);\n                        this.setData('initializedPosition',false);\n                    }\n                    this.$node.ltProp(\"bindToBody\",true);\n                    window._lyteUiUtils.dispatchEvent('lyteModalBeforeOpen' , this.actualModalDiv)\n                    this.setData('ltPropShowWormhole' , true)\n\n                    if(this.getData('ltPropPadding') !== ''){\n                        var modalYield = $L(this.childComp).find('.lyteModalYield').eq(0)\n                        modalYield.addClass('lyteModalYieldWithPadding')\n                        modalYield[0].style.padding = this.getData('ltPropPadding')\n                    }\n\n                    var self = this;\n                    this.beforeShowId = setTimeout(function(){\n                        delete self.beforeShowId;\n                        self.onBeforeShowHandling();\n                    },0);\n\n                }\n                else{\n                    this.setData('ltPropShowWormhole' , false)\n                    if(this.transitionEndTimeout){\n                        clearTimeout(this.transitionEndTimeout);\n                        delete this.transitionEndTimeout;\n                    }\n                    this.clearFastdomBatch();\n                    if(this.$node.ltProp(\"showCopy\")){\n                        var self = this;\n                        this.beforeCloseId = setTimeout(function(){\n                            delete self.beforeCloseId;\n                            self.onBeforeCloseHandling(event);\n                        },0);\n                    }\n                    else{\n                        if(window.LytePopup.components.indexOf(this) != -1){\n                            window.LytePopup.closePopup(this);\n                            this.setData(\"first\",true);\n                            this.setData('initializedPosition',false);\n                        }\n                    }\n                }\n            }.observes(\"ltPropShow\",\"ltPropReRenderModal\").on('didConnect'),\n\n            triggerDraggable : function(){\n              this.addDragHandler();\n            }.observes(\"ltPropDraggable\"),\n\n            changeBindToBody : function(){\n                if(!this.getData('ltPropBindToBody')){\n                    if(this.getData('ltPropFreeze') && this.addedFreezeDetails){\n                        window.LytePopup.hideOrShowFreeze(\"close\",this,true);\n                        delete this.addedFreezeDetails;\n                    }\n                    window.LytePopup.closePopup(this);\n                    if(this.renderSidewise){\n                        delete this.renderSidewise;\n                        delete this.renderProps;\n                    }\n                    this.actualModalDiv = null;\n                    this.childComp = null;\n                    if(this.getData('ltPropShow') ){\n                        this.setData({'ltPropShowCopy':false,'ltPropShow':false});\n                    }\n                    else if(this.getData('ltPropShowCopy')){\n                        this.setData('ltPropShowCopy', false);\n                    }\n                    this.setData(\"first\",true);\n                    this.setData('initializedPosition',false);\n                    this.$node.classList.remove('lyteModalOpened');\n                    // if(this.$node.ltProp('freeze')){\n                    //     LytePopup.bodywrapperCount -= 1;\n                    //     if(LytePopup.bodywrapperCount == 0){\n                    //         document.body.classList.remove('bodyWrapper');\n                    //     }\n                    // }\n                    window.LytePopup.checkAndRemoveWrapper();\n                }\n            }.observes(\"ltPropBindToBody\"),\n\n            addAriaValues : function( arg ) {\n                if(this.getData('ltPropAria')){\n                    var ariaProp = this.getData('ltPropAriaAttributes') || {};\n                    $L(this.actualModalDiv).attr('aria-modal' , true)\n                    $L(this.actualModalDiv).attr('aria-expanded' , this.getData('ltPropShow'))\n                    window._lyteUiUtils.setAttribute( this.actualModalDiv, ariaProp, arg ? arg.oldValue : {} );\n                    var closeIcon = this.actualModalDiv.querySelector('.lyteModalClose');\n                    if(closeIcon){\n                        closeIcon.setAttribute('aria-label', ariaProp['close-label'] || 'Close icon at top right position');\n                    }\n                }\n            }.observes('ltPropAriaAttributes','ltPropAriaAttributes.{}','checkAria'),\n\n            scrollHandling : function(){\n                if(!this.getData('ltPropShow')){\n                    return;\n                }\n                this.updateScrollHandling();\n            }.observes(\"ltPropWidth\",\"ltPropMaxWidth\",\"ltPropHeight\",\"ltPropMaxHeight\")\n        };\n    }\n}\n\nif (document.readyState === \"complete\" || document.readyState === \"interactive\"){\n    window.addModalEvent();\n}\nelse{\n    document.addEventListener(\"DOMContentLoaded\", function(event){\n        window.addModalEvent(event);\n    });\n}\n\nif (typeof Object.assign != 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: window.assign = function(target, varArgs) { // .length of function is 2\n      'use strict';\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * @syntax yielded\n * <lyte-modal>\n *     <template is = \"registerYield\" yield-name = \"modal\">\n *         <lyte-modal-header> Create Profile </lyte-modal-header>\n *         <lyte-modal-content>\n *             //Some Content\n *         </lyte-modal-content>\n *         <lyte-modal-footer class = \"right\">\n *             //Some button\n *         </lyte-modal-footer>\n *     </template>\n * </lyte-modal>\n */\nexport { LyteModalComponent };\n"],"names":[],"sourceRoot":""}