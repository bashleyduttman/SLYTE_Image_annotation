@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss";

@forward "../default/variables/dropdown.variables.scss";

@use "../default/variables/dropdown.variables.scss" as *;

lyte-dropdown,
lyte-drop-box {
	font-family: $primaryFont;
	font-size: map.get($lyteDropdownAndDropBoxMap, "font-size");
	color: map.get($lyteDropdownAndDropBoxMap, "color");
	display: inline-block;
	max-width: map.get($lyteDropdownAndDropBoxMap, "max-width");
	@include addExtraStyles($lyteDropdownAndDropBoxMap);
}
lyte-dropdown {
    max-width: map.get($lyteDropdownMap, "max-width");
	@include addExtraStyles($lyteDropdownMap);
}
lyte-drop-button {
	border: map.get($lyteDropdownBtnMap, "border");
	border-radius: map.get($lyteDropdownBtnMap, "border-radius");
	cursor: pointer;
	text-align: $value-textalign-left;
	position: relative;
	display: inline-block;
	padding: map.get($lyteDropdownBtnMap, "padding");
	width: 100%;
	box-sizing: border-box;
	color: map.get($lyteDropdownBtnMap, "color");
	background: map.get($lyteDropdownBtnMap, "background");
	@include addExtraStyles($lyteDropdownBtnMap);
}
lyte-dropdown lyte-drop-button:hover {
	border: map.get($lyteDropdownBtnHoverMap, "border");
	@include addExtraStyles($lyteDropdownBtnHoverMap);
}
lyte-drop-button.lyteDropButtonUp {
    border-radius: map.get($lyteDropBoxOnUpsideMap, "border-radius");
    box-shadow: map.get($lyteDropBoxOnUpsideMap, "box-shadow");
	@include addExtraStyles($lyteDropBoxOnUpsideMap);
}
lyte-drop-button.lyteDropButtonDown {
    border-radius: map.get($lyteDropBoxOnDownsideMap, "border-radius");
    box-shadow: map.get($lyteDropBoxOnDownsideMap, "box-shadow");
	@include addExtraStyles($lyteDropBoxOnDownsideMap);
}
.lyteMultiSearchDropButtonFocused:hover,
.lyteMultiSearchDropButtonFocused,
lyte-dropdown .lyteDummyEventContainer:focus lyte-drop-button,
lyte-dropdown .lyteDummyEventContainer:focus lyte-drop-button:hover {
    border: map.get($lyteDropButtonFocusedMap, "border");
    box-shadow: map.get($lyteDropButtonFocusedMap, "box-shadow");
	@include addExtraStyles($lyteDropButtonFocusedMap);
}
lyte-drop-button.lyteDropButtonUp:hover,
lyte-drop-button.lyteDropButtonDown:hover {
	border: map.get($lyteDropdownBtnMap, "border");
	@include addExtraStyles($lyteDropdownBtnMap);
}

lyte-dropdown.calloutDrop lyte-drop-button {
    box-shadow: none;
    border-radius: map.get($lyteDropdownCalloutDropbuttonMap, "border-radius");
	@include addExtraStyles($lyteDropdownCalloutDropbuttonMap);
}

.lyteDropPlaceholderNormal,
.lyteDropdownLabel {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	display: block;
}
.lyteDummyEventContainer {
	outline: none;
}
lyte-drop-item {
	position: relative;
	cursor: pointer;
	display: block;
	text-align: $value-textalign-left;
	color: map.get($lyteDropBoxItemMap, "color");
	padding: map.get($lyteDropBoxItemMap, "padding");
	font-size: map.get($lyteDropBoxItemMap, "font-size");
    max-width: 100%;
    -ms-word-wrap: break-word;
    overflow-wrap: break-word;
	@include addExtraStyles($lyteDropBoxItemMap);
}
lyte-drop-item.lyteDropdownActive,
lyte-drop-item.lyteSearchHidden {
	display: none;
}
.lyteDropdownSelection {
	background: map.get($lyteDropBoxItemSelectionMap, "background");
	@include addExtraStyles($lyteDropBoxItemSelectionMap);
}
lyte-drop-item[selected="true"]::before {
	content: '';
	@if $useCssMaskForBg {
		mask-image: map.get($lyteDropBoxItemSelectionTickMap, "mask-image");
		mask-position: map.get($lyteDropBoxItemSelectionTickMap, "mask-position");
		background-color: map.get($lyteDropBoxItemSelectionTickMap, "background-color");
	} @else {
		background-image: map.get($lyteDropBoxItemSelectionTickMap, "background-image");
		background-position: map.get($lyteDropBoxItemSelectionTickMap, "background-position");
	}
	width: map.get($lyteDropBoxItemSelectionTickMap, "width");
	height: map.get($lyteDropBoxItemSelectionTickMap, "height");
	position: absolute;
    #{$property-left}: map.get($lyteDropBoxItemSelectionTickMap, "left");
	top: map.get($lyteDropBoxItemSelectionTickMap, "top");
	@include addExtraStyles($lyteDropBoxItemSelectionTickMap);
}
lyte-dropdown lyte-icon.dropdown {
	@if $useCssMaskForBg {
		mask-image: map.get($lyteDropdownIconArrowMap, "mask-image");
		mask-position: map.get($lyteDropdownIconArrowMap, "mask-position");
        background-color: map.get($lyteDropdownIconArrowMap, "background-color");
	} @else {
		background-image: map.get($lyteDropdownIconArrowMap, "background-image");
		background-position: map.get($lyteDropdownIconArrowMap, "background-position");
	}
	width: map.get($lyteDropdownIconArrowMap, "width");
	height: map.get($lyteDropdownIconArrowMap, "height");
	top: map.get($lyteDropdownIconArrowMap, "top");
	display: inline-block;
	opacity: map.get($lyteDropdownIconArrowMap, "opacity");
	position: absolute;
	#{$property-right}: map.get($lyteDropdownIconArrowMap, "right");
	@include addExtraStyles($lyteDropdownIconArrowMap);
}
/*  Multi select releated CSS--BEGINS   */
@if $isLyteDropdownMultiselectEnabled {
	lyte-dropdown[lt-prop-type="multisearch"] lyte-drop-button,
	lyte-dropdown[lt-prop-type="multiple"] lyte-drop-button {
		#{$property-padding-right}: map.get($lyteDropdownMultipleBtnMap, "padding-right");
		min-height: map.get($lyteDropdownMultipleBtnMap, "min-height");
		white-space: normal;
		@include addExtraStyles($lyteDropdownMultipleBtnMap);
	}
	lyte-dropdown[lt-prop-type="multisearch"] lyte-drop-button::after,
	lyte-dropdown[lt-prop-type="multiple"] lyte-drop-button::after {
		content: '';
		@if $useCssMaskForBg {
			mask-image: map.get($lyteDropdownMultipleArrowMap, "mask-image");
			mask-position: map.get($lyteDropdownMultipleArrowMap, "mask-position");
			background-color: map.get($lyteDropdownMultipleArrowMap, "background-color");
		} @else {
			background-image: map.get($lyteDropdownMultipleArrowMap, "background-image");
			background-position: map.get($lyteDropdownMultipleArrowMap, "background-position");
		}
		width: map.get($lyteDropdownMultipleArrowMap, "width");
		height: map.get($lyteDropdownMultipleArrowMap, "height");
		display: inline-block;
		position: absolute;
		#{$property-right}: map.get($lyteDropdownMultipleArrowMap, "right");
		top: map.get($lyteDropdownMultipleArrowMap, "top");
		opacity: map.get($lyteDropdownMultipleArrowMap, "opacity");
		@include addExtraStyles($lyteDropdownMultipleArrowMap);
	}
	lyte-dropdown lyte-drop-button.ltDropdownIconNodePresent::after {
		content: none;
	}
	.lyteMultipleSelect li {
		background: map.get($lyteDropdownMultipleSelectLiMap, "background");
		color: map.get($lyteDropdownMultipleSelectLiMap, "color");
		border: map.get($lyteDropdownMultipleSelectLiMap, "border");
		margin: map.get($lyteDropdownMultipleSelectLiMap, "margin");
		border-radius: map.get($lyteDropdownMultipleSelectLiMap, "border-radius");
		font-size: map.get($lyteDropdownMultipleSelectLiMap, "font-size");
		padding: map.get($lyteDropdownMultipleSelectLiMap, "padding");
		display: inline-block;
		position: relative;
		cursor: default;
		max-width: 100%;
		box-sizing: border-box;
		@include addExtraStyles($lyteDropdownMultipleSelectLiMap);
	}
	.lyteMultipleSelect .lyteDropdownVisible {
		display: block;
		max-width: 100%;
		-ms-word-wrap: break-word;
		overflow-wrap: break-word;
	}
	lyte-dropdown[lt-prop-remove-multiple="true"] .lyteMultipleSelect li {
		cursor: pointer;
	}
	lyte-dropdown[lt-prop-type="multisearch"] .lyteMultipleSelect li.lyteMultiselectInput {
		background: map.get($lyteDropdownMultipleSelectInputLiMap, "background");
		border: map.get($lyteDropdownMultipleSelectInputLiMap, "border");
		padding: map.get($lyteDropdownMultipleSelectInputLiMap, "padding");
		margin: map.get($lyteDropdownMultipleSelectInputLiMap, "margin");
		width: map.get($lyteDropdownMultipleSelectInputLiMap, "width");
		@include addExtraStyles($lyteDropdownMultipleSelectInputLiMap);
	}
	lyte-dropdown[lt-prop-type="multisearch"] .lyteMultipleSelect .lyteMultiselectInput:only-of-type {
		width: map.get($lyteDropdownMultipleSelectInputLiOnlyOfTypeMap, "width");
		@include addExtraStyles($lyteDropdownMultipleSelectInputLiOnlyOfTypeMap);
	}
	.lyteDropPlaceholderMultiple {
		#{$property-padding-left}: map.get($lyteDropdownPlaceholderMultipleMap, "padding-left");
		font-size: map.get($lyteDropdownPlaceholderMultipleMap, "font-size");
		color: map.get($lyteDropdownPlaceholderMultipleMap, "color");
		vertical-align: top;
		@include addExtraStyles($lyteDropdownPlaceholderMultipleMap);
	}
	.lyteMultipleSelect .lyteCloseIcon {
		position: absolute;
		cursor: pointer;
		top: map.get($lyteDropdownMultiSelectCloseContainerMap, "top");
		bottom: map.get($lyteDropdownMultiSelectCloseContainerMap, "bottom");
		#{$property-right}: map.get($lyteDropdownMultiSelectCloseContainerMap, "right");
		height: map.get($lyteDropdownMultiSelectCloseContainerMap, "height");
		width: map.get($lyteDropdownMultiSelectCloseContainerMap, "width");
		border-radius: map.get($lyteDropdownMultiSelectCloseContainerMap, "border-radius");
		@include addExtraStyles($lyteDropdownMultiSelectCloseContainerMap);
	}
	.lyteMultipleSelect li:hover .lyteCloseIcon {
		background: map.get($lyteDropdownMultiSelectLiHoverCloseIconMap, "background");
		@include addExtraStyles($lyteDropdownMultiSelectLiHoverCloseIconMap);
	}
	.lyteMultipleSelect .lyteCloseIcon::before {
		content: '';
		@if $useCssMaskForBg {
			mask-image: map.get($lyteDropdownMultiSelectCloseIconMap, "mask-image");
			mask-position: map.get($lyteDropdownMultiSelectCloseIconMap, "mask-position");
			background-color: map.get($lyteDropdownMultiSelectCloseIconMap, "background-color");
		} @else {
			background-image: map.get($lyteDropdownMultiSelectCloseIconMap, "background-image");
			background-position: map.get($lyteDropdownMultiSelectCloseIconMap, "background-position");
		}
		width: map.get($lyteDropdownMultiSelectCloseIconMap, "width");
		height: map.get($lyteDropdownMultiSelectCloseIconMap, "height");
		top: map.get($lyteDropdownMultiSelectCloseIconMap, "top");
		#{$property-right}: map.get($lyteDropdownMultiSelectCloseIconMap, "right");
		opacity: map.get($lyteDropdownMultiSelectCloseIconMap, "opacity");
		display: inline-block;
		position: absolute;
		cursor: pointer;
		@include addExtraStyles($lyteDropdownMultiSelectCloseIconMap);
	}
	.lyteMultipleSelect .lyteCloseIcon:hover::before {
		opacity: map.get($lyteDropdownMultiSelectCloseIconHoverMap, "opacity");
		@include addExtraStyles($lyteDropdownMultiSelectCloseIconHoverMap);
	}
	.lyteDropdownNoResult {
		padding: map.get($lyteDropdownNoResultMap, "padding");
		text-align: center;
		font-size: map.get($lyteDropdownNoResultMap, "font-size");
		color: map.get($lyteDropdownNoResultMap, "color");
		@include addExtraStyles($lyteDropdownNoResultMap);
	}
	lyte-drop-button input {
		width: map.get($lyteDropdownButtonMap, "width");
		border: none;
		background: transparent;
		font-size: map.get($lyteDropdownButtonMap, "font-size");
		color: map.get($lyteDropdownButtonMap, "color");
		padding: map.get($lyteDropdownButtonMap, "padding");
		box-sizing: border-box;
		@include addExtraStyles($lyteDropdownButtonMap);
	}
	lyte-drop-button input:focus {
		outline: none;
	}
	.lyte-dropdown-filtered {
		display: none !important;
	}
	.lyteMultiSelectDropdown lyte-drop-item {
		padding: map.get($lyteDropBoxMultiSelectItemMap, "padding");
		@include addExtraStyles($lyteDropBoxMultiSelectItemMap);
	}
}
/*  Multi select releated CSS--ENDS   */
/*lyte-list-box dropbox related css--BEGINS     */
lyte-drop-box {
	background: map.get($lyteDropBoxElemMap, "background");
	box-sizing: border-box;
	border: map.get($lyteDropBoxElemMap, "border");
	box-shadow: map.get($lyteDropBoxElemMap, "box-shadow");
	z-index: map.get($lyteDropBoxElemMap, "z-index");
	position: absolute;
	border-radius: map.get($lyteDropBoxElemMap, "border-radius");
	display: block;
	width: auto;
	transform: map.get($lyteDropBoxElemMap, "transform");
	@include addExtraStyles($lyteDropBoxElemMap);
}

lyte-drop-box[lyte-hidden] { 
    visibility: hidden;
}

lyte-drop-box.lyteDropdownCurve {
    border-radius: map.get($lyteDropBoxCurveMap, "border-radius");
	@include addExtraStyles($lyteDropBoxCurveMap);
}
lyte-drop-box.lyteDropdownDown {
    transform: map.get($lyteDropBoxDownsideMap, "transform");
	@include addExtraStyles($lyteDropBoxDownsideMap);
}
lyte-drop-box.lyteDropdownUp {
    border-radius: map.get($lyteDropBoxUpsideMap, "border-radius");
    box-shadow: map.get($lyteDropBoxUpsideMap, "box-shadow");
    transform: map.get($lyteDropBoxUpsideMap, "transform");
	@include addExtraStyles($lyteDropBoxUpsideMap);
}
lyte-drop-box.lyteDropdownRight,
lyte-drop-box.lyteDropdownLeft {
    transform: none;
}
lyte-drop-box.lyteDropBodyCallout {
    border-radius: map.get($lyteDropBoxWithCalloutMap, "border-radius");
    box-shadow: map.get($lyteDropBoxWithCalloutMap, "box-shadow");
	@include addExtraStyles($lyteDropBoxWithCalloutMap);
}
lyte-drop-box:not(.lyteDropBodyCallout) .lyteArrow {
	background: map.get($lyteDropBoxWithoutCalloutArrowElemMap, "background");
	width: map.get($lyteDropBoxWithoutCalloutArrowElemMap, "width");
	height: map.get($lyteDropBoxWithoutCalloutArrowElemMap, "height");
	display: block;
	position: absolute;
	top: map.get($lyteDropBoxWithoutCalloutArrowElemMap, "top");
	#{$property-left}: map.get($lyteDropBoxWithoutCalloutArrowElemMap, "left");
	@include addExtraStyles($lyteDropBoxWithoutCalloutArrowElemMap);
}
.lyteDropdownUp:not(.lyteDropBodyCallout) .lyteArrow {
    top: map.get($lyteDropBoxWithoutCalloutArrowElemUpsideMap, "top");
    bottom: map.get($lyteDropBoxWithoutCalloutArrowElemUpsideMap, "bottom");
	@include addExtraStyles($lyteDropBoxWithoutCalloutArrowElemUpsideMap);
}
.lyteDropdownUp.lyteDropdownCurve {
    border-radius: map.get($lyteDropBoxUpsideCurveMap, "border-radius");
	@include addExtraStyles($lyteDropBoxUpsideCurveMap);
}

lyte-drop-box lyte-input.lyteInput .lyteSearch {
	#{$property-padding-left}: map.get($lyteDropBoxSearchInputMap, "padding-left");
	@include addExtraStyles($lyteDropBoxSearchInputMap);
}
lyte-drop-box.lyteDropdownUp lyte-input.lyteInput .lyteSearch {
	border-radius: map.get($lyteDropBoxUpsideSearchInputMap, "border-radius");
	@include addExtraStyles($lyteDropBoxUpsideSearchInputMap);
}
lyte-drop-box.lyteDropdownHidden {
	display: none;
    transform: translate(-1000px, -1000px);
}
lyte-drop-footer,
lyte-drop-header {
	display: block;
}
lyte-drop-footer {
	border-top: map.get($lyteDropBoxFooterMap, "border-top");
	text-align: center;
	@include addExtraStyles($lyteDropBoxFooterMap);
}
lyte-drop-body {
	padding: map.get($lyteDropBoxBodyMap, "padding");
	display: block;
	max-height: map.get($lyteDropBoxBodyMap, "max-height");
	overflow-y: auto;
	position: relative;
	@include addExtraStyles($lyteDropBoxBodyMap);
}
lyte-drop-header lyte-search .searchIcon {
	top: map.get($lyteDropBoxSearchIconMap, "top");
	#{$property-left}: map.get($lyteDropBoxSearchIconMap, "left");
	@include addExtraStyles($lyteDropBoxSearchIconMap);
}
// lyte-drop-box .lyteDropdownFooter {
// 	border-top: map.get($dropBoxFooter, "border-top");
// 	@include addExtraStyles($dropBoxFooter);
// }
// lyte-drop-box .lyteDropdownFooter .lyteDropdownAction {
// 	padding: map.get($lyteDropdownAction, "padding");
// 	font-size: map.get($lyteDropdownAction, "font-size");
// 	@include addExtraStyles($lyteDropdownAction);
// }
lyte-drop-label {
	display: block;
	height: auto;
	padding: map.get($lyteDropBoxLabelMap, "padding");
	text-align: $value-textalign-left;
	font-size: map.get($lyteDropBoxLabelMap, "font-size");
	font-family: $secondaryFont;
	overflow-wrap: break-word;
	@include addExtraStyles($lyteDropBoxLabelMap);
}
lyte-drop-label:first-child {
    padding-top: map.get($lyteDropBoxLabelFirstChildMap, "padding-top");
	@include addExtraStyles($lyteDropBoxLabelFirstChildMap);
}
/*lyte-list-box dropbox related css--ENDS     */
.lyteDropdownFiltered {
	display: none !important;
}
@if $isLyteDropdownFreezeEnabled {
	#lytedropdownfreezelayer {
		#{$property-left}: map.get($lyteDropdownFreezeLayerMap, "left");
		#{$property-right}: map.get($lyteDropdownFreezeLayerMap, "right");
		top: map.get($lyteDropdownFreezeLayerMap, "top");
		bottom: map.get($lyteDropdownFreezeLayerMap, "bottom");
		background: map.get($lyteDropdownFreezeLayerMap, "background");
		opacity: map.get($lyteDropdownFreezeLayerMap, "opacity");
		position: fixed;
		overflow: hidden;
		display: none;
		@include addExtraStyles($lyteDropdownFreezeLayerMap);
	}
}

.lyteDropdownZIndex {
	z-index: map.get($lyteDropdownZIndexMap, "z-index");
	@include addExtraStyles($lyteDropdownZIndexMap);
}
/*Dropdown element disabled option -- BEGINS*/
@if $isLyteDropdownDisabledEnabled {
	.lyteDropdown-disabled lyte-drop-button {
		background: map.get($lyteDropdownDisabledButtonMap, "background");
		color: map.get($lyteDropdownDisabledButtonMap, "color");
		cursor: not-allowed;
		@include addExtraStyles($lyteDropdownDisabledButtonMap);
	}
	.lyteDropdownDisabled lyte-drop-button:hover {
		border: map.get($lyteDropdownDisabledButtonHoverMap, "border");
		@include addExtraStyles($lyteDropdownDisabledButtonHoverMap);
	}
	.lyteDropdownDisabled .lyteDummyEventContainer:focus lyte-drop-button:hover,
	.lyteDropdownDisabled .lyteDummyEventContainer:focus lyte-drop-button {
		box-shadow: map.get($lyteDropdownDisabledDummyFocusedButtonMap, "box-shadow");
		border: map.get($lyteDropdownDisabledDummyFocusedButtonMap, "border");
		@include addExtraStyles($lyteDropdownDisabledDummyFocusedButtonMap);
	}
	.lyteDropdownDisabled .lyteMultipleSelect li {
		background: map.get($lyteDropdownDisabledMultipleSelectLiMap, "background");
		border: map.get($lyteDropdownDisabledMultipleSelectLiMap, "border");
		cursor: not-allowed;
		@include addExtraStyles($lyteDropdownDisabledMultipleSelectLiMap);
	}
	.lyteDropdownDisabled .lyteCloseIcon {
		pointer-events: none;
	}
	.lyteDropdownDisabled .lyteMultipleSelect li:hover .lyteCloseIcon {
		background: transparent;
	}
	lyte-dropdown .lyteDropdown-disabled lyte-icon.dropdown {
		opacity: map.get($lyteDropdownDisabledIconArrowMap, "opacity");
		@include addExtraStyles($lyteDropdownDisabledIconArrowMap);
	}
	/*  Dropdown item disabled CSS -- BEGINS    */
	lyte-drop-item.lyteDropdown-disabled {
		opacity: map.get($lyteDropBoxItemDisabledMap, "opacity");
		cursor: not-allowed;
		@include addExtraStyles($lyteDropBoxItemDisabledMap);
	}
	/*  Dropdown item disabled CSS -- ENDS    */
}
/*Dropdown element disabled option -- ENDS*/

.lyteDropPlaceholderNormal {    //lt-prop-placeholder
	#{$property-margin-right}: map.get($lyteDropdownPlaceholderNormalMap, "margin-right");
	color: map.get($lyteDropdownPlaceholderNormalMap, "color");
	@include addExtraStyles($lyteDropdownPlaceholderNormalMap);
}
.lyteMultipleSelect li.lyteDropMark {
	background: map.get($lyteDropdownMultiSelectDropMarkMap, "background");
    border: map.get($lyteDropdownMultiSelectDropMarkMap, "border");
	@include addExtraStyles($lyteDropdownMultiSelectDropMarkMap);
}
.lyteMultipleSelect li.lyteDropMark:hover .lyteCloseIcon {
    background: map.get($lyteDropdownMultiSelectDropMarkHoverCloseIconMap, "background");
	@include addExtraStyles($lyteDropdownMultiSelectDropMarkHoverCloseIconMap);
}
/*  Callout hook related CSS -- BEGINS    */
@if $isLyteDropdownCalloutEnabled {
	/*Dropdown with arrow */
	lyte-drop-box .lyteArrowIcon {
		width: 0;
		height: 0;
		border-bottom: map.get($lyteDropBoxWithCalloutArrowElemMap, "border-bottom");
		position: absolute;
		@include addExtraStyles($lyteDropBoxWithCalloutArrowElemMap);
	}
	lyte-drop-box .lyteArrowTop::after,
	lyte-drop-box .lyteArrowTop::before,
	lyte-drop-box .lyteArrowBottom::after,
	lyte-drop-box .lyteArrowBottom::before,
	lyte-drop-box .lyteArrowRight::after,
	lyte-drop-box .lyteArrowRight::before,
	lyte-drop-box .lyteArrowLeft::after,
	lyte-drop-box .lyteArrowLeft::before {
		content: "";
		height: 0;
		width: 0;
		position: absolute;
		pointer-events: none;
		border: map.get($lyteDropBoxWithCalloutArrowBeforeAfterMap, "border");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowBeforeAfterMap);
	}
	/*Arrow Top*/
	lyte-drop-box .lyteArrowTop {
		top: 0;
	}
	lyte-drop-box .lyteArrowTop::after,
	lyte-drop-box .lyteArrowTop::before {
		bottom: map.get($lyteDropBoxWithCalloutArrowTopBeforeAfterMap, "bottom");
		#{$property-left}: map.get($lyteDropBoxWithCalloutArrowTopBeforeAfterMap, "left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowTopBeforeAfterMap);
	}
	lyte-drop-box .lyteArrowTop::after {
		border-bottom-color: map.get($lyteDropBoxWithCalloutArrowTopAfterMap, "border-bottom-color");
		#{$property-margin-left}: map.get($lyteDropBoxWithCalloutArrowTopAfterMap, "margin-left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowTopAfterMap);
	}
	lyte-drop-box .lyteArrowTop::before {
		border-bottom-color: map.get($lyteDropBoxWithCalloutArrowTopBeforeMap, "border-bottom-color");
		border-width: map.get($lyteDropBoxWithCalloutArrowTopBeforeMap, "border-width");
		#{$property-margin-left}: map.get($lyteDropBoxWithCalloutArrowTopBeforeMap, "margin-left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowTopBeforeMap);
	}
	/*Arrow bottom*/
	lyte-drop-box .lyteArrowBottom {
		bottom: map.get($lyteDropBoxWithCalloutArrowBottomElemMap, "bottom");
		top: unset;
		@include addExtraStyles($lyteDropBoxWithCalloutArrowBottomElemMap);
	}
	lyte-drop-box .lyteArrowBottom::after,
	lyte-drop-box .lyteArrowBottom::before {
		top: map.get($lyteDropBoxWithCalloutArrowBottomBeforeAfterMap, "top");
		left: map.get($lyteDropBoxWithCalloutArrowBottomBeforeAfterMap, "left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowBottomBeforeAfterMap);
	}
	lyte-drop-box .lyteArrowBottom::after {
		border-top-color: map.get($lyteDropBoxWithCalloutArrowBottomAfterMap, "border-top-color");
		margin-left: map.get($lyteDropBoxWithCalloutArrowBottomAfterMap, "margin-left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowBottomAfterMap);
	}
	lyte-drop-box .lyteArrowBottom::before {
		border-top-color: map.get($lyteDropBoxWithCalloutArrowBottomBeforeMap, "border-top-color");
		border-width: map.get($lyteDropBoxWithCalloutArrowBottomBeforeMap, "border-width");
		margin-left: map.get($lyteDropBoxWithCalloutArrowBottomBeforeMap, "margin-left");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowBottomBeforeMap);
	}
	/*Arrow Right*/
	lyte-drop-box .lyteArrowRight {
		right: 0;
	}
	lyte-drop-box .lyteArrowRight::after,
	lyte-drop-box .lyteArrowRight::before {
		left: map.get($lyteDropBoxWithCalloutArrowRightBeforeAfterMap, "left");
		top: map.get($lyteDropBoxWithCalloutArrowRightBeforeAfterMap, "top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowRightBeforeAfterMap);
	}
	lyte-drop-box .lyteArrowRight::after {
		border-left-color: map.get($lyteDropBoxWithCalloutArrowRightAfterMap, "border-left-color");
		margin-top: map.get($lyteDropBoxWithCalloutArrowRightAfterMap, "margin-top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowRightAfterMap);
	}
	lyte-drop-box .lyteArrowRight::before {
		border-left-color: map.get($lyteDropBoxWithCalloutArrowRightBeforeMap, "border-left-color");
		border-width: map.get($lyteDropBoxWithCalloutArrowRightBeforeMap, "border-width");
		margin-top: map.get($lyteDropBoxWithCalloutArrowRightBeforeMap, "margin-top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowRightBeforeMap);
	}
	/*Arrow Left*/
	lyte-drop-box .lyteArrowLeft {
		left: 0;
	}
	lyte-drop-box .lyteArrowLeft::after,
	lyte-drop-box .lyteArrowLeft::before {
		right: map.get($lyteDropBoxWithCalloutArrowLeftBeforeAfterMap, "right");
		top: map.get($lyteDropBoxWithCalloutArrowLeftBeforeAfterMap, "top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowLeftBeforeAfterMap);
	}
	lyte-drop-box .lyteArrowLeft::after {
		border-right-color: map.get($lyteDropBoxWithCalloutArrowLeftAfterMap, "border-right-color");
		margin-top: map.get($lyteDropBoxWithCalloutArrowLeftAfterMap, "margin-top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowLeftAfterMap);
	}
	lyte-drop-box .lyteArrowLeft::before {
		border-right-color: map.get($lyteDropBoxWithCalloutArrowLeftBeforeMap, "border-right-color");
		border-width: map.get($lyteDropBoxWithCalloutArrowLeftBeforeMap, "border-width");
		margin-top: map.get($lyteDropBoxWithCalloutArrowLeftBeforeMap, "margin-top");
		@include addExtraStyles($lyteDropBoxWithCalloutArrowLeftBeforeMap);
	}
}

/*  Callout hook related CSS -- ENDS    */
@if $isLyteDropdownAnimateEnabled {
	lyte-drop-box.lyteAnimate {
		transition: top 0.4s ease;
	}
	lyte-drop-box.lyteDropBoxAnimate {
		transition-property: top, height;
		overflow: hidden;
	}
	lyte-drop-box.lyteAnimate lyte-drop-body {
		transition: height 0.4s ease;
		overflow: hidden;
	}
}

.lyteBodyWrapper {
    overflow: hidden;
}

.lyteDropdownFFScroll {
	overflow-y: scroll;
}

.lyteDropdownFFZeroScroll {
	overflow-y: hidden;
}

.lyteDropdownHideGroup {
	display: none;
}

@if $isLyteDropdownDeselectEnabled {
	.lyteDropdownWithDeselectIcon lyte-drop-button {
		#{$property-padding-right}: map.get($lyteDropdownWithDeselectIconDropButtonMap, "padding-right");
		@include addExtraStyles($lyteDropdownWithDeselectIconDropButtonMap);
	}
	.lyteDropdownDeselectIcon {
		width: map.get($lyteDropdownDeselectIconMap, "width");
		height: map.get($lyteDropdownDeselectIconMap, "height");
		position: absolute;
		#{$property-right}: map.get($lyteDropdownDeselectIconMap, "right");
		top: map.get($lyteDropdownDeselectIconMap, "top");
		transform: map.get($lyteDropdownDeselectIconMap, "transform");
		border-radius: map.get($lyteDropdownDeselectIconMap, "border-radius");
		display: flex;
		align-items: center;
		justify-content: center;
		box-sizing: border-box;
		@include addExtraStyles($lyteDropdownDeselectIconMap);
	}
	.lyteDropdownDeselectIcon:hover {
		background: map.get($lyteDropdownDeselectIconHoverMap, "background");
		@include addExtraStyles($lyteDropdownDeselectIconHoverMap);
	}
	.lyteDropdownDeselectIcon::after {
		content: '';
		background-image: map.get($lyteDropdownDeselectIconAfterMap, "background-image");
		background-position: map.get($lyteDropdownDeselectIconAfterMap, "background-position");
		width: map.get($lyteDropdownDeselectIconAfterMap, "width");
		height: map.get($lyteDropdownDeselectIconAfterMap, "height");
		display: inline-block;
		@include addExtraStyles($lyteDropdownDeselectIconAfterMap);
	}
}



@media only screen and (max-device-width: 650px) {
	lyte-drop-body {
		max-height: 70px;
	}
}