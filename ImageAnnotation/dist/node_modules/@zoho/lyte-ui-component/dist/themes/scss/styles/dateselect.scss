@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/dateselect.variables.scss";

@use "../default/variables/dateselect.variables.scss" as *;


lyte-dateselect lyte-dropdown {
	display: block;
}
.lyteCalendarSelected,
.lyteDateSelect lyte-item:hover {
	background: map.get($lyteDateSelectMap, "background");
    @include addExtraStyles($lyteDateSelectMap);
}
.lyteDateSelectHidden {
	display: none !important;
}
#lyteDateSelect lyte-drop-body {
	max-height: none;
	overflow: visible;
}
#lyteDateSelect lyte-drop-item {
    white-space: nowrap;
}
#lyteDateSelect lyte-drop-item[selected="true"] .dateArrow {
	position: absolute;
	width: map.get($lyteDateSelectArrowMap, "width");
	height: map.get($lyteDateSelectArrowMap, "height");
	transform: rotate(45deg);
	background: map.get($lyteDateSelectArrowMap, "background");
    #{$property-right}: map.get($lyteDateSelectArrowMap, "right");
	top: map.get($lyteDateSelectArrowMap, "top");
	z-index: -1;
	box-shadow: map.get($lyteDateSelectArrowMap, "box-shadow");
    @include addExtraStyles($lyteDateSelectArrowMap);
}
lyte-drop-item[selected="true"].lyteDateSelectTempSelection::before {
	content: none;
}
.lyteDateSelectPrevTempSelection::before {
	content: '';
    @if $useCssMaskForBg {
		mask-image: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "mask-image");
		mask-position: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "mask-position");
		background-color: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "background-color");
	} @else {
		background-image: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "background-image");
		background-position: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "background-position");
	}
	width: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "width");
	height: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "height");
	position: absolute;
	#{$property-left}: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "left");
	top: map.get($lyteDateSelectPrevTempSelectionBeforeMap, "top");
    @include addExtraStyles($lyteDateSelectPrevTempSelectionBeforeMap);
}
#lyteDateSelect lyte-drop-item[selected="true"] .dateArrow.arrowLeft {
    #{$property-left}: map.get($lyteDateSelectleftArrowMap, "left");
    box-shadow: map.get($lyteDateSelectleftArrowMap, "box-shadow");
    #{$property-right}: unset;
    @include addExtraStyles($lyteDateSelectleftArrowMap);
}
#lyteDateSelect lyte-drop-item[selected="true"] {
	overflow: visible;
}
.dateSelectcal {
    position: absolute;
    z-index: map.get($lyteDateSelectcalMap, "z-index");
    @include addExtraStyles($lyteDateSelectcalMap);
}

#lyteDateSelect,
.dateSelectcal .lyteDsBeforeCal,
.dateSelectcal .specificDate,
.dateSelectcal .customRange {
    opacity: map.get($lyteDateSelectBeforeAnimationMap, "opacity");
    transition: map.get($lyteDateSelectBeforeAnimationMap, "transition");
    transform-origin: top;
    @include addExtraStyles($lyteDateSelectBeforeAnimationMap);
}

#lyteDateSelect.lyteDateselectAnimate,
.dateSelectcal.lyteDateselectAnimate .specificDate,
.dateSelectcal.lyteDateselectAnimate .customRange {
    opacity: map.get($lyteDateSelectDuringAnimationMap, "opacity");
    @include addExtraStyles($lyteDateSelectDuringAnimationMap);
}
.dateSelectcal.lyteDateselectAnimate .specificDate,
.dateSelectcal.lyteDateselectAnimate .customRange,
.lyteDateselectAnimationHappening {
    overflow: hidden;
}

#lyteDateSelect.lyteDateselectUp,
.dateSelectcal.lyteDateselectUp .specificDate,
.dateSelectcal.lyteDateselectUp .customRange{
    transform-origin: bottom;
}

.dateSelectcal .lyteDsBeforeCal,
.dateSelectcal .specificDate,
.dateSelectcal .customRange {
	display: flex;
	flex-direction: column;
	box-shadow: map.get($lyteSpecificDateCustomRangeContMap, "box-shadow");
    border-radius: map.get($lyteSpecificDateCustomRangeContMap, "border-radius");
    @include addExtraStyles($lyteSpecificDateCustomRangeContMap);
}
.dateSelectcal .lyteDsBeforeCal.lyteDropdownHidden,
.dateSelectcal .specificDate.lyteDropdownHidden,
.dateSelectcal .customRange.lyteDropdownHidden {
	display: none;
}
.dateSelectcal .lyteDsBeforeCal lyte-calendar,
.dateSelectcal lyte-daterangepicker,
.dateSelectcal .specificDate lyte-calendar {
	border: map.get($lyteSpecificDateCalendarMap, "border");
    border-radius: map.get($lyteSpecificDateCalendarMap, "border-radius");
    @include addExtraStyles($lyteSpecificDateCalendarMap);
}
.dateSelectcal .lyteDateRangePickerRow,
.dateSelectcal .lyteCalendarPopup {
	border: 0;
	box-shadow: none;
    border-radius: map.get($lyteSpecificDateCalPopMap, "border-radius");
    @include addExtraStyles($lyteSpecificDateCalPopMap);
}
.dateSelectcal lyte-button {
	padding: map.get($lyteDateSelectcalDoneBtnMap, "padding");
    #{$property-margin-left}: auto;
    @include addExtraStyles($lyteDateSelectcalDoneBtnMap);
}
.dateSelectcal .lyteCalCurrentDate {
    display: none;
}
#lyteDateSelect lyte-drop-item {
    #{$property-padding-right}: map.get($lyteDateSelectDropitemMap, "padding-right");
    @include addExtraStyles($lyteDateSelectDropitemMap);
}
#lyteDateSelect lyte-drop-item.lyteDS_SecondaryOptItem::after {
    content: '';
    position: absolute;
    @if $useCssMaskForBg {
		mask-image: map.get($lyteDateSelectRightArrowMap, "mask-image");
		mask-position: map.get($lyteDateSelectRightArrowMap, "mask-position");
		background-color: map.get($lyteDateSelectRightArrowMap, "background-color");
	} @else {
		background-image: map.get($lyteDateSelectRightArrowMap, "background-image");
		background-position: map.get($lyteDateSelectRightArrowMap, "background-position");
	}
    width: map.get($lyteDateSelectRightArrowMap, "width");
    height: map.get($lyteDateSelectRightArrowMap, "height");
    transform: map.get($lyteDateSelectRightArrowMap, "transform");
    #{$property-right}: map.get($lyteDateSelectRightArrowMap, "right");
    top: map.get($lyteDateSelectRightArrowMap, "top");
    opacity: map.get($lyteDateSelectRightArrowMap, "opacity");
    @include addExtraStyles($lyteDateSelectRightArrowMap);
}