@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/checkbox.variables.scss";

@use "../default/variables/checkbox.variables.scss" as *;

lyte-checkbox {
	color: map.get($lyteCheckBoxMap, "color");
	font-family: $primaryFont;
	font-size: map.get($lyteCheckBoxMap, "font-size");
	display: inline-block;
    position: relative;
    @include addExtraStyles($lyteCheckBoxMap);
}
lyte-checkbox label {
    display: inline-block;
    cursor: pointer;
    -ms-user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    user-select: none;
}
lyte-checkbox input[type="checkbox"] {
	position: absolute;
    opacity: 0;
    z-index: -1;
}
@if $isLyteCheckboxTypeDefaultEnabled {
	.lyteCheckBoxDefault::before {
		content: '';
		background-image: map.get($lyteCheckBoxDefaultBeforeMap, "background-image");
		background-position: map.get($lyteCheckBoxDefaultBeforeMap, "bg-pos");
		width: map.get($lyteCheckBoxDefaultBeforeMap, "width");
		height: map.get($lyteCheckBoxDefaultBeforeMap, "height");
		display: inline-block;
		vertical-align: middle;
		#{$property-margin-right}: map.get($lyteCheckBoxDefaultBeforeMap, "margin-right");
		border-radius: map.get($lyteCheckBoxDefaultBeforeMap, "border-radius");
		@include addExtraStyles($lyteCheckBoxDefaultBeforeMap);
	}
	lyte-checkbox input[type="checkbox"]:active + .lyteCheckBoxDefault::before,
	.lyteCheckBoxDefault:hover::before {
		background-position: map.get($lyteCheckBoxDefaultHoverBeforeMap, "bg-pos");
		@include addExtraStyles($lyteCheckBoxDefaultHoverBeforeMap);
	}
	lyte-checkbox input[type="checkbox"]:focus + .lyteCheckBoxDefault::before {
		background-position: map.get($lyteCheckBoxDefaultFocusBeforeMap, "bg-pos");
		box-shadow: map.get($lyteCheckBoxDefaultFocusBeforeMap, "box-shadow");
		@include addExtraStyles($lyteCheckBoxDefaultFocusBeforeMap);
	}
	lyte-checkbox input[type="checkbox"]:disabled + .lyteCheckBoxDefault:hover::before {
		background-position: map.get($lyteDisabledCheckboxMap, "bg-pos");
		@include addExtraStyles($lyteDisabledCheckboxMap);
	}
	lyte-checkbox input[type="checkbox"]:checked:disabled + .lyteCheckBoxDefault:hover::before,
	lyte-checkbox input[type="checkbox"]:checked + .lyteCheckBoxDefault::before {
		background-position: map.get($lyteDisabledCheckedCheckboxMap, "bg-pos");
		@include addExtraStyles($lyteDisabledCheckedCheckboxMap);
	}
}
.lyteCheckDisabled label {
    cursor: not-allowed;
}
@if $isLyteCheckboxTypePrimaryEnabled {
	.lyteCheckBoxPrimary::before {
		content: '';
		background-image: map.get($lyteCheckBoxPrimaryBeforeMap, "background-image");
		background-position: map.get($lyteCheckBoxPrimaryBeforeMap, "bg-pos");
		width: map.get($lyteCheckBoxPrimaryBeforeMap, "width");
		height: map.get($lyteCheckBoxPrimaryBeforeMap, "height");
		margin-right: map.get($lyteCheckBoxPrimaryBeforeMap, "margin-right");
		display: inline-block;
		vertical-align: middle;
		border-radius: map.get($lyteCheckBoxPrimaryBeforeMap, "border-radius");
		@if ($direction == rtl) {
			margin-left: map.get($lyteCheckBoxPrimaryBeforeMap, "margin-left");
		}
		@include addExtraStyles($lyteCheckBoxPrimaryBeforeMap);
	}
	lyte-checkbox input[type="checkbox"]:checked + .lyteCheckBoxPrimary::before {
		background-position: map.get($lyteCheckBoxPrimaryCheckedBeforeMap, "bg-pos");
		width: map.get($lyteCheckBoxPrimaryCheckedBeforeMap, "width");
		margin-right: map.get($lyteCheckBoxPrimaryCheckedBeforeMap, "margin-right");
		@include addExtraStyles($lyteCheckBoxPrimaryCheckedBeforeMap);
	}
	lyte-checkbox input[type="checkbox"]:focus + .lyteCheckBoxPrimary::before {
		box-shadow: map.get($lyteCheckBoxPrimaryFocusBeforeMap, "box-shadow");
		@include addExtraStyles($lyteCheckBoxPrimaryFocusBeforeMap);
	}
}
.lyteCheckBoxPrimary span,
.lyteCheckBoxDefault span {
	display: inline-block;
	vertical-align: middle;
    -ms-user-select: auto;
    -moz-user-select: auto;
    -webkit-user-select: auto;
    user-select: auto;
}
lyte-checkbox:hover span {
    color: map.get($lyteCheckBoxTextHoverMap, "color");
    @include addExtraStyles($lyteCheckBoxTextHoverMap);
}
lyte-checkbox[lt-prop-disabled="true"]:hover span {
    color: map.get($lyteDisabledCheckBoxTextHoverMap, "color");
    @include addExtraStyles($lyteDisabledCheckBoxTextHoverMap);
}
@if $isLyteCheckboxTypeSwitchEnabled {
	.lyteCheckSwitch {
		vertical-align: middle;
		width: map.get($lyteCheckSwitchMap, "width");
		height: map.get($lyteCheckSwitchMap, "height");
		display: inline-block;
		border-radius: map.get($lyteCheckSwitchMap, "border-radius");
		position: relative;
		background: map.get($lyteCheckSwitchMap, "background");
		@include addExtraStyles($lyteCheckSwitchMap);
	}
	.lyteCheckSwitch .on-btn {
		width: map.get($lyteSwitchOnBtnMap, "width");
		height: map.get($lyteSwitchOnBtnMap, "height");
		background: map.get($lyteSwitchOnBtnMap, "background");
		display: inline-block;
		border-radius: map.get($lyteSwitchOnBtnMap, "border-radius");
		position: absolute;
		#{$property-left}: map.get($lyteSwitchOnBtnMap, "left");
		top: map.get($lyteSwitchOnBtnMap, "top");
		#{$property-right}: auto;
		transition: $value-transition-left 200ms ease;
		@include addExtraStyles($lyteSwitchOnBtnMap);
	}
	input[type="checkbox"].on-off-sw:checked + .lyteCheckSwitch {
		background: map.get($lyteCheckSwitchBgMap, "background");
		@include addExtraStyles($lyteCheckSwitchBgMap);
	}
	input[type="checkbox"].on-off-sw:focus + .lyteCheckSwitch {
		box-shadow: map.get($lyteCheckSwitchFocusMap, "box-shadow");
		@include addExtraStyles($lyteCheckSwitchFocusMap);
	}
	input[type="checkbox"].on-off-sw:checked:focus + .lyteCheckSwitch {
		box-shadow: map.get($lyteCheckSwitchCheckedFocusMap, "box-shadow");
		@include addExtraStyles($lyteCheckSwitchCheckedFocusMap);
	}
	input[type="checkbox"].on-off-sw:checked + .lyteCheckSwitch .on-btn {
		#{$property-left}: map.get($lyteCheckSwitchCircleMap, "left");
		@include addExtraStyles($lyteCheckSwitchCircleMap);
	}
	.lyteCheckSwitch + span {
		vertical-align: middle;
		display: inline-block;
		#{$property-margin-left}: map.get($lyteCheckSwitchLabelMap, "margin-left");
		@include addExtraStyles($lyteCheckSwitchLabelMap);
	}
}

@if $isLyteCheckboxTypeSliderEnabled {
	.lyteCheckSliderLabel {
		box-sizing: border-box;
		position: relative;
	}
	.lyteCheckSlider {
		position: relative;
		display: inline-flex;
		align-items: center;
		height: map.get($lyteCheckBoxSliderMap, "height");
		@include addExtraStyles($lyteCheckBoxSliderMap);
	}
	.lyteCheckSlider::before {
		content: '';
		display: inline-block;
		position: absolute;
		z-index: 1;
		width: map.get($lyteCheckBoxSliderCircleMap, "width");
		height: map.get($lyteCheckBoxSliderCircleMap, "height");
		background: map.get($lyteCheckBoxSliderCircleMap, "background");
		box-shadow: map.get($lyteCheckBoxSliderCircleMap, "box-shadow");
		border-radius: map.get($lyteCheckBoxSliderCircleMap, "border-radius");
		#{$property-left}: map.get($lyteCheckBoxSliderCircleMap, "left");
		transition: $value-transition-left 200ms ease;
		@include addExtraStyles($lyteCheckBoxSliderCircleMap);
	}
	input[type="checkbox"]:checked + .lyteCheckSlider::before {
		#{$property-left}: map.get($lyteCheckBoxSliderCheckedCircleMap, "left");
		@include addExtraStyles($lyteCheckBoxSliderCheckedCircleMap);
	}
	.lyteCheckSlider::after {
		content: '';
		cursor: pointer;
		display: inline-block;
		position: absolute;
		z-index: 0;
		width: map.get($lyteCheckBoxSliderBarMap, "width");
		height: map.get($lyteCheckBoxSliderBarMap, "height");
		background: map.get($lyteCheckBoxSliderBarMap, "background");
		top: map.get($lyteCheckBoxSliderBarMap, "top");
		#{$property-left}: map.get($lyteCheckBoxSliderBarMap, "left");
		@include addExtraStyles($lyteCheckBoxSliderBarMap);
	}
	input[type="checkbox"]:checked + .lyteCheckSlider::after {
		background: map.get($lyteCheckBoxSliderCheckedBarMap, "background");
		@include addExtraStyles($lyteCheckBoxSliderCheckedBarMap);
	}
	.lyteCheckSliderText {
		#{$property-padding-left}: map.get($lyteCheckBoxSliderTextMap, "padding-left");
		vertical-align: middle;
		@include addExtraStyles($lyteCheckBoxSliderTextMap);
	}
}
.lyteCheckDisabled .lyteCheckSlider::after,
.lyteCheckDisabled .lyteCheckSwitch,
.lyteCheckDisabled .lyteCheckBoxDefault::before,
.lyteCheckDisabled .lyteCheckBoxPrimary::before {
    opacity: map.get($lyteCheckBoxDisabledCommonMap, "opacity");
    cursor: not-allowed;
    @include addExtraStyles($lyteCheckBoxDisabledCommonMap);
}
.lyteCheckDisabled .lyteCheckSlider::before {
    background: map.get($lyteCheckBoxDisabledSliderBeforeMap, "background");
    @include addExtraStyles($lyteCheckBoxDisabledSliderBeforeMap);
}

@if $isLyteCheckboxLabelBiggerCaseEnabled {
	.lyteCkBoxLabelBiggerCase .lyteCheckbox,
	.lyteCkBoxLabelBiggerCase {
		max-width: 100%;
	}
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxDefault,
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxPrimary {
		display: flex;
		max-width: 100%;
	}
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxDefault::before,
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxPrimary::before {
		flex-shrink: 0;
		margin-top: 2px;
	}
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxDefault span,
	.lyteCkBoxLabelBiggerCase .lyteCheckBoxPrimary span {
		overflow: auto;
		overflow-wrap: break-word;
		white-space: normal;
		#{$property-margin-left}: 5px;
	}
}
@if $isLyteCheckboxLabelEllipsisEnabled {
	.lyteCheckboxLabelEllipsis .lyteCheckbox,
	.lyteCheckboxLabelEllipsis {
		max-width: 100%;
	}
	.lyteCheckboxLabelEllipsis .lyteCheckBoxDefault,
	.lyteCheckboxLabelEllipsis .lyteCheckBoxPrimary {
		display: flex;
		align-items: center;
	}
	.lyteCheckboxLabelEllipsis .lyteCheckBoxDefault::before,
	.lyteCheckboxLabelEllipsis .lyteCheckBoxPrimary::before {
		flex-shrink: 0;
	}
	.lyteCheckboxLabelEllipsis .lyteCheckBoxPrimary::before {
		margin-right: map.get($lyteCheckboxLabelEllipsisCheckBoxPrimaryBeforeMap, "margin-right");
		@include addExtraStyles($lyteCheckboxLabelEllipsisCheckBoxPrimaryBeforeMap);
	}
	lyte-checkbox.lyteCheckboxLabelEllipsis input[type="checkbox"]:checked + .lyteCheckBoxPrimary::before {
		margin-right: map.get($lyteCheckboxLabelEllipsisCheckBoxPrimaryCheckedBeforeMap, "margin-right");
		@include addExtraStyles($lyteCheckboxLabelEllipsisCheckBoxPrimaryCheckedBeforeMap);
	}
	.lyteCheckboxLabelEllipsis .lyteCheckBoxDefault span,
	.lyteCheckboxLabelEllipsis .lyteCheckBoxPrimary span {
		max-width: 100%;
		white-space: nowrap;
		text-overflow: ellipsis;
		overflow: hidden;
	}
}

@if $isLyteCheckboxTypeSwitchWithLabelEnabled {
	.lyteCheckSwitch.lyteCheckboxSwitchWithStateLabel {
		min-width: map.get($lyteCheckboxSwitchWithStateLabelMap, "min-width");
		min-height: map.get($lyteCheckboxSwitchWithStateLabelMap, "min-height");
		width: auto;
		height: auto;
		display: inline-grid;
		grid-auto-flow: row;
		padding: map.get($lyteCheckboxSwitchWithStateLabelMap, "padding");
		@include addExtraStyles($lyteCheckboxSwitchWithStateLabelMap);
	}
	input[type="checkbox"].on-off-sw:checked + .lyteCheckSwitch.lyteCheckboxSwitchWithStateLabel .on-btn {
		#{$property-left}: map.get($lyteCheckboxSwitchWithStateLabelCircleMap, "left");
		@include addExtraStyles($lyteCheckboxSwitchWithStateLabelCircleMap);
	}
	.lyteCheckboxStateLabel {
		font-size: map.get($lyteCheckboxStateLabelMap, "font-size");
		#{$property-padding-left}: map.get($lyteCheckboxStateLabelMap, "padding-left");
		#{$property-padding-right}: map.get($lyteCheckboxStateLabelMap, "padding-right");
		grid-row: 1;
		grid-column: 1;
		transition: map.get($lyteCheckboxStateLabelMap, "transition");
		@include addExtraStyles($lyteCheckboxStateLabelMap);
	}
	input[type="checkbox"].on-off-sw:checked + .lyteCheckboxSwitchWithStateLabel .lyteCheckboxStateLabel {
		#{$property-padding-right}: map.get($lyteCheckboxCheckedStateLabelMap, "padding-right");
		#{$property-padding-left}: map.get($lyteCheckboxCheckedStateLabelMap, "padding-left");
		color: map.get($lyteCheckboxCheckedStateLabelMap, "color");
		@include addExtraStyles($lyteCheckboxCheckedStateLabelMap);
	}
	
	.on-off-sw + .lyteCheckSwitch .lyteCheckboxOnStateLabel,
	.on-off-sw:checked + .lyteCheckSwitch .lyteCheckboxOffStateLabel {
		visibility: hidden;
		opacity: 0;
	}
	.on-off-sw:checked + .lyteCheckSwitch .lyteCheckboxOnStateLabel {
		visibility: visible;
		opacity: 1;
	}
}

