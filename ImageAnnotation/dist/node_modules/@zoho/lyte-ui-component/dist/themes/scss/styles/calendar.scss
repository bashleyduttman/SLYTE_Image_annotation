@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/calendar.variables.scss";

@use "../default/variables/calendar.variables.scss" as *;


/*  Calendar related CSS BEGINS     */

lyte-calendar {
    display: inline-block;
}
.lyteCalendarPopup {
    background: map.get($lyteCalendarPopupMap, "background");
    z-index: map.get($lyteCalendarPopupMap, "z-index");
    box-shadow: map.get($lyteCalendarPopupMap, "box-shadow");
    font-family: $primaryFont;
    font-size: map.get($lyteCalendarPopupMap, "font-size");
    display: inline-block;
    border: map.get($lyteCalendarPopupMap, "border");
    @include addExtraStyles($lyteCalendarPopupMap);
}
.lyteCalendarNavigator {
    padding: map.get($lyteCalendarNavigatorMap, "padding");
    display: flex;
    align-items: center;
    @include addExtraStyles($lyteCalendarNavigatorMap);
}
.lyteCalMonthDD {
    max-width: map.get($lyteCalMonthDDMap, "max-width");
    width: auto;
    @include addExtraStyles($lyteCalMonthDDMap);
}
.lyteCalYearDD {
    width: auto;
}
.lyteCalendarPopup lyte-dropdown lyte-drop-button {
    box-sizing: border-box;
    color: map.get($lyteCalPopDropBtnMap, "color");
    padding: map.get($lyteCalPopDropBtnMap, "padding");
    border: 0;
    @include addExtraStyles($lyteCalPopDropBtnMap);
}
.lyteCalMonthDD lyte-drop-button {
    font-size: map.get($lyteCalMonthDropBtnMap, "font-size");
    @include addExtraStyles($lyteCalMonthDropBtnMap);
}
.lyteCalYearDD lyte-drop-button {
    font-size: map.get($lyteCalYearDropBtnMap, "font-size");
    @include addExtraStyles($lyteCalYearDropBtnMap);
}
.lyteCalendarPopup lyte-dropdown lyte-icon.dropdown {
    top: map.get($lyteCalPopDropiconMap, "top");
    @include addExtraStyles($lyteCalPopDropiconMap);
}
.lyteCalendarPopup lyte-dropdown lyte-drop-button.lyteDropButtonDown,
.lyteCalendarPopup lyte-dropdown lyte-drop-button.lyteDropButtonUp,
.lyteCalendarPopup lyte-dropdown lyte-drop-button:hover {
    color: map.get($lyteCalPopDropBtnHoverMap, "color");
    padding: map.get($lyteCalPopDropBtnHoverMap, "padding");
    border: 0;
    @include addExtraStyles($lyteCalPopDropBtnHoverMap);
}
.lyteCalendarDropdown lyte-drop-item {
    min-width: map.get($lyteCalPopDropItemMap, "min-width");
    @include addExtraStyles($lyteCalPopDropItemMap);
}
.lyteCalNav {
    width: map.get($lyteCalNavMap, "width");
    height: map.get($lyteCalNavMap, "height");
    display: inline-block;
    cursor: pointer;
    position: relative;
    order: 2;
    border: map.get($lyteCalNavMap, "border");
    border-radius: 50%;
    @if ($direction == rtl) {
        transform: $value-rotate-0deg;
    }
    @include addExtraStyles($lyteCalNavMap);
}
.lyteCalNav:hover {
    border: map.get($lyteCalNavHoverMap, "border");
    @include addExtraStyles($lyteCalNavHoverMap);
}
.lyteCaldLft::before,
.lyteCaldRgt::before {
    content: '';
    position: absolute;
    top: map.get($lyteCaldLftMap, "top");
    #{$property-left}: map.get($lyteCaldLftMap, "left");
    width: map.get($lyteCaldLftMap, "width");
    height: map.get($lyteCaldLftMap, "height");
    @if $useCssMaskForBg {
		mask-image: map.get($lyteCaldLftMap, "mask-image");
		mask-position: map.get($lyteCaldLftMap, "mask-position");
		background-color: map.get($lyteCaldLftMap, "background-color");
	}
    @else {
		background-image: map.get($lyteCaldLftMap, "background-image");
		background-position: map.get($lyteCaldLftMap, "background-position");
	}
    opacity: map.get($lyteCaldLftMap, "opacity");
    @include addExtraStyles($lyteCaldLftMap);
}
.lyteCalyearNavLft::before,
.lyteCalyearNavRgt::before {
    content: '';
    position: absolute;
    top: map.get($lyteCalyearNavLftBeforeMap, "top");
    #{$property-left}: map.get($lyteCalyearNavLftBeforeMap, "left");
    width: map.get($lyteCalyearNavLftBeforeMap, "width");
    height: map.get($lyteCalyearNavLftBeforeMap, "height");
    @if $useCssMaskForBg {
		mask-image: map.get($lyteCalyearNavLftBeforeMap, "mask-image");
		mask-position: map.get($lyteCalyearNavLftBeforeMap, "mask-position");
		background-color: map.get($lyteCalyearNavLftBeforeMap, "background-color");
    }
    @else {
		background-image: map.get($lyteCalyearNavLftBeforeMap, "background-image");
		background-position: map.get($lyteCalyearNavLftBeforeMap, "background-position");
	}
    opacity: map.get($lyteCalyearNavLftBeforeMap, "opacity");
    @include addExtraStyles($lyteCalyearNavLftBeforeMap);
}
.lyteCaldRgt {
    #{$property-margin-left}: map.get($lyteCaldRgtMap, "margin-left");
    @include addExtraStyles($lyteCaldRgtMap);
}
.lyteCalyearNavRgt {
    #{$property-margin-left}: map.get($lyteCalyearNavRgtMap, "margin-left");
    @include addExtraStyles($lyteCalyearNavRgtMap);
}
.lyteCalyearNavLft {
    #{$property-margin-right}: map.get($lyteCalyearNavLftMap, "margin-right");
    @include addExtraStyles($lyteCalyearNavLftMap);
}
.lyteCalyearNavLft::before {
    transform: rotate(180deg);	
}
.lyteCaldLft::before {
    top: map.get($lyteCaldLftBeforeMap, "top");
    transform: rotate(180deg);
    @include addExtraStyles($lyteCaldLftBeforeMap);
}
.lyteCalNav:hover::before {
    opacity: map.get($lyteCalNavHoverBeforeMap, "opacity");
    @include addExtraStyles($lyteCalNavHoverBeforeMap);
}
.lyteCalsCalMon {
    flex-grow: 3;
    text-align: $value-textalign-left;
    order: 1;
    cursor: default;
    color: map.get($lyteCalMonthYearMap, "color");
    @include addExtraStyles($lyteCalMonthYearMap);
}
.lyteCalsCalMonth {
    font-size: map.get($lyteCalMonthTextMap, "font-size");
    @include addExtraStyles($lyteCalMonthTextMap);
}
.lyteCalsCalYear {
    font-size: map.get($lyteCalYearTextMap, "font-size");
    @include addExtraStyles($lyteCalYearTextMap);
}
.lyteCalTableContainer {
    border-spacing: map.get($lyteCalTableContainerMap, "border-spacing");
    box-sizing: border-box;
    display: table;
    padding: map.get($lyteCalTableContainerMap, "padding");
    width: 100%;
    @include addExtraStyles($lyteCalTableContainerMap);
}
.lyteCalTableRow,
.lyteCalTableRowHeader {
    display: table-row;
}
.lyteCalTableCellHeader {
    color: map.get($lyteCalTableCellHeaderMap, "color");
    cursor: default;
    display: table-cell;
    font-size: map.get($lyteCalTableCellHeaderMap, "font-size");
    text-transform: map.get($lyteCalTableCellHeaderMap, "text-transform");
    text-align: center;
    padding-bottom: map.get($lyteCalTableCellHeaderMap, "padding-bottom");
    @include addExtraStyles($lyteCalTableCellHeaderMap);
}
.lyteCalTableCell {
    border: map.get($lyteCalTableCellMap, "border");
    color: map.get($lyteCalTableCellMap, "color");
    cursor: pointer;
    font-size: map.get($lyteCalTableCellMap, "font-size");
    display: table-cell;
	vertical-align: middle;
    padding: map.get($lyteCalTableCellMap, "padding");
    text-align: center;
    width: map.get($lyteCalTableCellMap, "width");
    min-width: map.get($lyteCalTableCellMap, "width");
    height: map.get($lyteCalTableCellMap, "height");
    border-radius: map.get($lyteCalTableCellMap, "border-radius");
    @include addExtraStyles($lyteCalTableCellMap);
}
.lyteCalGray {
    opacity: map.get($lyteCalGrayMap, "opacity");
    @include addExtraStyles($lyteCalGrayMap);
}
.lyteCalGray:hover,
.lyteCalGray.lyteCalSel {
    opacity: 1;
}
.lyteCalToday {
    background: map.get($lyteCalTodayMap, "background");
    color: map.get($lyteCalTodayMap, "color");
    border: map.get($lyteCalTodayMap, "border");
    @include addExtraStyles($lyteCalTodayMap);
}
.lyteCalTableCell:hover,
.lyteCalToday:hover {
    background: map.get($lyteCalTodayHoverMap, "background");
    @include addExtraStyles($lyteCalTodayHoverMap);
}
.lyteCalDisabled.lyteCalSel,
.lyteCalHoliday.lyteCalSel,
.lyteCalWeekend.lyteCalSel,
.lyteCalSel,
.lyteCalSel:hover {
    background: map.get($lyteCalSelHoverMap, "background");
    color: map.get($lyteCalSelHoverMap, "color");
    border: map.get($lyteCalSelHoverMap, "border");
    @include addExtraStyles($lyteCalSelHoverMap);
}
.lyteCalBtns .lyteCalCurrentDate {
    padding: map.get($lyteCalBtnsMap, "padding");
    border-top: map.get($lyteCalBtnsMap, "border-top");
    text-align: center;
    @include addExtraStyles($lyteCalBtnsMap);
}
.lyteCalCurrentDate a {
    color: map.get($lyteCalCurrentDateMap, "color");
    cursor: pointer;
    @include addExtraStyles($lyteCalCurrentDateMap);
}
.lyteCalEmpty {
    display: table-cell;
}
.lyteCalendarHidden {
    display: none;
}
.lyteCalendarPopup .lyteDummyEventContainer:focus lyte-drop-button,
.lyteCalendarPopup .lyteDummyEventContainer:focus lyte-drop-button:hover,
.lyteCalendarPopup lyte-drop-button.lyteDropButtonUp,
.lyteCalendarPopup lyte-drop-button.lyteDropButtonDown {
    border: map.get($lyteCalDropdownOpenedMap, "border");
    box-shadow: map.get($lyteCalDropdownOpenedMap, "box-shadow");
    @include addExtraStyles($lyteCalDropdownOpenedMap);
}
.lyteCalTableRowGroup {
    display: table-row-group;
}
.lyteCalDisabled {
    background: map.get($lyteCalDisabledMap, "background");
    pointer-events: none;
    opacity: map.get($lyteCalDisabledMap, "opacity");
    @include addExtraStyles($lyteCalDisabledMap);
}
.lyteCalendarDisabledDate {
	background: map.get($lyteCalDisabledDateMap, "background");
	opacity: map.get($lyteCalDisabledDateMap, "opacity");
	cursor: default;
    @include addExtraStyles($lyteCalDisabledDateMap);
}
.lyteCalendarDisabledDate:hover {
	background: map.get($lyteCalDisabledDateHoverMap, "background");
    @include addExtraStyles($lyteCalDisabledDateHoverMap);
}

/*  Drilldown calendar CSS BEGINS   */

.lyteDrillCalYearView,
.lyteDrillCalMonthView {
    border-spacing: map.get($lyteDrillCalYearViewMap, "border-spacing");
    @include addExtraStyles($lyteDrillCalYearViewMap);
}
.lyteDrillCalYearView .lyteCalTableCell,
.lyteDrillCalMonthView .lyteCalTableCell {
    height: auto;
    width: map.get($lyteDrillCalYearViewCellMap, "width");
    padding: map.get($lyteDrillCalYearViewCellMap, "padding");
    border-radius: map.get($lyteDrillCalYearViewCellMap, "border-radius");
    @include addExtraStyles($lyteDrillCalYearViewCellMap);
}
.lyteDrillCalCurrentYear,
.lyteDrillCalCurrentMonth {
    color: map.get($lyteDrillCalCurrentYearMap, "color");
    border: map.get($lyteDrillCalCurrentYearMap, "border");
    @include addExtraStyles($lyteDrillCalCurrentYearMap);
}
.lyteDrillCalHeaderButton {
    background: map.get($lyteDrillCalHeaderButtonMap, "background");
    padding: map.get($lyteDrillCalHeaderButtonMap, "padding");
    color: map.get($lyteDrillCalHeaderButtonMap, "color");
    border: map.get($lyteDrillCalHeaderButtonMap, "border");
    border-radius: map.get($lyteDrillCalHeaderButtonMap, "border-radius");
    font-size: map.get($lyteDrillCalHeaderButtonMap, "font-size");
    cursor: pointer;
    @include addExtraStyles($lyteDrillCalHeaderButtonMap);
}
.lyteDrillCalHeaderButton:hover {
    background: map.get($lyteDrillCalHeaderButtonHoverMap, "background");
    @include addExtraStyles($lyteDrillCalHeaderButtonHoverMap);
}
.lyteDrillCalYearListHeader:hover,
.lyteDrillCalYearListHeader {
    border-color: map.get($lyteDrillCalYearListHeaderMap, "border-color");
    background: map.get($lyteDrillCalYearListHeaderMap, "background");
    cursor: default;
    @include addExtraStyles($lyteDrillCalYearListHeaderMap);
}
.lyteDrillCalHeaderButton .lyteCalsCalMonth {
    font-size: map.get($lyteDrillCalHeaderButtonCalMonthMap, "font-size");
    @include addExtraStyles($lyteDrillCalHeaderButtonCalMonthMap);
}

.lyteCalDisableNav {
    pointer-events: none;
    opacity: map.get($lyteCalDisableNavMap, "opacity");
    @include addExtraStyles($lyteCalDisableNavMap);
}
/*  Drilldown calendar CSS ENDS   */

.lyteVisuallyHidden {
    @include lyteVisuallyHiddenMixin();
}

/*	Calendar weekly selection CSS Begins */
.lyteCalWeekSelType .lyteCalTableCell {
	position: relative;
	border-radius: map.get($lyteCalWeekSelTypeTableCellMap, "border-radius");
    @include addExtraStyles($lyteCalWeekSelTypeTableCellMap);
}
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalTableCell {
	background: map.get($lyteCalWeekSelTypeRowHoverTableCellMap, "background");
	color: map.get($lyteCalWeekSelTypeRowHoverTableCellMap, "color");
    @include addExtraStyles($lyteCalWeekSelTypeRowHoverTableCellMap);
}
.lyteCalWeekSelType .lyteCalToday.lyteCalWeekSel,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalToday {
	border-color: map.get($lyteCalWeekSelTypeTodayWeekSelMap, "border-color");
	border-radius: map.get($lyteCalWeekSelTypeTodayWeekSelMap, "border-radius");
	color: map.get($lyteCalWeekSelTypeTodayWeekSelMap, "color");
    @include addExtraStyles($lyteCalWeekSelTypeTodayWeekSelMap);
}
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalWeekSel,
.lyteCalWeekSel {
	background: map.get($lyteCalWeekSelMap, "background");
    @include addExtraStyles($lyteCalWeekSelMap);
}
.lyteWeekNumContainer .lyteCalWeekSel:nth-child(2),
.lyteWeekNumContainer .lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalTableCell:nth-child(2),
.lyteCalWeekSelType .lyteCalToday.lyteCalWeekSel:first-child,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalToday:first-child,
.lyteCalWeekSelType .lyteCalTableCell:first-child {
	border-radius: map.get($lyteCalWeekSelTypeFirstTableCellMap, "border-radius");
    @include addExtraStyles($lyteCalWeekSelTypeFirstTableCellMap);
}
.lyteCalWeekSelType .lyteCalToday.lyteCalWeekSel:last-child,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalToday:last-child,
.lyteCalWeekSelType .lyteCalTableCell:last-child {
	border-radius: map.get($lyteCalWeekSelTypeLastTableCellMap, "border-radius");
    @include addExtraStyles($lyteCalWeekSelTypeLastTableCellMap);
}
.lyteCalWeekSelType .lyteCalToday,
.lyteCalWeekSelType .lyteCalToday:first-child,
.lyteCalWeekSelType .lyteCalToday:last-child {
	border-radius: map.get($lyteCalWeekSelTypeTodayCellMap, "border-radius");
    @include addExtraStyles($lyteCalWeekSelTypeTodayCellMap);
}
.lyteWeekNumContainer .lyteCalWeekSel:nth-child(2),
.lyteCalWeekSelType .lyteCalWeekSel:first-child,
.lyteCalWeekSelType .lyteCalWeekSel:last-child {
	color: map.get($lyteCalWeekSelTypeWeekSelFirstAndLastChildMap, "color");
	z-index: map.get($lyteCalWeekSelTypeWeekSelFirstAndLastChildMap, "z-index");
    @include addExtraStyles($lyteCalWeekSelTypeWeekSelFirstAndLastChildMap);
}
.lyteWeekNumContainer .lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalWeekSel:nth-child(2),
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalWeekSel:first-child,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalWeekSel:last-child {
	color: map.get($lyteCalWeekSelTypeRowHoverWeekSelFirstAndLastChildMap, "color");
    @include addExtraStyles($lyteCalWeekSelTypeRowHoverWeekSelFirstAndLastChildMap);
}
.lyteCalWeekSel:last-child::before,
.lyteCalWeekSel:first-child::before,
.lyteWeekNumContainer .lyteCalWeekSel:nth-child(2)::before {
	content: '';
	background: map.get($lyteCalWeekSelFirstAndLastChildBeforeMap, "background");
	position: absolute;
	width: map.get($lyteCalWeekSelFirstAndLastChildBeforeMap, "width");
	height: map.get($lyteCalWeekSelFirstAndLastChildBeforeMap, "height");
	border-radius: map.get($lyteCalWeekSelFirstAndLastChildBeforeMap, "border-radius");
	z-index: map.get($lyteCalWeekSelFirstAndLastChildBeforeMap, "z-index");
    @include addExtraStyles($lyteCalWeekSelFirstAndLastChildBeforeMap);
}
.lyteWeekNumContainer .lyteCalWeekSel:nth-child(2)::before,
.lyteCalWeekSel:first-child::before {
	#{$property-left}: map.get($lyteCalWeekSelFirstChildBeforeMap, "left");
    top: 0;
    @include addExtraStyles($lyteCalWeekSelFirstChildBeforeMap);
}
.lyteCalWeekSel:last-child::before {
	#{$property-right}: map.get($lyteCalWeekSelLastChildBeforeMap, "right");
    top: 0;
    @include addExtraStyles($lyteCalWeekSelLastChildBeforeMap);
}
.lyteCalWeekSelType .lyteCalTableRow .lyteCalTableCell::after {
	content: '';
	position: absolute;
	#{$property-left}: map.get($lyteCalWeekSelTypeTableCellAfterMap, "left");
	width: map.get($lyteCalWeekSelTypeTableCellAfterMap, "width");
	top: map.get($lyteCalWeekSelTypeTableCellAfterMap, "top");
	height: map.get($lyteCalWeekSelTypeTableCellAfterMap, "height");
    @include addExtraStyles($lyteCalWeekSelTypeTableCellAfterMap);
}
.lyteCalWeekSel::after,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalTableCell::after {
	background: map.get($lyteCalWeekSelTypeRowHoverTableCellAfterMap, "background");
    @include addExtraStyles($lyteCalWeekSelTypeRowHoverTableCellAfterMap);
}
.lyteCalWeekSelType .lyteCalTableRow .lyteCalTableCell:last-child::after {
	content: none;
}
/*	Calendar weekly selection CSS Ends */

/*	Calendar Monthly selection, Yearly Selection CSS Begins */

.lyteCalYearSelType,
.lyteCalMonthSelType {
	border-spacing: map.get($lyteCalMonthSelTypeMap, "border-spacing");
    @include addExtraStyles($lyteCalMonthSelTypeMap);
}
.lyteCalYearSelType .lyteCalTableCell,
.lyteCalMonthSelType .lyteCalTableCell {
	height: map.get($lyteCalMonthSelTypeTableCellMap, "height");
	width: map.get($lyteCalMonthSelTypeTableCellMap, "width");
	padding: map.get($lyteCalMonthSelTypeTableCellMap, "padding");
	border-radius: map.get($lyteCalMonthSelTypeTableCellMap, "border-radius");
    @include addExtraStyles($lyteCalMonthSelTypeTableCellMap);
}
.lyteCalYearSel:hover,
.lyteCalYearSel,
.lyteCalMonthSel:hover,
.lyteCalMonthSel {
	background: map.get($lyteCalMonthSelMap, "background");
	color: map.get($lyteCalMonthSelMap, "color");
    @include addExtraStyles($lyteCalMonthSelMap);
}
.lyteCalWeekendHeader,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalHoliday,
.lyteCalWeekSelType .lyteCalTableRow:hover .lyteCalWeekend,
.lyteCalHoliday,
.lyteCalWeekend {
	color: map.get($lyteCalWeekendHolidayMap, "color");
    @include addExtraStyles($lyteCalWeekendHolidayMap);
}
.lyteWeekNumContainer .lyteCalTableContainer {
	#{$property-padding-left}: 0;
	position: relative;
}
.lyteCalTableRowGroup .lyteWeekNumberGrid {
    color: map.get($lyteWeekNumberGridMap, "color");
    font-size: map.get($lyteWeekNumberGridMap, "font-size");
    display: table-cell;
    vertical-align: middle;
    padding: map.get($lyteWeekNumberGridMap, "padding");
    text-align: center;
    width: map.get($lyteWeekNumberGridMap, "width");
    min-width: map.get($lyteWeekNumberGridMap, "min-width");
    height: map.get($lyteWeekNumberGridMap, "height");
	#{$property-padding-right}: map.get($lyteWeekNumberGridMap, "padding-right");
    @include addExtraStyles($lyteWeekNumberGridMap);
}
.lyteWeekNumContainer .lyteCalTableContainer::before {
    content: "";
    position: absolute;
    border-radius: map.get($lyteWeekNumContainerTableContainerBeforeMap, "border-radius");
	border: map.get($lyteWeekNumContainerTableContainerBeforeMap, "border");
	#{$property-border-left}: none;
	background: map.get($lyteWeekNumContainerTableContainerBeforeMap, "background");
    width: map.get($lyteWeekNumContainerTableContainerBeforeMap, "width");
    #{$property-left}: map.get($lyteWeekNumContainerTableContainerBeforeMap, "left");
	display: inline-block;
    height: map.get($lyteWeekNumContainerTableContainerBeforeMap, "height");
	z-index: map.get($lyteWeekNumContainerTableContainerBeforeMap, "z-index");
    @include addExtraStyles($lyteWeekNumContainerTableContainerBeforeMap);
}
.lyteWeekNumberGrid {
	position: relative;
	z-index: 1;
}
.lyteCalTableCellHeader.lyteWeekNumberGrid {
	#{$property-padding-right}: map.get($lyteCalTableCellHeaderWeekNumGridMap, "padding-right");
    @include addExtraStyles($lyteCalTableCellHeaderWeekNumGridMap);
}
.lyteWeekNumberGrid.lyteCalCurWeekNum {
	color: map.get($lyteCalCurWeekNumMap, "color");
    @include addExtraStyles($lyteCalCurWeekNumMap);
}
.lyteWeekNumContainer .lyteCalTableContainer.lyteCalYearSelType::before,
.lyteWeekNumContainer .lyteCalTableContainer.lyteCalMonthSelType::before {
	content: none;
}
.lyteCalHeaderCenterAlign .lyteCalNav {
    order: 1;
}
.lyteCalHeaderCenterAlign .lyteCalsCalMon {
	text-align: center;
}
/*	Calendar Monthly selection, Yearly Selection CSS Ends */

/*  Calendar related CSS ENDS     */
