/* Default theme imported */
@import "../themes/default/ui-elements/accordion/accordion.variables.less";




/* Loading theme in configuration */
@import "../config.less";
@import (optional) "../themes/@{accordion}/ui-elements/accordion/accordion.variables.less";

/* rtl files loading */

@import (multiple,optional) "../themes/default/global/@{direction}.less";

@import (multiple,optional) "../themes/@{accordion}/global/@{direction}.less";

/* Loading final tweaks to your variables */
@import (optional) "../overrides/ui-elements/accordion.variables.less";

lyte-accordion {
	display: block;
    position: relative;
}
lyte-accordion-item {
	.accordionItem();
	margin: @margin;
	border-bottom: @border-bottom;
	display: block;
	background: @bg;
}
lyte-accordion-item:hover {
	.accordionItemhover();
	border-bottom-color: @border-bottom-color;
}
.lyteAccordionNested lyte-accordion:last-child lyte-accordion-item:last-child {
    border-bottom: 0;
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-header,
lyte-accordion-header {
	.accordionHeader();
	padding: @padding;
	font-family: @primaryFont;
	color: @color;
	font-size: @font-size;
	text-align: @value-textalign-left;
    outline: 0;
	position: relative;
	display: block;
	cursor: pointer;
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-header:hover,
lyte-accordion-header:hover {
	.accordionHeaderhover();
	color: @color;
}
.lyteAccordionActive {
	.AccordionActive();
	border-bottom-color: @border-bottom-color;
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header:hover,
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header,
.lyteAccordionActive lyte-accordion-header {
	.accordionActiveHeader();
	color: @color;
}
lyte-accordion-body {
	.accordionBody();
	width: @w;
	padding: @padding;
	color: @color;
	font-family: @primaryFont;
    font-size: @font-size;
	text-align: @value-textalign-left;
	display: block;
	overflow: hidden;
	transition: height ease-out 0.3s, padding ease-out 0.3s;
}
.lyteAccordionNested lyte-accordion-body {
    .nestedAccordionBodyMixin();
    width: @w;
    box-sizing: border-box;
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-body {
    .nestedAccordionActiveBodyMixin();
    padding-bottom: @padding-bottom;
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-body,
.lyteAccordionActive lyte-accordion-body {
    .accordionActiveBody();
    padding-bottom: @padding-bottom;
}
.lyteAccordionNested .lyteAccordionActive lyte-icon.lyteAccordionArrow,
lyte-icon.lyteAccordionArrow {
	.accordionArrow();
	& when (@useCssMaskForBg = true) {
		.lyteMaskBgMixin(@mask-img, @mask-pos, @bg-color);
	}
	& when not (@useCssMaskForBg = true) {
		background-image: @bg-img;
		background-position: @bg-pos;
	}
	width: @w;
	height: @h;
	position: absolute;
    @{property-left}: @left;
	margin-top: @margin-top;
	display: inline-block;
	& when (@rtlEnabled = true) {
		transform: @value-rotate-0deg;
	}
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header lyte-icon.lyteAccordionArrow,
.lyteAccordionActive lyte-icon.lyteAccordionArrow {
	.accordionActiveArrow();
	& when (@useCssMaskForBg = true) {
		.lyteMaskBgMixin('', @mask-pos, @bg-color);
	}
	& when not (@useCssMaskForBg = true) {
		background-position: @bg-pos;
	}
	width: @w;
	height: @h;
	& when (@rtlEnabled = true) {
		transform: @value-rotate-180deg;
	}
}


/* import theme overrides - styles */
@import (optional) "../themes/@{accordion}/ui-elements/accordion/accordion.styles.less";




/* import custom css - final tweaks by the user */
@import (optional) "../overrides/ui-elements/accordion.overrides.less";