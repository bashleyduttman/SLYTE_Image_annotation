{"version":3,"file":"data-store/schemas/Annotation.js","mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AAGA","sources":["webpack://Imageannotation/./data-store/connectors/annotation.js","webpack://Imageannotation/./data-store/schemas/Annotation.js","webpack://Imageannotation/./data-store/serializers/Annotation.js"],"sourcesContent":["import { RESTConnector } from \"@slyte/data\";\n\nclass AnnotationConnector extends RESTConnector{\n    host=\"http://localhost:3001/server/image_annotation/\";\n    withCredentials=false;\n    \n    requestURL({url,type,queryParams}){\n        console.log(\"url is\",url)\n        console.log(\"type=\",type)\n        console.log(\"queryParams\",queryParams)\n       if(type==\"getAll\"){\n        var imageId=localStorage.getItem(\"imageId\");\n        console.log(\"url added\",url+'/'+imageId)\n        return url+'/'+imageId;\n       }\n       if(type==\"createEntity\")\n       {\n        return url+'/';\n       }\n       \n       return url;\n       \n        \n    }\n    processRequest({url,cachedData,type,schemaName,payLoad}){\n        // if(type==\"createEntity\"){\n        //     return new Promise((resolve,reject)=>{\n        //         console.log(\"cached data\",cachedData)\n        //         var xhr=new XMLHttpRequest();\n        //         xhr.open(\"POST\", url, true);\n        //         xhr.responseType=\"json\"\n        //         var formdata=new FormData();\n        //         formdata.append(\"image_id\",cachedData.image_id);\n        //         formdata.append(\"Bbox\",cachedData.Bbox);\n        //         xhr.onload = function () {\n        //         if (xhr.status >= 200 && xhr.status < 300) {\n        //             console.log(\"success from xhr\")\n        //         resolve(JSON.parse(xhr.response)); \n        //         } else {\n        //         reject(xhr.response); \n        //         }\n        //     };\n        //         xhr.send(formdata)\n\n        //         })\n                    \n        \n    // }\n    console.log(\"cached data\",cachedData)\n   if (type === \"createEntity\") {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url, true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\"); \n\n    xhr.responseType = \"json\"; \n\n    xhr.onload = function () {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const savedRecord = xhr.response; \n        localStorage.setItem(\"uniqueId\",savedRecord)\n        console.log(\"saved Record\",savedRecord);\n\n        \n        resolve(JSON.stringify(savedRecord));\n      } else {\n        reject(new Error(`Request failed with status ${xhr.status}`));\n      }\n    };\n\n    xhr.onerror = function () {\n      reject(new Error(\"Network error\"));\n    };\n\n    // send JSON string\n    xhr.send(JSON.stringify(cachedData));\n  });\n}\n\n  \n\n    if(type===\"updateEntity\"){\n        console.log(\"cached data\",cachedData);\n        return fetch(url,{\n            method:\"PATCH\",\n            headers:{\n                \"Content-Type\":\"application/json\"\n            }\n            ,body:JSON.stringify(cachedData)\n        }).then(res=>res.json());\n    }\n    else if(type==\"deleteEntity\"){\n        return fetch(url,{\n            method:\"DELETE\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n\n            }\n        \n        })\n    }\n}\n       \n    \n    parseResponse({ payLoad, type }) {\n    console.log(\"image payload \", payLoad);\n\n    if (!payLoad || !payLoad.result) {\n        return [];\n    }\n\n    const filtered = payLoad.result.map((item) => {\n        let bboxArray;\n\n        if (Array.isArray(item.Bbox)) {\n            bboxArray = item.Bbox; // âœ… already array\n        } \n        else if (typeof item.Bbox === \"string\") {\n            try {\n                // Only parse if it *looks* like JSON\n                if (item.Bbox.trim().startsWith(\"[\") || item.Bbox.trim().startsWith(\"{\")) {\n                    bboxArray = JSON.parse(item.Bbox);\n                } else {\n                    console.warn(\"Skipping non-JSON Bbox string:\", item.Bbox);\n                    bboxArray = [0,0,0,0];\n                }\n            } catch (e) {\n                console.error(\"Invalid Bbox string:\", item.Bbox, e);\n                bboxArray = [0,0,0,0];\n            }\n        } \n        else if (typeof item.Bbox === \"object\" && item.Bbox !== null) {\n            // Already a proper object\n            bboxArray = [item.Bbox.x, item.Bbox.y, item.Bbox.width, item.Bbox.height];\n        } \n        else {\n            bboxArray = [0,0,0,0]; // fallback\n        }\n\n        return {\n            image_id: item.image_id,\n            Bbox: {\n                x: bboxArray[0],\n                y: bboxArray[1],\n                width: bboxArray[2],\n                height: bboxArray[3]\n            },\n            id: item.ROWID,\n            text: item.text\n        };\n    });\n\n    console.log(\"filtered \", filtered);\n    return filtered;\n}\n\n        \n\n    \n}\n\nexport {AnnotationConnector}\n\n","import { _defineProperty } from \"@slyte/core/src/lyte-utils\";\nimport { prop } from \"../../node_modules/@slyte/core/index.js\";\nimport { Schema } from \"../../node_modules/@slyte/data/index.js\";\nimport { AnnotationConnector } from \"../connectors/annotation\";\nimport { AnnotationSerializer } from \"../serializers/Annotation\";\n\nclass AnnotationSchema extends Schema{\n    props(){\n        return{\n           \n            image_id:prop(\"string\"),\n            Bbox:prop(\"object\"),\n            text:prop(\"string\")\n            // text:prop(\"string\"),\n            // created_time:prop(\"string\"),\n            // modified_time:prop(\"string\"),\n        }\n    }\n\n    _() {\n        _;\n    }\n}\n\nAnnotationSchema.Serializer = AnnotationSerializer;\nAnnotationSchema.Connector = AnnotationConnector;\nexport {AnnotationSchema}\nAnnotationSchema.register({\n    hash: \"AnnotationSchema_6\",\n    refHash: \"db_ImageAnnotation_app_0\"\n});","import { RESTSerializer } from \"@slyte/data\";\n\nclass AnnotationSerializer extends RESTSerializer {\nnormalizePayload({schemaName, type, payLoad, key, status, headers, queryParams, customData, opts }){\n    console.log(\"hellooooo\")\n    console.log(payLoad)\n    console.log(schemaName)\n    \n    if(type==\"createEntity\"){\n        const id=localStorage.getItem(\"uniqueId\");\n    payLoad={id:id}\n    console.log(\"id \",payLoad)\n    }\n    \n    return {[schemaName]:payLoad};\n}\n \n}\nexport {AnnotationSerializer}\n"],"names":[],"sourceRoot":""}