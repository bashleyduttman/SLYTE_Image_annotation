{"version":3,"file":"data-store/schemas/Images.js","mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA","sources":["webpack://Imageannotation/./data-store/connectors/images.js","webpack://Imageannotation/./data-store/schemas/Images.js","webpack://Imageannotation/./data-store/serializers/images.js"],"sourcesContent":["import { RESTConnector } from \"@slyte/data\";\n\nclass ImagesConnector extends RESTConnector{\n host=\"http://localhost:3001/server/image_annotation/\"\n withCredentials=false;\n \n requestURL({schemaName, type, queryParams, payLoad, url, actionName, customData, key}){\n   console.log(\"query params \",queryParams)\n   const page=queryParams.page;\n    if(type=='getAll'){\n      return url+'/'+page;\n    }\n    else if( type==\"createEntity\"){\n      return url;\n        \n    }\n    \n    \n    \n    return url;\n }\nprocessRequest({ type, cachedData ,url,schemaName}) {\n  console.log(\"url \",url)\n\n  if (type === \"createEntity\") {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", url, true);\n\n      const formData = new FormData();\n      xhr.responseType=\"json\"\n      formData.append(\"file\", cachedData.file);\n      formData.append(\"name\", cachedData.name);\n      formData.append(\"size\", cachedData.size);\n      \n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n            console.log(\"success from xhr\")\n          resolve(JSON.parse(xhr.response)); \n        } else {\n          reject(xhr.response); \n        }\n      };\n\n      xhr.onerror = function () {\n        reject(\"Network error\");\n      };\n\n      xhr.send(formData);\n    });\n  }\n}\n\n parseResponse({payLoad,type}){\n    \n    var filtered=payLoad.result.map((item)=>({\n        id:item.id,\n        name:item.name,\n        size:item.size,\n        data:item.data,\n    }))\n    \n    return filtered;\n\n }\n parseRequest({type,xhr,customData}){\n    if(type==\"createEntity\"){\n        console.log(customData);\n    }\n\n }\n}\nexport {ImagesConnector}\n\n","import { _defineProperty } from \"@slyte/core/src/lyte-utils\";\nimport { prop } from \"../../node_modules/@slyte/core/index.js\";\nimport { Schema } from \"../../node_modules/@slyte/data/index.js\";\nimport { ImagesConnector } from \"../connectors/images\";\nimport { ImagesSerializer } from \"../serializers/images\";\n\nclass ImagesSchema extends Schema{\n    props(){\n        return {\n            id:prop(\"string\",{primaryKey:true}),\n            name:prop(\"string\"),\n            size:prop(\"string\"),\n            data:prop('string'),\n            file:prop(\"object\")\n        }\n    }\n\n    _() {\n        _;\n    }\n}\n\nImagesSchema.Serializer = ImagesSerializer;\nImagesSchema.Connector = ImagesConnector;\nexport {ImagesSchema}\nImagesSchema.register({\n    hash: \"ImagesSchema_7\",\n    refHash: \"db_ImageAnnotation_app_0\"\n});","import { RESTSerializer } from \"@slyte/data\";\n\nclass ImagesSerializer extends RESTSerializer {\n normalizePayload({schemaName, type, payLoad, key, status, headers, queryParams, customData, opts }){\n    console.log(\"hellooooo\")\n    console.log(payLoad)\n    return {[schemaName]:payLoad};\n}\n}\nexport {ImagesSerializer}\n"],"names":[],"sourceRoot":""}