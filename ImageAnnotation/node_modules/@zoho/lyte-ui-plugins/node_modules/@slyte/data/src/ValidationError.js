import { cmpSet, emit } from "./commonUtils";


class ValidationError{
    static errorCodes = {
        ERR01 : "Primary key cannot be modified", 
        ERR02 : "Mandatory prop cannot be empty", 
        ERR03 : "Type of value does not match the specified data type",
        ERR04 : "Value is greater than the maximum value allowed",
        ERR05 : "Value is less than the minimum value allowed", 
        ERR06 : "Length of string/array is greater than the maximum limit allowed", 
        ERR07 : "Length of string/array is less than the minimum limit allowed",
        ERR08 : "String does not match the specified pattern", 
        ERR09 : "Values in array are not unique", 
        ERR10 : "Value is not equal to the specified constant", 
        ERR11 : "Schema of related field is not defined",
        ERR12 : "Schema of backward relation is not defined", 
        ERR13 : "Entity not found", 
        ERR14 : "Schema does not match the schema defined in the related field", 
        ERR15 : "Error in creating a entity as a relation",
        ERR16 : "Entity with primary key already exists", 
        ERR17 : "Value cannot be changed because entity has been deleted", 
        ERR18 : "Action not defined", 
        ERR19 : "Schema not defined",
        ERR20 : "Key not specified", 
        ERR21 : "'one' relationship expects a single object/id", 
        ERR22 : "Type not specified for polymorphic relation", 
        ERR23: "Primary Key value not present", 
        ERR24: "Error while relating entities", 
        ERR25: "Backward relation not present",
        ERR26: "Primary key value cannot be undefined or null",
        ERR27: "Observer can observe only string data type value, '{0}' value cannot be observed in the function named '{1}' in the component '{2}'",
        ERR29: "Property not defined in the object",
        ERR30: "Property's value is not an instanceof the mentioned class"      
    }
    constructor(lyte, attr, obj, message){
        Object.defineProperties(this, {
            $ : {
                value : {isError : true , error:message?message:{}}
            }
        });
        if(attr){
            ValidationError.setError(lyte,this,attr,obj);
        }    
    }

    static setError(lyte,err,attr,codeObj){
        if(err.$.hasOwnProperty("error")){
            if(Array.isArray(attr)){
                attr.forEach(function(itm){
                    cmpSet(lyte, err.$.error, itm, codeObj);
                });
            }
            else{
                cmpSet(lyte, err.$.error,attr,codeObj);
            }
        }
        else{
            ValidationError.error(lyte,"LD03",err,attr);
        }
    }

    static setRecErr(ent$, field, code, value){
        var lyte = ent$.schema.Lyte;
        cmpSet(lyte, ent$, "isError", true);
        var errObj = code;
        if(typeof errObj == "object"){
            cmpSet(lyte, ent$.error,field,errObj);
        }
        else{
            if(typeof code == "string"){
                var errMes = ValidationError.errorCodes[code];
                if(errMes){
                    errObj = {code : code, message : ValidationError.errorCodes[code]};
                }
                else{
                    errObj = code;
                }
            }
            cmpSet(lyte, ent$.error, field, errObj);
            if(value){
                cmpSet(lyte, ent$.error[field],"value",value);
            }				
        }
		var db = ent$.schema.db;
        emit(db,"error",ent$.entity,field,errObj);
    }

    static clrRecErr(ent$, field, code){
        var lyte = ent$.schema.Lyte;
        var objUtl = lyte.objectUtils;
        var $err = ent$.error;
        if(code){
            if(ent$.error.code == code){
                if(typeof objUtl != "undefined"){
                    objUtl($err,"delete",field);
                }
                else{
                    delete $err[field];                        
                }
            }
        }
        else if(field){
            if(typeof objUtl != "undefined"){
                objUtl($err,"delete",field);
            }
            else{
                delete $err[field];                       
            }
        }
        else{
            if(typeof objUtl != "undefined"){
                for(var err in $err){
                    objUtl($err,"delete",err);
                }
            }	
            else{
                ent$.error = {};
            }   
        }
        if(Object.keys(ent$.error).length == 0){
            cmpSet(lyte, ent$, "isError", false);
        }
    }
}
export { ValidationError };