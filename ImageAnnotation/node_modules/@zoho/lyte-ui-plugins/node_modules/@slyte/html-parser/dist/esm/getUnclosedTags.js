let selfClosingTags = [
    'area',
    'base',
    'br',
    'col',
    'command',
    'embed',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'menuitem',
    'meta',
    'param',
    'script',
    'source',
    'track',
    'wbr'
]
function isSelfClosing(tagName) {
    for (var i = 0; i < selfClosingTags.length; i++) {
        if (selfClosingTags[i] === tagName) {
            return true;
        }
    }
    return false;
}
function getUnclosedTags(str) {
    let html = str;
    var unclosedTags = [];
    //Removal of comment
    html = html.replace(/(<!--(?:.|\n)*?(?:-->))|(<!--(?:.|\n)*)/g, '');

    html = html.replace(/<script[^>]*>(.|\n)*?<\/script>/gi, '');
    var lines = html.split('\n');
    for (let i = 0; i < lines.length; i++) {
        lines[i] = lines[i].replace(/(<\/?[a-z0-9]+)/gi, String('$1:') + String(i + 1));
    }
    html = lines.join('\n');
    var tags = [];
    var matchedTags = html.match(/<[^>]*[^/]>/g) || [];
    for (let j = 0; j < matchedTags.length; j++) {
        var matchedTag = matchedTags[j];
        var matches = matchedTag.match(/<\/?([a-z0-9]+):([0-9]+)/i);
        if (matches) {
            tags.push({
                tag: matchedTag.replace(/^(<\/?[a-z0-9]+):([0-9]+)/gi, '$1'),
                name: matches[1],
                line: parseInt(matches[2]),
                closing: matchedTag[1] === '/'
            });
        }
    }
    if (tags.length == 0) {
        return unclosedTags;
    }
    let index = 0
    var openTags = []
    for (let i = 0; i < tags.length; i++) {
        var tag = tags[i];
        if (tag.closing) {
        
            var closingTag = tag;
            if (isSelfClosing(closingTag.name)) {
                continue;
            }
            if (openTags.length == 0) {
                unclosedTags.push({
                    tag: closingTag.tag,
                    name: closingTag.name,
                    line: closingTag.line,
                    hasNoCloseTag: false,
                    hasNoOpenTag: true
                });
                // if (i != tags.length - 1)
                    continue;
            }
            // if (i != tags.length - 1)
            var openTag = openTags[openTags.length - 1];
       
            if (closingTag.name !== openTag.name) {
                var foundOpeningTag = false;
                for (let j = openTags.length - 1; j >= 0; j--) {
                    var currentOpenTag = openTags[j];
               
                    if (closingTag.name === currentOpenTag.name) {
                        foundOpeningTag = true;
                        openTags.pop();
                        break;
                    }
                    unclosedTags.push({
                        tag: currentOpenTag.tag,
                        name: currentOpenTag.name,
                        line: currentOpenTag.line,
                        hasNoCloseTag: true,
                        hasNoOpenTag: false
                    });

                    openTags.pop();
                }
                if (!foundOpeningTag) {
                    unclosedTags.push({
                        tag: closingTag.tag,
                        name: closingTag.name,
                        line: closingTag.line,
                        hasNoCloseTag: false,
                        hasNoOpenTag: true
                    });
                }

                continue;
            } else {
                
                // if (tags.length - 1 == i) {
                //     let ls = []
                    
                //     for (let i = 0; i < unclosedTags.length; i++) {
                //         if (unclosedTags[i].line == closingTag.line) {
                //             ls.push(i);
                //             closingTag = null
                //         }
                //         if (unclosedTags[i].line == openTag.line) {
                //             ls.push(i);
                //             openTag = null
                //         }
                //     }
                //     for (let i = 0; i < ls.length; i++)
                //         unclosedTags.splice(ls[i] - i, 1);
                //     // if (openTag) {
                //     //     unclosedTags.push({
                //     //         tag: openTag.tag,
                //     //         name: openTag.name,
                //     //         line: openTag.line,
                //     //         hasNoCloseTag: true,
                //     //         hasNoOpenTag: false
                //     //     });
                //     // }
                    
                // }
                openTags.pop();
            }
        } else {
        
            var openingTag = tag;
            if (isSelfClosing(openingTag.name)) {
                continue;
            }
            openTags.push(openingTag);
        }
    }

    if (openTags.length > 0) {
        for (var i = 0; i < openTags.length; i++) {
            var tag = openTags[i];
            unclosedTags.push({
                tag: tag.tag,
                name: tag.name,
                line: tag.line,
                hasNoCloseTag: true,
                hasNoOpenTag: false
            });
        }
    }

    unclosedTags.sort(
        function (a, b) {
            return (a.line > b.line) ? 1 : ((b.line > a.line) ? -1 : 0);
        }
    )
        
    return unclosedTags;
}
export default getUnclosedTags;