//ignorei18n_start
import { HTMLPurifier } from "@zoho/SecurityJS/dist/security-html-sanitizer.js";
import { ApiError } from "./lyte-errors.js";
import { _LC, ComponentRegistry } from "@slyte/component";
import "../compatibility/compatibility.js";
let Security = {
    "_userSanitizerInstance_":{}, 
    "_eM" : {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;'
        }, 
    "_eR" : /[&<>"'`=]/g,
    "_eF" : function(str) {
        return this._eM[str];
    }, 
    "escape" : function(string) {
        if (typeof string !== 'string') {
            string = '' + string;
        }
        return string.replace(this._eR, this._eF.bind(this));
    },
    defaultTags : ["link-to"],
    defaultAttr : ["is","yield-name","lt-prop-route", "lt-prop-dp", "lt-prop-fragment", "lt-prop-qp", "lt-prop", "lt-prop-class", "lt-prop-id", "lt-prop-rel", "lt-prop-title", "lt-prop-style", "lt-prop-target","lt-prop-td","lt-prop-custom","lt-prop-target","lt-prop-id","lt-prop-class","lt-prop-style","lt-prop-rel","lt-prop-title"],
    sanitizeHTML : function(obj){
        let clean;
        let divEle = document.createElement("div");
        let html = obj.html;
        let instance = obj.instance;
        let additionalObject = obj.additionalObject ? obj.additionalObject : {};
        if(instance && Object.keys(instance).length){
            if(additionalObject && Object.keys(additionalObject).length){
                this.initializeConfig(additionalObject);
                this.removeConfig(additionalObject);
                this.addLyteComponents(additionalObject);
                clean = this.sanitizeWithConfig(html ,additionalObject, instance);
            }
            else{
                clean = instance.sanitize(html);
            }
        }else{
            //@Slicer.developmentStart
            ApiError.error("LC009");
            //@Slicer.developmentEnd
            return;
        }
        if(obj && obj.getInnerHTML){
            return clean;
        }
        divEle.innerHTML = clean;
        return divEle;
    },
    createSanitizer : function (obb) {
        if(obb && obb.__target__){
            obb = obb.__target__;
        }
        this.initializeConfig(obb);
        this.addConfig(obb);
        this.addLyteComponents(obb);
        let instance = HTMLPurifier(obb);
        instance._GLOBAL_TAGS = obb.GLOBAL_TAGS;
        instance._GLOBAL_ATTRIBUTES = obb.GLOBAL_ATTRIBUTES;
        instance._FORBID_TAGS = obb.FORBID_TAGS;
        instance._FORBID_ATTR = obb.FORBID_ATTR;
        return instance;
    },
    sanitizeWithConfig : function(html , additionalObject, instance){
        this.addGlobalObject(instance,additionalObject);
        let clean = instance.sanitize(html);
        this.removeGlobalObject(instance,additionalObject);
        return clean;
    },
    initializeConfig : function(obb){
        if (!obb.GLOBAL_ATTRIBUTES) {
            obb.GLOBAL_ATTRIBUTES = [];
        }
        if (!obb.FORBID_TAGS) {
            obb.FORBID_TAGS = [];
        }
        if (!obb.FORBID_ATTR) {
            obb.FORBID_ATTR = [];
        }
        if (!obb.GLOBAL_TAGS) {
            obb.GLOBAL_TAGS = [];
      }
    },
    addConfig : function(obb){
        this.defaultAttr.forEach(function(item){
            obb.GLOBAL_ATTRIBUTES.push(item);
        })
        this.defaultTags.forEach(function(item){
            obb.GLOBAL_TAGS.push(item);
        })
    },
    removeConfig : function(obb){
        if(obb && Object.keys(obb) && Object.keys(obb).length > 0){
            if(obb.GLOBAL_ATTRIBUTES && obb.GLOBAL_ATTRIBUTES.length > 0){
                this.defaultAttr.forEach(function(item){
                    var index = obb.GLOBAL_ATTRIBUTES.indexOf(item);
                    if(index != -1){
                        obb.GLOBAL_ATTRIBUTES.splice(index,1);
                    }
                })
            }
            if(obb.GLOBAL_TAGS && obb.GLOBAL_TAGS.length > 0){
                this.defaultTags.forEach(function(item){
                    var index = obb.GLOBAL_TAGS.indexOf(item);
                    if(index != -1){
                        obb.GLOBAL_TAGS.splice(index,1);
                    }
                })
            }
        }
    },
    addLyteComponents : function(obb){
        var globalTagArr = Array.from(obb.GLOBAL_TAGS);
        var attr = [];
        for(var a=0; a<globalTagArr.length; a++){
            let regComps = ComponentRegistry._registeredCommonClass;
            let rawComps = ComponentRegistry._registeredCommonCeClass;
            if(regComps[globalTagArr[a]]){
                attr = regComps[globalTagArr[a]].observedAttributes;
            }else if(rawComps[globalTagArr[a]]){
                if(rawComps[globalTagArr[a]].observedAttributes){
                    attr = rawComps[globalTagArr[a]].observedAttributes;
                }
            }
            for(var i=0; i<attr.length; i++){
                if(obb.GLOBAL_ATTRIBUTES.indexOf(attr[i]) == -1){
                    obb.GLOBAL_ATTRIBUTES.push(attr[i]);
                }
            }
        }
    },
    addGlobalObject : function(instanceObj,additionalObj){
        for (var property in additionalObj) {
                if(Array.isArray(additionalObj[property])){
                    additionalObj[property].forEach(function(item){
                        if(instanceObj["_"+property].indexOf(item) == -1){
                            instanceObj["_"+property].push(item);
                        }
                    });
            }
        }
    },
    removeGlobalObject : function(instanceObj,additionalObj){
        for (var property in additionalObj) {
            if(Array.isArray(additionalObj[property])){
                additionalObj[property].forEach(function(item){
                    var index = instanceObj["_"+property].indexOf(item);
                    if(index != -1){
                        instanceObj["_"+property].splice(index,1);
                    }
                });
        }
        };
    }
}
class Sanitizer{
    constructor(config){
        this._sanitzer = Security.createSanitizer(config);
    }
    clean(config){
        if(typeof config == "string"){
            config = {
                html : config,
                instance : this._sanitzer
            }
        }else{
            config.instance = this._sanitzer;
        }
        return Security.sanitizeHTML(config);
    }
    sanitize(html){
        this.clean(html);
    }
}
// if(!window.__lyteConfig){
//     window.__lyteConfig = {
//         _definedBeforeBridging : [],
//         _alreadyDefinedBeforeBridging : [],
//         v4 : true,
//         Sanitizer : Sanitizer,
//         _pendingV3Components : {},
//         _firstRegisteredComp : {}
//     }
// }else{
    window.__lyteConfig.Sanitizer = Sanitizer;
// }
export {Security , Sanitizer}
//migarte changes
// Lyte.Security.ignoreSanitizer -> throw error - sanitizing HTML is mandatory
// Lyte.Security.createSanitizer() -> new Sanitizer()
//ignorei18n_end