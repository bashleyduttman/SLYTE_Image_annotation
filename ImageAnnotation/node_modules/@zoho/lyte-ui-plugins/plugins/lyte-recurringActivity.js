
/** Other Keys 
 * st = st
 * nd = nd
 * rd = rd
 * th = th
 * sunday = Sunday
 * monday = Monday
 * tuesday = Tuesday
 * wednesday = Wednesday
 * thursday = Thursday
 * friday = Friday
 * saterday = Saterday
 * first = First
 * second = second
 * third = Third
 * fourth = Fourth
 * fifth = Fifth
 * last = Last
 */


/** Recurring Keys 
 * 
 * --------------------------------------- DAILY START ---------------------------------------
 * 
 * lyte.recurring.daily.neverending = Every day from {0} 
 * Sample - Every day from May 20th, 2023
 * 
 * lyte.recurring.daily.count = Every day from {0}, {1} times 
 * Sample - Every day from May 20th, 2023, 10 times
 * 
 * lyte.recurring.daily.until = Every day from {0} until {1} 
 * Smaple - Every day from May 20th, 2023 until may 29th, 2023
 * 
 * lyte.recurring.daily.interval.neverending = Every {0} day from {1} 
 * Sample - Every 2nd day from May 20th, 2023
 * 
 * lyte.recurring.daily.interval.count = Every {0} day from {1}, {2} times 
 * Sample - Every 2nd day from May 20th, 2023, 10 times
 * 
 * lyte.recurring.daily.interval.until = Every {0} day from {1} until {2}
 * Sample - Every 2nd day from May 20th, 2024 until May 29th, 2023
 * 
 * --------------------------------------- DAILY END ---------------------------------------
 * 
 * --------------------------------------- WEEKLY START ---------------------------------------
 * 
 * lyte.recurring.weekly.single.byday.neverending = Every {0} from {1}
 * Sample - Every Sunday from May 20th, 2023
 * 
 * lyte.recurring.weekly.multiple.byday.neverending = Every {0} and {1} from {2}
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023
 * 
 * lyte.recurring.weekly.single.byday.count = Every {0} from {1}, {2} times
 * Sample - Every Sunday from May 20th, 2023, 10 times
 * 
 * lyte.recurring.weekly.multiple.byday.count = Every {0} and {1} from {2} , {3} times
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023, 10 times
 * 
 * lyte.recurring.weekly.single.byday.until = Every {0} from {1} until {2}
 * Sample - Every Sunday from May 20th, 2023, until May 27th, 2023
 * 
 * lyte.recurring.weekly.multiple.byday.until = Every {0} and {1} from {2} until {3}
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023 until May 27th, 2023
 * 
 * lyte.recurring.weekly.interval.single.byday.neverending = Every {0} week on {1} from {2}
 * Sample - Every 2nd week on Tuesday from May 20th, 2023
 * 
 * lyte.recurring.weekly.interval.multiple.byday.neverending = Every {0} week on {1} and {2} from {3}
 * Sample - Every 2nd week on Tuesday, Wednesday and Friday from May 20th, 2023
 * 
 * lyte.recurring.weekly.interval.single.byday.count = Every {0} week on {1} from {2}, {3} times
 * Sample - Every 2nd week on Tuesday from May 20th, 2023, 10 times
 * 
 * lyte.recurring.weekly.interval.multiple.byday.count = Every {0} week on {1} and {2} from {3} , {4} times
 * Sample - Every 2nd week on Tuesday from May 20th, 2023 until May 27th, 2023
 * 
 * lyte.recurring.weekly.interval.single.byday.until = Every {0} week on {1} from {2} until {3}
 * Sample - Every 2nd week on Sunday from May 20th, 2023 until May 27th, 2023
 * 
 * lyte.recurring.weekly.interval.multiple.byday.until = Every {0} week on {1} and {2} from {2} until {4}
 * Sample - Every 2nd week on Monday, Tuesday and Thursday from May 20th, 2023 until May 27th, 2023
 * 
 * --------------------------------------- WEEKLY END ---------------------------------------
 * 
 * --------------------------------------- MONTHLY START ---------------------------------------
 * lyte.recurring.monthly.bymonthday.nerverEnding = Every {0} day of the month from {1}
 * Samle - Every 20th day of the month from May 20th, 2023
 * 
 * lyte.recurring.monthly.bymonthday.count = Every {0} day of the month from {1}, {2} times
 * Sample - Every 20th day of the month from May 20th, 2023, 10 times
 * 
 * lyte.recurring.monthly.bymonthday.until = Every {0} day of the month from {1} until {2}
 * Sample - Every 20th day of the month from May 20th, 2023 until June 20th, 2023
 * 
 * lyte.recurring.monthly.interval.bymonthday.nerverEnding = {0} of every {1} month from {2}
 * Sample - 20th of every 2nd month from May 20th, 2023
 * 
 * lyte.recurring.monthly.interval.bymonthday.count = {0} of every {1} month from {2}, {3} times
 * Sample - 20th of every 2nd month from May 20th, 2023, 10 times
 * 
 * lyte.recurring.interval.monthly.bymonthday.until = {0} of every {1} month from {2} until {3}
 * Sample - 20th of every 2nd month from May 20th, 2023 until June 20th, 2023
 * 
 * lyte.recurring.monthly.bysetPos.nerverEnding = Every {0} {1} of the month from {2}
 * Sample - Every First Sunday of the month from May 20th, 2023
 * 
 * lyte.recurring.monthly.interval.bysetPos.nerverEnding = {0} {1} of every {2} month from {3}
 * Sample - First Sunday of every 2nd month from May 20th, 2023
 * 
 * lyte.recurring.monthly.bysetPos.count = Every {0} {1} of the month from {2}, {3} times
 * Sample - Every First Sunday of the month from May 20th, 2023, 10 times
 * 
 * lyte.recurring.monthly.interval.bysetPos.count = {0} {1} of every {2} month from {3}, {4} times
 * Sample - First Sunday of every 2nd month from May 20th, 2023, 10 times
 * 
 * lyte.recurring.monthly.bysetPos.until = Every {0} {1} of the month from {2} until {3}
 * Sample - Every Frist Sunday of the month from May 20th, 2023 until June 20th, 2023
 * 
 * lyte.recurring.monthly.interval.bysetPos.until = {0} {1} of every {2} month from {3} until {4}
 * Sample - First Sunday of every 2nd month from May 20th, 2023 until June 20th, 2023
 * 
 * --------------------------------------- MONTHLY END ---------------------------------------
 * 
 * --------------------------------------- YEARLY START ---------------------------------------
 * lyte.recurring.yearly.bymonthday.nerverEnding =  Every years on {1} {2} from {3}
 * Sample - Every year on 20th May from May 20th, 2023
 * 
 * lyte.recurring.yearly.bymonthday.count = Every year on {0} {1} from {2} , {3} times 
 * Sample - Every Year on 20th May from May 20th, 2023, 10 times
 * 
 * lyte.recurring.yearly.bymonthday.until =  Every year on {0} {1} from {2} until {3}
 * Sample - Every Year on 20th May from May 20th, 2023 until May 20th, 2024
 * 
 * lyte.recurring.yearly.interval.bymonthday.nerverEnding = {0} {1} of every {3} year from {4}
 * Sample - May 20th of every 2nd year from May 20th, 2023
 * 
 * lyte.recurring.yearly.interval.bymonthday.count = {0} {1} of every {3} year from {4}, {5} times
 * Sample - May 20th of every 2nd year from May 20th, 2023, 10 times
 * 
 * lyte.recurring.yearly.interval.bymonthday.until = {0} {1} of every {3} year from {4} until {5}
 * Sample - May 20th of every 2nd year from May 20th, 2023 until May 20th, 2024
 * 
 * lyte.recurring.yearly.bysetPos.nerverEnding = Every year on {0} {1} of {2} from {3}
 * Sample - Every year on First Sunday of May from May 20th, 2023
 * 
 * lyte.recurring.yearly.interval.bysetPos.nerverEnding = {0} {1} of {2} of every {3} year from {4}
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023
 * 
 * lyte.recurring.yearly.bysetPos.count = Every year on {0} {1} of {2} from {3} , {4} times
 * Sample - Every year on First Sunday of May from May 20th, 2023, 10 times
 * 
 * lyte.recurring.yearly.interval.bysetPos.count = {0} {1} of {2} of every {3} year from {4}, {5} times
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023, 10 times
 * 
 * lyte.recurring.yearly.bysetPos.until = Every year on {0} {1} of {2} from {3} until {4}
 * Sample - Every year on First Sunday of May from May 20th, 2023 until May 20th, 2024
 * 
 * lyte.recurring.yearly.interval.bysetPos.until = {0} {1} of {2} of every {3} year from {4} until {5}
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023 until May 20th, 2024
 * 
 * --------------------------------------- YEARLY END ---------------------------------------
 */

;( function( cb ){
	if( typeof define == "function" && define.amd ){
		define( [ "@zoho/lyte-dom" ], cb );
	} else {
		cb( window.$L );
	}
} )( function( $L ){
    if( $L ){


        /* Internal Function Start */

        function momentWrapper( date, format ){
          var momentData = {};

          if( this.i18n ){
            momentData.i18n = true;
          }

          if( this.timeZone ){
            momentData.timezone = timezone;
          }

          return $L.moment( date, format, momentData);
        }

        function getFormat( moment, format ){
          if( this.i18n ){
            return moment.i18n(format);
          } 
          return moment.format(format);
        }
        
        function compareValidityArr(limitArr, value) {
            var loopLength = limitArr.length,
                found = false;

            if (!Array.isArray(value)) {
                for (var i = 0; i < loopLength; i++) {
                    var valueToCompare;
                    if (typeof value === "string") {
                        valueToCompare = value.toUpperCase();
                    } else {
                        valueToCompare = value;
                    }
                    if (valueToCompare === limitArr[i]) {
                        found = true;
                        break;
                    }
                }
            } else {
                var foundValueCount = 0;
                var secondLoopLen = value.length;
                for (var i = 0; i < loopLength; i++) {
                    for (var j = 0; j < secondLoopLen; j++) {
                        if (value[j].toUpperCase() === limitArr[i]) {
                            foundValueCount++;
                            break;
                        }
                    }
                }
                if (foundValueCount === secondLoopLen) {
                    found = true;
                }
            }

            return found;
        }

        function compareValidityLimit(limits, value) {
            if (value >= limits.lower_limit && value <= limits.upper_limit) {
                return true;
            }
            return false;
        }

        function checkRuleValidity(rRule, limits, dueDate) {
            
            var errorObject = {
              errorCode : null,
              errorMsg : ""
            };

            if (!rRule || typeof rRule !== 'object') {
                errorObject.errorCode = 1,
                errorObject.errorMsg = "Invalid data type";
                isValid = false;
            } else {

                if (!compareValidityArr(limits.frequencys, rRule.frequency)) {
                    errorObject.errorCode = 2,
                    errorObject.errorMsg = "Frequency not found";
                    this._errorDetails = errorObject;
                    return "";
                } 

                if (rRule.interval && !compareValidityLimit(limits.interval, rRule.interval)) {
                    errorObject.errorCode = 3,
                    errorObject.errorMsg = "Interval not in rage of limits";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.byMonth && !compareValidityLimit(limits.byMonth, rRule.byMonth)) {
                    errorObject.errorCode = 4,
                    errorObject.errorMsg = "ByMonth not in rage of limits";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.byMonthDay && !compareValidityLimit(limits.byMonthDay, rRule.byMonthDay)) {
                    errorObject.errorCode = 5,
                    errorObject.errorMsg = "ByMonthDay not in rage of limits";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.byDay && !compareValidityArr(limits.byDay, rRule.byDay)) {
                    errorObject.errorCode = 6,
                    errorObject.errorMsg = "Invalid ByDays provided";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.bySetPos && !compareValidityArr(limits.bySetPos, rRule.bySetPos)) {
                    errorObject.errorCode = 7,
                    errorObject.errorMsg = "BySetPos not found";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.count && !compareValidityLimit(limits.count, rRule.count)) {
                    errorObject.errorCode = 8,
                    errorObject.errorMsg = "Count not in rage of limits";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.frequency.toUpperCase() === "DAILY" && (rRule.byMonth || rRule.byMonthDay || rRule.byDay && rRule.byDay.length || rRule.bySetPos)) {
                    errorObject.errorCode = 9,
                    errorObject.errorMsg = "Invalid Format";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.frequency.toUpperCase() === "WEEKLY" && (rRule.byMonth || rRule.byMonthDay || rRule.bySetPos)) {
                    errorObject.errorCode = 9,
                    errorObject.errorMsg = "Invalid Format";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.frequency.toUpperCase() === "MONTHLY" && ((!rRule.byDay || !rRule.byDay.length) && rRule.bySetPos || rRule.byMonthDay && rRule.byDay && rRule.byDay.length || rRule.byMonthDay && rRule.bySetPos)) {
                    errorObject.errorCode = 9,
                    errorObject.errorMsg = "Invalid Format";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.frequency.toUpperCase() === "YEARLY" && (rRule.byDay && rRule.byDay.length && !rRule.bySetPos || (!rRule.byDay || !rRule.byDay.length) && rRule.bySetPos || rRule.byMonthDay && rRule.byDay && rRule.byDay.length || rRule.byMonthDay && rRule.bySetPos)) {
                    errorObject.errorCode = 9,
                    errorObject.errorMsg = "Invalid Format";
                    this._errorDetails = errorObject;
                    return "";
                }

                if (rRule.byMonthDay) {
                    var dueDateClone = momentWrapper.call(this, dueDate),
                    monthCount = parseInt(dueDateClone.endOf('month').format("D")),
                    dueDateAsMonth = dueDateClone.format('MMMM');

                    if (dueDateAsMonth === 'February' && rRule.byMonthDay > 29 || dueDateAsMonth !== 'February' && rRule.byMonthDay > monthCount) {
                        errorObject.errorCode = 9,
                        errorObject.errorMsg = "Invalid Format";
                        this._errorDetails = errorObject;
                        return "";
                    }
                }

                if(rRule.until && rRule.until !== -1){
                   var untilMoment = momentWrapper.call(this, rRule.until, this.dateFormat);
                   if( dueDate.fromNow(untilMoment).past && !dueDate.isSame(untilMoment)){
                      errorObject.errorCode = 10,
                      errorObject.errorMsg = "Until from rule is in the past compared to dueDate";
                      this._errorDetails = errorObject;
                      return "";
                   }
                }

                return "Valid RRule";
            }
        }

        function checkLimits(limits, dueDate) {
            var output = {};
            if (limits.frequencys) {
                output.frequencys = limits.frequencys;
            } else {
                output.frequencys = ["DAILY", "WEEKLY", "MONTHLY", "YEARLY"];
            }

            if (limits.interval) {
                output.interval = limits.interval;
            } else {
                output.interval = {
                    lower_limit: 1,
                    upper_limit: 99
                }
            }

            if (limits.byMonth) {
                output.byMonth = limits.byMonth;
            } else {
                output.byMonth = {
                    lower_limit: 1,
                    upper_limit: 12
                }
            }

            var endOfMonthDate = parseInt(dueDate.endOf('month').format("DD"));
            output.byMonthDay = {
                lower_limit: 1,
                upper_limit: endOfMonthDate
            }

            if (limits.byDay) {
                output.byDay = limits.byDay;
            } else {
                output.byDay = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
            }

            if (limits.bySetPos) {
                output.bySetPos = limits.bySetPos;
            } else {
                output.bySetPos = [1, 2, 3, 4, 5, -1];
            }

            if (limits.count) {
                output.count = limits.count;
            } else {
                output.count = {
                    lower_limit: 1,
                    upper_limit: 99
                }
            }
            output.neverEndingLimit = 10;
            return output;
        }

        function incrementDate(mom) {
            var rRule = this._rRule,
                valueToSkip = 1,
                interval = rRule.interval;
            valueToSkip = valueToSkip * interval;
            switch (rRule.frequency.toUpperCase()) {
                case "DAILY":
                    mom.modify(valueToSkip, "day");
                    break;
                case "WEEKLY":
                    mom.modify(valueToSkip, "week");
                    break;
                case "MONTHLY":
                    var freq = rRule.frequency.toUpperCase();
                    if ((freq === "MONTHLY" || freq === "YEARLY") && rRule.byDay && rRule.byDay.length && rRule.bySetPos === 5) {
                        mom.modify(1, "month");
                    } else {
                        mom.modify(valueToSkip, "month");
                    }
                    break;
                case "YEARLY":
                    //Currently modify of fullYear does not work so converting to month.
                    //mom.modify(valueToSkip * 12, "fullYear");

                    //Increment yearly hould increment by x years where x is interval. Except for 29th feb it should be every x leap years.
                    if(!this._isLeapYearIncrement){
                        mom.modify(valueToSkip * 12, "month");
                    } else {
                        var foundLeap = false, leapCount = 0;
                        while(!foundLeap){
                            mom.modify(12, "month");
                            var momClone = momentWrapper.call(this, mom);
                            if(momClone.endOf('month').format('DD') === "29"){
                                leapCount++;
                            }
                            if(leapCount !== 0 && leapCount%valueToSkip === 0){
                                break;
                            }
                        }
                    }
                    break;
            }
            return mom;
        }

        function constructOccurances() {
            var output = [],
                currDueDate = momentWrapper.call(this, this.firstOccurance),
                upper_limit,
                rRule = this._rRule,
                limit_Count = 0,
                fifthOccurancesCount = 0,
                fifthOccuranceCondition,
                freq = rRule.frequency.toUpperCase(),
                outputFormat = this.summaryDateFormat;
                
            fifthOccuranceCondition = (freq === "MONTHLY" || freq === "YEARLY") && rRule.byDay && rRule.byDay.length && rRule.bySetPos === 5;

            if (freq === "WEEKLY" && rRule.byDay && rRule.byDay.length) {
                var occuranceMoment = getCurrOccurance.call(this, momentWrapper.call(this, currDueDate)),
                    occuranceMomArrLen = occuranceMoment.length;
                for (var k = 0; k < occuranceMomArrLen; k++) {
                    output.push( { moment : occuranceMoment[k], date : getFormat.call(this, occuranceMoment[k], outputFormat) } );
                }
            } else {
                output.push( { moment : this.firstOccurance, date : getFormat.call(this, this.firstOccurance, outputFormat) } );
            }
            limit_Count = output.length;
            if (fifthOccuranceCondition) {
                fifthOccurancesCount++;
            }
            incrementDate.call(this, currDueDate);
            currDueDate = momentWrapper.call(this, currDueDate);

            if (rRule.count || rRule.until === -1) {
                if (rRule.until === -1) {
                    upper_limit = this.limits.neverEndingLimit;
                } else {
                    upper_limit = rRule.count;
                }

                while (limit_Count < upper_limit) {
                    var occuranceMoment = getCurrOccurance.call(this, momentWrapper.call(this, currDueDate));
                    var firstOccuranceMoment;
                    if (freq === "WEEKLY" && rRule.byDay && rRule.byDay.length) {
                        var occuranceMomArrLen = occuranceMoment.length;
                        for (var k = 0; k < occuranceMomArrLen; k++) {
                            output.push( { moment : occuranceMoment[k], date : getFormat.call(this, occuranceMoment[k], outputFormat) } );
                            limit_Count++;
                            if (limit_Count >= upper_limit) {
                                break;
                            }
                        }
                        firstOccuranceMoment = occuranceMoment[0];
                    } else {
                        if (!fifthOccuranceCondition || fifthOccuranceCondition && !(fifthOccurancesCount % rRule.interval)) {
                            output.push( { moment : occuranceMoment, date : getFormat.call(this, occuranceMoment, outputFormat) } );
                            limit_Count++;
                        }
                        fifthOccurancesCount++;
                        firstOccuranceMoment = occuranceMoment;
                    }
                    incrementDate.call(this, firstOccuranceMoment);
                    currDueDate = momentWrapper.call(this, firstOccuranceMoment);
                }

            } else if (rRule.until !== -1) {
                var execute;
                if (this.firstOccurance.fromNow(momentWrapper.call(this, rRule.until, this.dateFormat)).past) {
                    execute = false;
                } else {
                    execute = true;
                }
                while (execute) {
                    var occuranceMoment = getCurrOccurance.call(this, momentWrapper.call(this, currDueDate));
                    if (freq === "WEEKLY" && rRule.byDay && rRule.byDay.length) {
                        var occuranceMomArrLen = occuranceMoment.length;
                        for (var k = 0; k < occuranceMomArrLen; k++) {
                            var occuranceMomentClone = momentWrapper.call(this, occuranceMoment[k]);
                            if (occuranceMomentClone.fromNow(momentWrapper.call(this, rRule.until, this.dateFormat)).past) {
                                execute = false;
                            } else {
                                output.push( { moment : occuranceMoment[k], date : getFormat.call(this, occuranceMoment[k], outputFormat) } );
                                execute = true;
                            }
                        }
                        if (execute) {
                            incrementDate.call(this, occuranceMoment[0]);
                            currDueDate = momentWrapper.call(this, occuranceMoment[0]);
                        }
                    } else {
                        var occuranceMomentClone = momentWrapper.call(this, occuranceMoment);
                        if (occuranceMomentClone.fromNow(momentWrapper.call(this, rRule.until, this.dateFormat)).past) {
                            execute = false;
                        } else {
                            if(!fifthOccuranceCondition || fifthOccuranceCondition && !(fifthOccurancesCount % rRule.interval)){
                                output.push( { moment : occuranceMoment, date : getFormat.call(this, occuranceMoment, outputFormat) } );
                            }
                            fifthOccurancesCount++;
                            incrementDate.call(this, occuranceMoment);
                            currDueDate = momentWrapper.call(this, occuranceMoment);
                            execute = true;
                        }
                    }
                }
            }
            return output;
        }

        function getCurrOccurance(dueDate, isFirstOccurance) {
            var rRule = this._rRule,
                returnValue;
            switch (rRule.frequency.toUpperCase()) {
                case "DAILY":
                    returnValue = dueDate;
                    break;
                case "WEEKLY":
                    returnValue = getWeeklyOccuranceDay.call(this, dueDate, isFirstOccurance);
                    break;
                case "MONTHLY":
                case "YEARLY":
                    returnValue = getMonthlyOccuranceDay.call(this, dueDate);
            }
            return returnValue;
        }

        function getWeeklyOccuranceDay(dueDate, isFirstOccurance) {
            var rRule = this._rRule,
                byDays = rRule.byDay ? rRule.byDay : [],
                loopLength = byDays.length,
                momClone = momentWrapper.call(this, dueDate),
                output = [];
                //,
                //momCloneEndofWeek = momentWrapper.call(this, momClone).endOf('week');

            if (loopLength) {
                for (var j = 0; j < 7; j++) {
                    for (var i = 0; i < loopLength; i++) {
                        if (byDays[i] === momClone.format("dd").toUpperCase()) {
                            output.push(momentWrapper.call(this, momClone));
                            if (isFirstOccurance) {
                                break;
                            }
                        }
                    }
                    momClone.modify(1, 'day');
                    // if (momClone.fromNow(momCloneEndofWeek).past) {
                    //     break;
                    // }
                    if (isFirstOccurance && output.length) {
                        break;
                    }
                }
                if (isFirstOccurance) {
                    return output[0];
                }
                return output;
            }
            return dueDate;
        }

        function getMonthlyOccuranceDay(dueDate) {
            var rRule = this._rRule,
                returnValue;

            if (!rRule.byMonthDay && rRule.byDay && rRule.byDay.length > 0 && rRule.bySetPos) {
                returnValue = getSetPosOccurance.call(this, dueDate, rRule.bySetPos, rRule.byDay[0], rRule.byMonth, 0, this.dueDate);
            } else if (rRule.byMonthDay && (!rRule.byDay || rRule.byDay.length === 0 || !rRule.bySetPos)) {
                returnValue = getMonthDayOccurance.call(this, dueDate, rRule.byMonthDay, rRule.byMonth);
            } else {
                if(!this._isLastDayOfFeb){
                    returnValue = dueDate;
                } else {
                    var dueDateClone = momentWrapper.call(this, dueDate);
                    if(dueDateClone.endOf('month').format("DD") === "29" && dueDateClone.endOf('month').format("MM") === "02"){
                        returnValue = dueDateClone;
                    } else {
                        returnValue = dueDate;
                    }
                }
            }

            return returnValue;
        }

        function getMonthDayOccurance(dueDate, monthDay, fixedMonth) {
            var momClone = momentWrapper.call(this, dueDate),
                endOfCurrMonth = parseInt(momClone.endOf('month').format('DD'));
            if (endOfCurrMonth >= monthDay) {
                if (parseInt(dueDate.format('DD')) <= monthDay) {
                    return dueDate.set('date', monthDay);
                }
            }
            dueDate.startOf('month');
            if (fixedMonth) {
                dueDate.modify(1, 'fullYear');
            } else {
                dueDate.modify(1, 'month');
            }

            return getMonthDayOccurance(dueDate, monthDay, fixedMonth);
        }

        function getSetPosOccurance(dueDate, bySetPos, byDay, fixedMonth, occuranceCount, originalDueDate) {
            var momClone = momentWrapper.call(this, dueDate),
                currMonth = momClone.format("M"),
                isFromPast;
            momClone.startOf('month');
            for (var i = 0; i < 7; i++) {
                if (momClone.format("dd").toUpperCase() === byDay) {
                    occuranceCount++;
                    if (occuranceCount === bySetPos) {
                        break;
                    }
                    break;
                } else {
                    momClone.modify(1, 'day');
                }
            }
            if (bySetPos !== -1) {
                if (bySetPos !== 1) {
                    //momClone.set("date", parseInt(momClone.format('D')) + (7 * (bySetPos - 1)));
                    momClone.modify(7 * (bySetPos - 1), "day");
                }
                isFromPast = checkIfPastDateForMonthlyYearly(momClone, originalDueDate, currMonth, fixedMonth);
                if(isFromPast.isPast){
                    return getSetPosOccurance.call(this, isFromPast.momClone, bySetPos, byDay, fixedMonth, 0, originalDueDate);
                } else {
                    return momClone;
                }
            } else {
                var momClone1 = momentWrapper.call(this, momClone);
                momClone1.modify(7 * (5 - 1), 'day');
                if (momClone1.format("M") !== currMonth) {
                    momClone.modify(7 * (4 - 1), 'day');
                    isFromPast = checkIfPastDateForMonthlyYearly(momClone, originalDueDate, currMonth, fixedMonth);
                    if(isFromPast.isPast){
                        return getSetPosOccurance.call(this, momClone, bySetPos, byDay, fixedMonth, 0, originalDueDate);
                    }
                    return momClone;
                }
                isFromPast = checkIfPastDateForMonthlyYearly(momClone1, originalDueDate, currMonth, fixedMonth);
                if(isFromPast.isPast){
                    return getSetPosOccurance.call(this, momClone1, bySetPos, byDay, fixedMonth, 0, originalDueDate);
                }
                return momClone1;
            }
        }

        function checkIfPastDateForMonthlyYearly(momClone, originalDueDate, currMonth, fixedMonth){
            var monthAsNumber = momClone.format("M");
            if (monthAsNumber !== currMonth || monthAsNumber === currMonth && !momClone.fromNow(originalDueDate).past && !momClone.isSame(originalDueDate)) {
                if (monthAsNumber !== currMonth) {
                    momClone = momClone.subtract(1, "month");
                }
                if (!fixedMonth) {
                    momClone = momClone.modify(1, "month");
                } else {
                    momClone = momClone.modify(1, 'fullYear');
                }
                return {
                    isPast : true,
                    momClone : momClone
                };
            } else {
                return {
                    isPast : false,
                    momClone : undefined
                };
            }
        }

        function handleEdgeCaseRules(rRule, dueDate){
            var newRule = {};
            for(var keys in rRule){
                newRule[keys] = rRule[keys];
            }

            if (rRule.frequency.toUpperCase() === "YEARLY"){
                var bySetPosCase = !rRule.byMonthDay && rRule.byDay && rRule.byDay.length > 0 && rRule.bySetPos;
                var byMonthDayCase = rRule.byMonthDay && (!rRule.byDay || rRule.byDay.length === 0 || !rRule.bySetPos);

                if (bySetPosCase || byMonthDayCase) {
                    if(!rRule.byMonth){
                        newRule.byMonth = parseInt(dueDate.format('MM'));
                    }
                    if(byMonthDayCase){
                        if(rRule.byMonthDay === 29 && dueDate.format("MM") === "02"){
                            this._isLeapYearIncrement = true;
                        }
                    }
                }

                if(!bySetPosCase && !byMonthDayCase){
                    if(dueDate.format("DD") === "29" && dueDate.format("MM") === "02"){
                        this._isLastDayOfFeb = true;
                    }
                }
            }

            return newRule;
        }

        function getRuleId(ruleObj){

            /*
                Rules :
                    1. Frequency is represented as a single letter denoting the freq.
                    2. interval is represented as single(S) or multiple(M).
                    3. byMonth is represented as boolean where 1 denotes byMonth is set and 0 means byMonth is not set.
                    4. byMonthDay is represented as boolean where 1 denotes byMonthDay is set and 0 means byMonthDay is not set.
                    5. byDay is dempted as single(S) or multiple(M) for Weekely based on the number of byDay. Also byDay is represented as boolean where 1 denotes byDay is set and 0 means byDay is not set.
                    6. bySetPos is represented as boolean where 1 denotes bySetPos is set and 0 means bySetPos is not set.
                    7. count is represented as boolean where 1 denotes count is set and 0 means count is not set.
                    8. until is represented by N for never ending, U for ends on date and as 0 for count.
            */

            var finalString = "" , freqType;
            //set Frequency
            var freqObj = {"DAILY":"D" , "WEEKLY":"W" , "MONTHLY":"M" , "YEARLY":"Y"};
            freqType = freqObj[ruleObj.frequency];
            finalString = finalString + freqType;

            //set Interval
            if(ruleObj.interval === 1){
                finalString = finalString + "S";
            }
            else{
                finalString = finalString + "M";
            }

            //set ByMonth
            if(ruleObj.byMonth){
                finalString = finalString + "1";
            }
            else{
                finalString = finalString + "0";
            }

            //set ByMonthDay
            if(ruleObj.byMonthDay){
                finalString = finalString + "1";
            }
            else{
                finalString = finalString + "0";
            }

            //set ByDay
            if(ruleObj.byDay){
                if(ruleObj.frequency !== "WEEKLY"){
                    finalString = finalString + "1";
                } else {
                    if(ruleObj.frequency === "WEEKLY"  && ruleObj.byDay.length === 1){
                        finalString = finalString + "S";
                    }
                    else{
                        finalString = finalString + "M";
                    }
                }
            }
            else{
                finalString = finalString + "0";
            }

            //set BysetPos
            if(ruleObj.bySetPos){
                finalString = finalString + "1";
            }
            else{
                finalString = finalString + "0";
            }

            //set Count
            if(ruleObj.count){
                finalString = finalString + "1";
            }
            else{
                finalString = finalString + "0";
            }

            //set Until
            if(ruleObj.until && !ruleObj.count){
                if(ruleObj.until === -1){
                    finalString = finalString + "N";
                } else {
                    finalString = finalString + "U";
                }
            }
            else{
                finalString = finalString + "0";
            }

            return finalString;
        }
        function getOrdinalOfNumber(num) {
          var ten = num % 10,
              hun = num % 100;
          if (ten === 1 && hun !== 11) {
              return num + _lyteUiUtils.i18n("st");
          }
          if (ten === 2 && hun !== 12) {
              return num + _lyteUiUtils.i18n("nd");
          }
          if (ten === 3 && hun !== 13) {
              return num + _lyteUiUtils.i18n("rd");
          }
          return num + _lyteUiUtils.i18n("th");
        }
        function getSortedWeekelyValues(byDays){
          var output = [];
          for(var keys in _dayOfWeekMapping) {
            if(byDays.includes(keys)){
              output.push(_dayOfWeekMapping[keys]);
            }
          }
          return output;
        }
        function getWeekelyMultipleBydayStructure(){
          var output = {},
          rRule = this._rRule,
          sortedByDay = getSortedWeekelyValues.call(this,rRule.byDays),
          sortedByDayLen = sortedByDay.length;
	        output.suffix = sortedByDay[sortedByDayLen - 1];
	        output.prefix = sortedByDays.splice(0, sortedByDayLen - 1).join();
          return output;
        }

        function constructSummary(){
          var ruleid = this.ruleId,
          i18nKey,
          args = [],
          rRule = this._rRule,
          firstOccurance = this.firstOccurance,
          outputFormat = this.summaryDateFormat;

          switch(ruleid){
            case "DS00000N" :
              i18nKey = "lyte.recurring.daily.neverending";
              args.push(firstOccurance.format(outputFormat));
              break;
            case "DS000010" :
              i18nKey = "lyte.recurring.daily.count";
              args.push(firstOccurance.format(outputFormat))
              args.push(rRule.count);
              break;
            case "DS00000U" :
              i18nKey = "lyte.recurring.daily.until";
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "DM00000N" :
              i18nKey = "lyte.recurring.daily.interval.neverending";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "DM000010" :
              i18nKey = "lyte.recurring.daily.interval.count";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "DM00000U" :
              i18nKey = "lyte.recurring.daily.interval.until";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "WS00000N" :
            case "WS00S00N" :
              i18nKey = "lyte.recurring.weekly.single.byday.neverending";
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat));
              break;
            case "WS00M00N" :
              i18nKey = "lyte.recurring.weekly.multiple.byday.neverending";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat))
              break;
            case "WS000010" :
            case "WS00S010" :
              i18nKey = "lyte.recurring.weekly.single.byday.count";
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat))
              args.push(rRule.count);
              break;
            case "WS00M010" :
              i18nKey = "lyte.recurring.weekly.multiple.byday.count";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat))
              args.push(rRule.count);
              break;
            case "WS00000U" :
            case "WS00S00U" :
              i18nKey = "lyte.recurring.weekly.single.byday.until";
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat))
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "WS00M00U" :
              i18nKey = "lyte.recurring.weekly.multiple.byday.until";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat))
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "WM00000N" :
            case "WM00S00N" :
              i18nKey = "lyte.recurring.weekly.interval.single.byday.neverending";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat));
              break;
            case "WM00M00N" :
              i18nKey = "lyte.recurring.weekly.interval.multiple.byday.neverending";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat))
              break;
            case "WM000010" :
            case "WM00S010" :
              i18nKey = "lyte.recurring.weekly.interval.single.byday.count";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat))
              args.push(rRule.count);
              break;
            case "WM00M010" :
              i18nKey = "lyte.recurring.weekly.interval.multiple.byday.count";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat))
              args.push(rRule.count);
              break;
            case "WM00000U" :
            case "WM00S00U" :
              i18nKey = "lyte.recurring.weekly.interval.single.byday.until";
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]);
              args.push(firstOccurance.format(outputFormat))
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "WM00M00U" :
              i18nKey = "lyte.recurring.weekly.interval.multiple.byday.until";
              var weekelyMultipleByDaysOutput = getWeekelyMultipleBydayStructure.call(this);
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(weekelyMultipleByDaysOutput.prefix);
              args.push(weekelyMultipleByDaysOutput.suffix);
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "MS00000N" :
            case "MS01000N" :
              i18nKey = "lyte.recurring.monthly.bymonthday.nerverEnding";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "MS000010" :
            case "MS010010" :
              i18nKey = "lyte.recurring.monthly.bymonthday.count";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "MS00000U" :
            case "MS01000U" :
              i18nKey = "lyte.recurring.monthly.bymonthday.until";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "MM00000N" :
            case "MM01000N" :
              i18nKey = "lyte.recurring.monthly.interval.bymonthday.nerverEnding";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "MM000010" :
            case "MM010010" :
              i18nKey = "lyte.recurring.monthly.interval.bymonthday.count";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "MM00000U" :
            case "MM01000U" :
              i18nKey = "lyte.recurring.interval.monthly.bymonthday.until";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "MS00110N" :
              i18nKey = "lyte.recurring.monthly.bysetPos.nerverEnding";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "MM00110N" :
              i18nKey = "lyte.recurring.monthly.interval.bysetPos.nerverEnding";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "MS001110" :
              i18nKey = "lyte.recurring.monthly.bysetPos.count";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "MM001110" :
              i18nKey = "lyte.recurring.monthly.interval.bysetPos.count";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "MS00110U" :
              i18nKey = "lyte.recurring.monthly.bysetPos.until";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "MM00110U" :
              i18nKey = "lyte.recurring.monthly.interval.bysetPos.until";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(this.getOrdinalOfNumber(ruleObj.interval));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "YS00000N" :
            case "YS11000N" :
              i18nKey = "lyte.recurring.yearly.bymonthday.nerverEnding";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "YS000010" :
            case "YS110010" :
              i18nKey = "lyte.recurring.yearly.bymonthday.count";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "YS00000U" :
            case "YS11000U" :
              i18nKey = "lyte.recurring.yearly.bymonthday.until";
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "YM00000N" :
            case "YM11000N" :
              i18nKey = "lyte.recurring.yearly.interval.bymonthday.nerverEnding";
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "YM000010" :
            case "YM110010" :
              i18nKey = "lyte.recurring.yearly.interval.bymonthday.count";
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "YM00000U" :
            case "YM11000U" :
              i18nKey = "lyte.recurring.yearly.interval.bymonthday.until";
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(this.getOrdinalOfNumber(parseInt(firstOccurance.format("D"))));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "YS10110N" :
              i18nKey = "lyte.recurring.yearly.bysetPos.nerverEnding";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "YM10110N" :
              i18nKey = "lyte.recurring.yearly.interval.bysetPos.nerverEnding";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(firstOccurance.format(outputFormat));
              break;
            case "YS101110" :
              i18nKey = "lyte.recurring.yearly.bysetPos.count";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(rRule.count);
              break;
            case "YM101110" :
              i18nKey = "lyte.recurring.yearly.interval.bysetPos.count";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(rRule.count);
              break;
            case "YS10110U" :
              i18nKey = "lyte.recurring.yearly.bysetPos.until";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
            case "YM10110U" :
              i18nKey = "lyte.recurring.yearly.interval.bysetPos.until";
              args.push(_bySetPosMapping(ruleObj.bySetPos));
              args.push(_dayOfWeekMapping(_dayOfWeekMapping[firstOccurance.format("dd").toUpperCase()]));
              args.push(_lyteUiUtils.i18n(firstOccurance.format("dddd")));
              args.push(firstOccurance.format(outputFormat));
              args.push(this.getOrdinalOfNumber(parseInt(rRule.interval)));
              args.push(momentWrapper.call(this, rRule.until).format(outputFormat));
              break;
          }
          return _lyteUiUtils.i18n(i18nKey,args);
        }

        /* Internal Function End */

        function getRecurringActivity(details) {
            this.rRule = details.rRule;
            this.summaryDateFormat = details.summaryDateFormat ? details.summaryDateFormat : "YYYY-MM-DDTHH:mm:ssZ";
            this.dateFormat = details.dateFormat ? details.dateFormat : "MMM Do, YYYY";
            this.isI18n = details.isI18n ? details.isI18n : false;
            this.timezone = details.timezone ? details.timezone : undefined;
            this.dueDate = details.dueDate ? momentWrapper.call(this, details.dueDate, this.dateFormat) : momentWrapper.call(this);
            this.limits = checkLimits(details.limits ? details.limits : {}, momentWrapper.call(this.dueDate));
            this._errorDetails = undefined;
            this._isValid = checkRuleValidity.call(this, details.rRule, this.limits, momentWrapper.call(this, this.dueDate)) === "Valid RRule" ? true : false;
            if (this._isValid) {
                this._rRule = handleEdgeCaseRules.call(this, this.rRule, this.dueDate);
                this.firstOccurance = getCurrOccurance.call(this, momentWrapper.call(this, this.dueDate), true);
                this.ruleId = getRuleId.call(this, this._rRule);

                if(this.rRule.until && this.rRule.until !== -1){
                  var untilMoment = momentWrapper.call(this, this.rRule.until, this.dateFormat);
                  if( this.firstOccurance.fromNow(untilMoment).past && !this.firstOccurance.isSame(untilMoment)){
                    this._errorDetails = {
                      errorCode : 11,
                      errorMsg : "Until from rule is in the past compared to first occurance"
                    }
                    this._isValid = false;
                  }
                }
            }

            /**
             * 
             * - If until is lesser than dueDate its invalid 
             * - If first occurance is lesser than dueDate then its invalid
             */
        }

        /* Set prototype of lazyLoad Class Start */
        getRecurringActivity.prototype = {
            _rRule: {},
            _isLastDayOfFeb: false,
            _isLeapYearIncrement: false,
            getSummary: function () {
                if (this._isValid) {
                    return constructSummary.call(this);
                }
                return
            },
            getOccurances: function () {
                if (this._isValid) {
                    return constructOccurances.call(this);
                }
                return
            },
            isValid: function(){
                return this._isValid;
            },
            getError: function(){
                return this._errorDetails;
            },
            getBySetOfWeek: function(){
                return this.getBySetOfWeek.call(this);
            },
            _dayOfWeekMapping : {
              "MO" : _lyteUiUtils.i18n("monday"),
              "TU" : _lyteUiUtils.i18n("tuesday"),
              "WE" : _lyteUiUtils.i18n("wednesday"),
              "TH" : _lyteUiUtils.i18n("thursday"),
              "FR" : _lyteUiUtils.i18n("friday"),
              "SA" : _lyteUiUtils.i18n("saterday"),
              "SU" : _lyteUiUtils.i18n("sunday")
            },
            _bySetPosMapping : {
              "1" : _lyteUiUtils.i18n("First"),
              "2" : _lyteUiUtils.i18n("Second"),
              "3" : _lyteUiUtils.i18n("Third"),
              "4" : _lyteUiUtils.i18n("Fourth"),
              "5" : _lyteUiUtils.i18n("lowercasefifth"),
              "-1" : _lyteUiUtils.i18n("Last")
            }
        }
        /* Set prototype of lazyLoad Class End */

        $L.reccur = function (details) {
            return new getRecurringActivity(details);
        }
    }
});


/** Recurring I18n Keys
 *
 * --------------------------------------- DAILY START ---------------------------------------
 *
 * lyte.recurring.daily.neverending = Every day from {0}
 * Sample - Every day from May 20th, 2023
 *
 * lyte.recurring.daily.count = Every day from {0}, {1} times
 * Sample - Every day from May 20th, 2023, 10 times
 *
 * lyte.recurring.daily.until = Every day from {0} until {1}
 * Smaple - Every day from May 20th, 2023 until may 29th, 2023
 *
 * lyte.recurring.daily.interval.neverending = Every {0} day from {1}
 * Sample - Every 2nd day from May 20th, 2023
 *
 * lyte.recurring.daily.interval.count = Every {0} day from {1}, {2} times
 * Sample - Every 2nd day from May 20th, 2023, 10 times
 *
 * lyte.recurring.daily.interval.until = Every {0} day from {1} until {2}
 * Sample - Every 2nd day from May 20th, 2024 until May 29th, 2023
 *
 * --------------------------------------- DAILY END ---------------------------------------
 *
 * --------------------------------------- WEEKLY START ---------------------------------------
 *
 * lyte.recurring.weekly.single.byday.neverending = Every {0} from {1}
 * Sample - Every Sunday from May 20th, 2023
 *
 * lyte.recurring.weekly.multiple.byday.neverending = Every {0} and {1} from {2}
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023
 *
 * lyte.recurring.weekly.single.byday.count = Every {0} from {1}, {2} times
 * Sample - Every Sunday from May 20th, 2023, 10 times
 *
 * lyte.recurring.weekly.multiple.byday.count = Every {0} and {1} from {2} , {3} times
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023, 10 times
 *
 * lyte.recurring.weekly.single.byday.until = Every {0} from {1} until {2}
 * Sample - Every Sunday from May 20th, 2023, until May 27th, 2023
 *
 * lyte.recurring.weekly.multiple.byday.until = Every {0} and {1} from {2} until {3}
 * Sample - Every Monday, Tuesday and Wednesday from May 20th, 2023 until May 27th, 2023
 *
 * lyte.recurring.weekly.interval.single.byday.neverending = Every {0} week on {1} from {2}
 * Sample - Every 2nd week on Tuesday from May 20th, 2023
 *
 * lyte.recurring.weekly.interval.multiple.byday.neverending = Every {0} week on {1} and {2} from {3}
 * Sample - Every 2nd week on Tuesday, Wednesday and Friday from May 20th, 2023
 *
 * lyte.recurring.weekly.interval.single.byday.count = Every {0} week on {1} from {2}, {3} times
 * Sample - Every 2nd week on Tuesday from May 20th, 2023, 10 times
 *
 * lyte.recurring.weekly.interval.multiple.byday.count = Every {0} week on {1} and {2} from {3} , {4} times
 * Sample - Every 2nd week on Tuesday from May 20th, 2023 until May 27th, 2023
 *
 * lyte.recurring.weekly.interval.single.byday.until = Every {0} week on {1} from {2} until {3}
 * Sample - Every 2nd week on Sunday from May 20th, 2023 until May 27th, 2023
 *
 * lyte.recurring.weekly.interval.multiple.byday.until = Every {0} week on {1} and {2} from {2} until {4}
 * Sample - Every 2nd week on Monday, Tuesday and Thursday from May 20th, 2023 until May 27th, 2023
 *
 * --------------------------------------- WEEKLY END ---------------------------------------
 *
 * --------------------------------------- MONTHLY START ---------------------------------------
 * lyte.recurring.monthly.bymonthday.nerverEnding = Every {0} day of the month from {1}
 * Samle - Every 20th day of the month from May 20th, 2023
 *
 * lyte.recurring.monthly.bymonthday.count = Every {0} day of the month from {1}, {2} times
 * Sample - Every 20th day of the month from May 20th, 2023, 10 times
 *
 * lyte.recurring.monthly.bymonthday.until = Every {0} day of the month from {1} until {2}
 * Sample - Every 20th day of the month from May 20th, 2023 until June 20th, 2023
 *
 * lyte.recurring.monthly.interval.bymonthday.nerverEnding = {0} of every {1} month from {2}
 * Sample - 20th of every 2nd month from May 20th, 2023
 *
 * lyte.recurring.monthly.interval.bymonthday.count = {0} of every {1} month from {2}, {3} times
 * Sample - 20th of every 2nd month from May 20th, 2023, 10 times
 *
 * lyte.recurring.interval.monthly.bymonthday.until = {0} of every {1} month from {2} until {3}
 * Sample - 20th of every 2nd month from May 20th, 2023 until June 20th, 2023
 *
 * lyte.recurring.monthly.bysetPos.nerverEnding = Every {0} {1} of the month from {2}
 * Sample - Every First Sunday of the month from May 20th, 2023
 *
 * lyte.recurring.monthly.interval.bysetPos.nerverEnding = {0} {1} of every {2} month from {3}
 * Sample - First Sunday of every 2nd month from May 20th, 2023
 *
 * lyte.recurring.monthly.bysetPos.count = Every {0} {1} of the month from {2}, {3} times
 * Sample - Every First Sunday of the month from May 20th, 2023, 10 times
 *
 * lyte.recurring.monthly.interval.bysetPos.count = {0} {1} of every {2} month from {3}, {4} times
 * Sample - First Sunday of every 2nd month from May 20th, 2023, 10 times
 *
 * lyte.recurring.monthly.bysetPos.until = Every {0} {1} of the month from {2} until {3}
 * Sample - Every Frist Sunday of the month from May 20th, 2023 until June 20th, 2023
 *
 * lyte.recurring.monthly.interval.bysetPos.until = {0} {1} of every {2} month from {3} until {4}
 * Sample - First Sunday of every 2nd month from May 20th, 2023 until June 20th, 2023
 *
 * --------------------------------------- MONTHLY END ---------------------------------------
 *
 * --------------------------------------- YEARLY START ---------------------------------------
 * lyte.recurring.yearly.bymonthday.nerverEnding =  Every years on {1} {2} from {3}
 * Sample - Every year on 20th May from May 20th, 2023
 *
 * lyte.recurring.yearly.bymonthday.count = Every year on {0} {1} from {2} , {3} times
 * Sample - Every Year on 20th May from May 20th, 2023, 10 times
 *
 * lyte.recurring.yearly.bymonthday.until =  Every year on {0} {1} from {2} until {3}
 * Sample - Every Year on 20th May from May 20th, 2023 until May 20th, 2024
 *
 * lyte.recurring.yearly.interval.bymonthday.nerverEnding = {0} {1} of every {3} year from {4}
 * Sample - May 20th of every 2nd year from May 20th, 2023
 *
 * lyte.recurring.yearly.interval.bymonthday.count = {0} {1} of every {3} year from {4}, {5} times
 * Sample - May 20th of every 2nd year from May 20th, 2023, 10 times
 *
 * lyte.recurring.yearly.interval.bymonthday.until = {0} {1} of every {3} year from {4} until {5}
 * Sample - May 20th of every 2nd year from May 20th, 2023 until May 20th, 2024
 *
 * lyte.recurring.yearly.bysetPos.nerverEnding = Every year on {0} {1} of {2} from {3}
 * Sample - Every year on First Sunday of May from May 20th, 2023
 *
 * lyte.recurring.yearly.interval.bysetPos.nerverEnding = {0} {1} of {2} of every {3} year from {4}
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023
 *
 * lyte.recurring.yearly.bysetPos.count = Every year on {0} {1} of {2} from {3} , {4} times
 * Sample - Every year on First Sunday of May from May 20th, 2023, 10 times
 *
 * lyte.recurring.yearly.interval.bysetPos.count = {0} {1} of {2} of every {3} year from {4}, {5} times
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023, 10 times
 *
 * lyte.recurring.yearly.bysetPos.until = Every year on {0} {1} of {2} from {3} until {4}
 * Sample - Every year on First Sunday of May from May 20th, 2023 until May 20th, 2024
 *
 * lyte.recurring.yearly.interval.bysetPos.until = {0} {1} of {2} of every {3} year from {4} until {5}
 * Sample - First Sunday of May of every 2nd year from May 20th, 2023 until May 20th, 2024
 *
 * --------------------------------------- YEARLY END ---------------------------------------
 */


/** Other I18n Keys
 * st = st
 * nd = nd
 * rd = rd
 * th = th
 * sunday = Sunday
 * monday = Monday
 * tuesday = Tuesday
 * wednesday = Wednesday
 * thursday = Thursday
 * friday = Friday
 * saterday = Saterday
 * first = First
 * second = second
 * third = Third
 * fourth = Fourth
 * fifth = Fifth
 * last = Last
 */

// TEST CASES
/** DAILY */
/*var casesSampleMapping = {
  Daily: {
    D1: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 1,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 1",
        description: "Never ending",
      };
    },
    D2: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 1,
          count: 5,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 2",
        description: "Ends after count.",
      };
    },
    D3: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 1,
          until: $L.moment().modify(20, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 3",
        description: "Ends after Date.",
      };
    },
    D4: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 2,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 4",
        description: "Interval, Never ending",
      };
    },
    D5: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 3,
          count: 5,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 5",
        description: "Interval, Ends after Count.",
      };
    },
    D6: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "DAILY",
          interval: 4,
          until: $L.moment().modify(20, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Daily 6",
        description: "Interval, Ends after Date.",
      };
    },
  },
  Weekly: {
    W1: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 1",
        description: "Never ending with no byDay",
      };
    },
    W2: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: -1,
          byDay: ["SU"],
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 2",
        description: "Never ending with single byDay",
      };
    },
    W3: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: -1,
          byDay: ["SU", "MO"],
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 3",
        description: "Never ending with multiple byDay",
      };
    },
    W4: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          count: 5,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 4",
        description: "Count with no byDay",
      };
    },
    W5: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          count: 5,
          byDay: ["SU"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 5",
        description: "Count with single byDay",
      };
    },
    W6: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          count: 5,
          byDay: ["SU", "MO"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 6",
        description: "Count with multiple byDay",
      };
    },
    W7: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 7",
        description: "Until with no byDay",
      };
    },
    W8: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
          byDay: ["SU"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 8",
        description: "Until with single byDay",
      };
    },
    W9: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 1,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
          byDay: ["SU", "MO"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 9",
        description: "Until with multiple byDay",
      };
    },
    W10: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 10",
        description: "Interval, Never Ending with no byDay",
      };
    },
    W11: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: -1,
          byDay: ["SU"],
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 11",
        description: "Interval, Never Ending with single byDay",
      };
    },
    W12: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: -1,
          byDay: ["SU", "MO"],
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 12",
        description: "Interval, Never Ending with multiple byDay",
      };
    },
    W13: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          count: 5,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 13",
        description: "Interval, Count with no byday",
      };
    },
    W14: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          count: 5,
          byDay: ["SU"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 14",
        description: "Interval, Count with single byday",
      };
    },
    W15: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          count: 5,
          byDay: ["SU", "MO"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 15",
        description: "Interval, Count with multiple byday",
      };
    },
    W16: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 16",
        description: "Interval, Until with no byday",
      };
    },
    W17: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
          byDay: ["SU"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 17",
        description: "Interval, Until with single byday",
      };
    },
    W18: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "WEEKLY",
          interval: 2,
          until: $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
          byDay: ["SU", "MO"],
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Weekly 18",
        description: "Interval, Until with multiple byday",
      };
    },
  },
  Monthly: {
    M1: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "MONTHLY",
          interval: 1,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Monthly 1",
        description: "Never ending",
      };
    },
    M2: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            count : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 2",
          description: "Ends with count.",
        };
      },
      M3: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 3",
          description: "Ends after date.",
        };
      },
      M4: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 4",
          description: "Interval, Never Ending",
        };
      },
      M5: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 5",
          description: "Interval, Ends with count",
        };
      },
      M6: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 6",
          description: "Interval, Ends after date",
        };
      },
      M7: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byMonthDay : 2
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 7",
          description: "Never ending with byMonthDay",
        };
      },
      M8: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byMonthDay : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 8",
          description: "Ends with count with byMonthDay",
        };
      },
      M9: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byMonthDay : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 9",
          description: "Ends after date with byMonthDay",
        };
      },
      M10: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byMonthDay : 2
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 10",
          description: "Interval, Never ending with byMonthDay",
        };
      },
      M11: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byMonthDay : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 11",
          description: "Interval, Ends with count with byMonthDay",
        };
      },
      M12: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byMonthDay : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 12",
          description: "Interval, Ends after date with byMonthDay",
        };
      },
      M13: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 13",
          description: "Never ending with byDay and bySetPos as 1",
        };
      },
      M14: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 2
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 14",
          description: "Never ending with byDay and bySetPos as 2",
        };
      },
      M15: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 3
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 15",
          description: "Never ending with byDay and bySetPos as 3",
        };
      },
      M16: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 4
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 16",
          description: "Never ending with byDay and bySetPos as 4",
        };
      },
      M17: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 17",
          description: "Never ending with byDay and bySetPos as 5",
        };
      },
      M18: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : -1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 18",
          description: "Never ending with byDay and bySetPos as -1",
        };
      },
      M19: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 19",
          description: "Interval, Never ending with byDay and bySetPos as 1",
        };
      },
      M20: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 2
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 20",
          description: "Interval, Never ending with byDay and bySetPos as 2",
        };
      },
      M21: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 3
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 21",
          description: "Interval, Never ending with byDay and bySetPos as 3",
        };
      },
      M22: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 4
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 22",
          description: "Interval, Never ending with byDay and bySetPos as 4",
        };
      },
      M23: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 23",
          description: "Interval, Never ending with byDay and bySetPos as 5",
        };
      },
      M24: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : -1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 24",
          description: "Interval, Never ending with byDay and bySetPos as -1",
        };
      },
      M25: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 25",
          description: "Ends with count with byDay and bySetPos as 1",
        };
      },
      M26: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 26",
          description: "Ends with count with byDay and bySetPos as 2",
        };
      },
      M27: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 3
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 27",
          description: "Ends with count with byDay and bySetPos as 3",
        };
      },
      M28: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 4
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 28",
          description: "Ends with count with byDay and bySetPos as 4",
        };
      },
      M29: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 29",
          description: "Ends with count with byDay and bySetPos as 5",
        };
      },
      M30: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : -1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 30",
          description: "Ends with count with byDay and bySetPos as -1",
        };
      },
      M31: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 31",
          description: "Interval, Ends with count with byDay and bySetPos as 1",
        };
      },
      M32: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 32",
          description: "Interval, Ends with count with byDay and bySetPos as 2",
        };
      },
      M33: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 3
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 33",
          description: "Interval, Ends with count with byDay and bySetPos as 3",
        };
      },
      M34: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 4
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 34",
          description: "Interval, Ends with count with byDay and bySetPos as 4",
        };
      },
      M35: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 35",
          description: "Interval, Ends with count with byDay and bySetPos as 5",
        };
      },
      M36: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : -1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 36",
          description: "Interval, Ends with count with byDay and bySetPos as -1",
        };
      },
      M37: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 37",
          description: "Ends after date with byDay and bySetPos as 1",
        };
      },
      M38: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 38",
          description: "Ends after date with byDay and bySetPos as 2",
        };
      },
      M39: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 3
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 39",
          description: "Ends after date with byDay and bySetPos as 3",
        };
      },
      M40: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 4
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 40",
          description: "Ends after date with byDay and bySetPos as 4",
        };
      },
      M41: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 41",
          description: "Ends after date with byDay and bySetPos as 5",
        };
      },
      M42: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : -1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 42",
          description: "Ends after date with byDay and bySetPos as -1",
        };
      },
      M43: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 43",
          description: "Interval, Ends after date with byDay and bySetPos as 1",
        };
      },
      M44: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 2
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 44",
          description: "Interval, Ends after date with byDay and bySetPos as 2",
        };
      },
      M45: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 3
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 45",
          description: "Interval, Ends after date with byDay and bySetPos as 3",
        };
      },
      M46: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 4
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 46",
          description: "Interval, Ends after date with byDay and bySetPos as 4",
        };
      },
      M47: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 47",
          description: "Interval, Ends after date with byDay and bySetPos as 5",
        };
      },
      M48: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "MONTHLY",
            interval: 2,
            until : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : -1
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Monthly 48",
          description: "Interval, Ends after date with byDay and bySetPos as -1",
        };
      },
  },
  Yearly: {
    Y1: function () {
      var instance = $L.reccur({
        dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
        dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
        rRule: {
          frequency: "YEARLY",
          interval: 1,
          until: -1,
        },
        limits: {
          neverEndingLimit: 10,
        },
      });
      return {
        instance: instance,
        id: instance.ruleId,
        firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
        output: instance.getOccurances(),
        case: "Yearly 1",
        description: "Never ending",
      };
    },
    Y2: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            count : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 2",
          description: "Ends with count.",
        };
      },
      Y3: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 3",
          description: "Ends after date.",
        };
      },
      Y4: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 4",
          description: "Interval, Never Ending",
        };
      },
      Y5: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 5",
          description: "Interval, Ends with count",
        };
      },
      Y6: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 6",
          description: "Interval, Ends after date",
        };
      },
      Y7: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byMonthDay : 2,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 7",
          description: "Never ending with byMonthDay with byMonth",
        };
      },
      Y8: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byMonthDay : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 8",
          description: "Ends with count with byMonthDay with byMonth",
        };
      },
      Y9: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byMonthDay : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 9",
          description: "Ends after date with byMonthDay with byMonth",
        };
      },
      Y10: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byMonthDay : 2,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 10",
          description: "Interval, Never ending with byMonthDay with byMonth",
        };
      },
      Y11: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byMonthDay : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 11",
          description: "Interval, Ends with count with byMonthDay with byMonth",
        };
      },
      Y12: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byMonthDay : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 12",
          description: "Interval, Ends after date with byMonthDay with byMonth",
        };
      },
      Y13: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 13",
          description: "Never ending with byDay and bySetPos as 1",
        };
      },
      Y14: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 2,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 14",
          description: "Never ending with byDay and bySetPos as 2",
        };
      },
      Y15: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 3,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 15",
          description: "Never ending with byDay and bySetPos as 3",
        };
      },
      Y16: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 16",
          description: "Never ending with byDay and bySetPos as 4",
        };
      },
      Y17: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 17",
          description: "Never ending with byDay and bySetPos as 5",
        };
      },
      Y18: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 1,
            until : -1,
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 18",
          description: "Never ending with byDay and bySetPos as -1",
        };
      },
      Y19: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 19",
          description: "Interval, Never ending with byDay and bySetPos as 1",
        };
      },
      Y20: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 2
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 20",
          description: "Interval, Never ending with byDay and bySetPos as 2",
        };
      },
      Y21: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 3
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 21",
          description: "Interval, Never ending with byDay and bySetPos as 3",
        };
      },
      Y22: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 22",
          description: "Interval, Never ending with byDay and bySetPos as 4",
        };
      },
      Y23: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 23",
          description: "Interval, Never ending with byDay and bySetPos as 5",
        };
      },
      Y24: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : -1,
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          },
          limits: {
            neverEndingLimit: 10,
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 24",
          description: "Interval, Never ending with byDay and bySetPos as -1",
        };
      },
      Y25: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 25",
          description: "Ends with count with byDay and bySetPos as 1",
        };
      },
      Y26: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 26",
          description: "Ends with count with byDay and bySetPos as 2",
        };
      },
      Y27: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 3,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 27",
          description: "Ends with count with byDay and bySetPos as 3",
        };
      },
      Y28: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 28",
          description: "Ends with count with byDay and bySetPos as 4",
        };
      },
      Y29: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 29",
          description: "Ends with count with byDay and bySetPos as 5",
        };
      },
      Y30: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 30",
          description: "Ends with count with byDay and bySetPos as -1",
        };
      },
      Y31: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 31",
          description: "Interval, Ends with count with byDay and bySetPos as 1",
        };
      },
      Y32: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 32",
          description: "Interval, Ends with count with byDay and bySetPos as 2",
        };
      },
      Y33: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 3,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 33",
          description: "Interval, Ends with count with byDay and bySetPos as 3",
        };
      },
      Y34: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 34",
          description: "Interval, Ends with count with byDay and bySetPos as 4",
        };
      },
      Y35: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 35",
          description: "Interval, Ends with count with byDay and bySetPos as 5",
        };
      },
      Y36: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            count : 5,
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 36",
          description: "Interval, Ends with count with byDay and bySetPos as -1",
        };
      },
      Y37: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 37",
          description: "Ends after date with byDay and bySetPos as 1",
        };
      },
      Y38: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 38",
          description: "Ends after date with byDay and bySetPos as 2",
        };
      },
      Y39: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 3,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 39",
          description: "Ends after date with byDay and bySetPos as 3",
        };
      },
      Y40: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 40",
          description: "Ends after date with byDay and bySetPos as 4",
        };
      },
      Y41: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 41",
          description: "Ends after date with byDay and bySetPos as 5",
        };
      },
      Y42: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 42",
          description: "Ends after date with byDay and bySetPos as -1",
        };
      },
      Y43: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 43",
          description: "Interval, Ends after date with byDay and bySetPos as 1",
        };
      },
      Y44: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 2,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 44",
          description: "Interval, Ends after date with byDay and bySetPos as 2",
        };
      },
      Y45: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 3,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 45",
          description: "Interval, Ends after date with byDay and bySetPos as 3",
        };
      },
      Y46: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 4,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 46",
          description: "Interval, Ends after date with byDay and bySetPos as 4",
        };
      },
      Y47: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : 5,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 47",
          description: "Interval, Ends after date with byDay and bySetPos as 5",
        };
      },
      Y48: function () {
        var instance = $L.reccur({
          dateFormat: "YYYY-MM-DDTHH:mm:ssZ",
          dueDate: $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
          rRule: {
            frequency: "YEARLY",
            interval: 2,
            until : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
            byDay : ["TU"],
            bySetPos : -1,
            byMonth : 5
          }
        });
        return {
          instance: instance,
          id: instance.ruleId,
          firstOccurance: instance.firstOccurance.format("DD/MM/YYYY"),
          output: instance.getOccurances(),
          case: "Yearly 48",
          description: "Interval, Ends after date with byDay and bySetPos as -1",
        };
      },
  },
};*/
/* CASES :-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DAILY:-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Never ending :
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 1,
        "until" : -1
        }
    })
2) Count :-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 1,
        "count" : 5
        }
    })
3) Until :-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "day").format("YYYY-MM-DDTHH:mm:ssZ")
        }
    })
4) Never ending with interval:
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 2,
        "until" : -1
        }
    })
5) Count with interval:-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 3,
        "count" : 5
        }
    })
6) Until with interval:-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "DAILY",
        "interval" : 4,
        "until" : $L.moment().modify(20, "day").format("YYYY-MM-DDTHH:mm:ssZ")
        }
    })
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WEEKLY :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Never Ending with no byDay
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : -1
        }
    })
2) Never Ending with one byDay
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ['SU']
        }
    })
3) Never Ending with multiple byDay
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ['SU','MO']
        }
    })
4) Count with no byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "count" : 5
        }
    })
5) Count with one byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ['SU']
        }
    })
6) Count with multiple byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ['SU','MO']
        }
    })
7) Until with no byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ")
        }
    })
8) Until with one byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ['SU']
        }
    })
9) Count with multiple byday
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 1,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ['SU','MO']
        }
    })

10) Never Ending with no byDay with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : -1
        }
    })
11) Never Ending with one byDay with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ['SU']
        }
    })
12) Never Ending with multiple byDay with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ['SU','MO']
        }
    })
13) Count with no byday with multiple with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "count" : 5
        }
    })
14) Count with one byday with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ['SU']
        }
    })
15) Count with multiple byday with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ['SU','MO']
        }
    })
16) Until with no byday with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ")
        }
    })
17) Until with one byday with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ['SU']
        }
    })
18) Count with multiple byday with interval
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "WEEKLY",
        "interval" : 2,
        "until" : $L.moment().modify(100, "day").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ['SU','MO']
        }
    })
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MONTHLY :-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Never Ending :-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1
        }
    })
2) Count :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5
        }
    })
3) Until :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        }
    })
4) Never Ending with interval:-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1
        }
    })
5) Count with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5
        }
    })
6) Until with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        }
    })
7) Never ending with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byMonthDay" : 2
        }
    })
8) Count with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byMonthDay" : 2
        }
    })
9) Until with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byMonthDay" : 2
        }
    })
10) Never ending with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byMonthDay" : 2
        }
    })
11) Count with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byMonthDay" : 2
        }
    })
12) Until with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byMonthDay" : 2
        }
    })
13) Never ending with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
14) Never ending with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
15) Never ending with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
16) Never ending with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
17) Never ending with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
18) Never ending with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
19) Never ending with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
20) Never ending with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
21) Never ending with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
22) Never ending with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
23) Never ending with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
24) Never ending with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
25) Count with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
26) Count with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
27) Count with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
28) Count with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
29) Count with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
30) Count with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
31) Count with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
32) Count with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
33) Count with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
34) Count with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
35) Count with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
36) Count with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
37) Until with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
38) Until with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
39) Until with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
40) Until with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
41) Until with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
42) Until with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
43) Until with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
44) Until with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
45) Until with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
46) Until with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
47) Until with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
48) Until with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
       "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YEARLY :-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Spcial case check for 29th feb $L.moment("29-02-2024","DD-MM-YYYY").format("YYYY-MM-DDTHH:mm:ssZ");
1) Never Ending :-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1
        }
    })
2) Count :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "count" : 5
        }
    })
3) Until :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
        }
    })
4) Never Ending with interval:-
    $L.reccur({
    dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "until" : -1
        }
    })
5) Count with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "count" : 5
        }
    })
6) Until with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
        }
    })
7) Never ending with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byMonthDay" : 2,
        "byMonth" : 5
        }
    })
8) Count with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "count" : 5,
        "byMonthDay" : 2
        }
    })





9) Until with byMonthDay :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byMonthDay" : 2
        }
    })
10) Never ending with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "until" : -1,
        "byMonthDay" : 2
        }
    })
11) Count with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "count" : 5,
        "byMonthDay" : 2
        }
    })
12) Until with byMonthDay with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "fullYear").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byMonthDay" : 2
        }
    })
13) Never ending with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
14) Never ending with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
15) Never ending with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
16) Never ending with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
17) Never ending with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "YEARLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
18) Never ending with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
19) Never ending with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
20) Never ending with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
21) Never ending with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
22) Never ending with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
23) Never ending with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
24) Never ending with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : -1,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
25) Count with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
26) Count with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
27) Count with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
28) Count with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
29) Count with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
30) Count with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
31) Count with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
32) Count with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
33) Count with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
34) Count with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
35) Count with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
36) Count with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "count" : 5,
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
37) Until with byDay and bySetPos as 1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
38) Until with byDay and bySetPos as 2 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
39) Until with byDay and bySetPos as 3 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
40) Until with byDay and bySetPos as 4 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
41) Until with byDay and bySetPos as 5 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
42) Until with byDay and bySetPos as -1 :-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 1,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
43) Until with byDay and bySetPos as 1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 1
        }
    })
44) Until with byDay and bySetPos as 2 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 2
        }
    })
45) Until with byDay and bySetPos as 3 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 3
        }
    })
46) Until with byDay and bySetPos as 4 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 4
        }
    })
47) Until with byDay and bySetPos as 5 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
        "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : 5
        }
    })
48) Until with byDay and bySetPos as -1 with interval:-
   $L.reccur({
   dateFormat : "YYYY-MM-DDTHH:mm:ssZ",
    dueDate : $L.moment().format("YYYY-MM-DDTHH:mm:ssZ"),
    rRule : {
        "frequency" : "MONTHLY",
        "interval" : 2,
       "until" : $L.moment().modify(20, "month").format("YYYY-MM-DDTHH:mm:ssZ"),
        "byDay" : ["TU"],
        "bySetPos" : -1
        }
    })
*/
