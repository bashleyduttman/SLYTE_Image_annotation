( function( factory ) {
    if( typeof define === "function" && define.amd ) {
        define( [ "@zoho/lyte-dom" ], factory );
    }
    else {
        factory( $L );
    }
} )( function( $L ){
    if ($L) {

        $L.landmark = {};
        var divsCreated = false;
        var parDiv = null; 
        var selectButton;
        var selectElement;
        var spanElement;
        var dupInd = 0;

        $L.landmark.enable = function ( obj ) {
            if( parDiv ){
                $L.landmark.disable();
            }      

            var borderSize = 3;
            if(obj && obj.borderSize && !isNaN(obj.borderSize)){
                borderSize = parseInt(obj.borderSize);
            }

            parDiv = document.createElement("div");
            parDiv.id = "aria-landmark-dropdown";

            //these classes are added for custom use case of client team
            spanElement = document.createElement("span");
            spanElement.classList.add("zcicncss-drag");
            spanElement.classList.add("zcicn-cssIcons");
            spanElement.classList.add("mL10");

            selectButton = createButton( obj );
            selectElement = document.createElement("lyte-menu");
            

            parDiv.style.cssText = "position: absolute;top: 0px;background: var(--bg_white);padding: 10px;border-radius: 5px;z-index: 20;box-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.2);"

            var options = [];
            var uniqueRoleValues = [];
            var elementsWithRole = Array.from( document.querySelectorAll('[role][lt-prop-landmark="true"]') );

            elementsWithRole = elementsWithRole.filter(function( elem ){
                return $L( elem ).is(":visible");
            });
            
            elementsWithRole.forEach(function (element) {
                var value = element.getAttribute('role') ;
                var temp = checkForExtrAttr( obj );
                if( temp ){
                    value = element.getAttribute(temp);
                }
                uniqueRoleValues.push(value); 
            });

            let duplicateValues = new Set( uniqueRoleValues.filter((e, i, a) =>  a.indexOf(e) !== i ));

            elementsWithRole.forEach(function ( element ) {

                var roleValue = element.getAttribute('role') ;
                var temp = checkForExtrAttr( obj );
                var label = roleValue;
                if( temp ){
                    roleValue = element.getAttribute(temp);
                    label = roleValue;
                }
                if ( obj && obj.elemProps && obj.elemProps.hasOwnProperty(roleValue) ) {
                    label = obj.elemProps[roleValue].label;
                    if( !label ){
                        label = roleValue;
                    }
                }

                var option = {};

                if( duplicateValues.has( roleValue )){
                    var ariaLabel = element.getAttribute('aria-label');
                    var ariaLabelledby = element.getAttribute('aria-labelledby');

                    var subLabel = ( ariaLabel ? getLabelText( ariaLabel, element ) : (ariaLabelledby ? getLabelByText( ariaLabelledby, element ) : setAriaAttribute(  element ) ) ) ;
                    label += ":" + subLabel ;
                    roleValue += ":" +  subLabel ;

                }
                element.setAttribute('landmark-display-label',label);

                option.value = roleValue;
                option.name = label;

                if( roleValue && label ){
                    options.push( option );
                }
            });

            selectElement.setData({"ltPropQuery":'lyte-button#lyteLandmarkButton', "ltPropEvent":"click", "ltPropContent":options, "ltPropUserValue":"name" });
            selectElement.setMethods( {"onMenuClick" : focusOnRoleElement} );

            _lyteUiUtils.appendChild(parDiv, selectButton);
            _lyteUiUtils.appendChild(parDiv, selectElement);
            _lyteUiUtils.appendChild(parDiv, spanElement);
            _lyteUiUtils.appendChild(document.body, parDiv);

            if( shortcut ){
                shortcut.registerKey( (obj && obj.shortcutKey) || 'control + 0', function() {
                    var elem = document.querySelector('#lyteLandmarkButton');

                    if( elem ){
                        elem.focus();
                    }
                } );
            }

            function focusOnRoleElement( selected ) {
                if (selected.value) {
                    var selectedRole = selected.value;
                    var selKey = 'role';
                    var temp = checkForExtrAttr( obj );
                    if( temp ){
                        selKey = temp;
                    }

                    if(selectedRole.includes(":")){
                        var arr = selectedRole.split(":");
                        var elementWithRole = document.querySelector('['+ selKey +'="' + arr[0].trim() + '"][lt-prop-landmark="true"][lt-landmark-label="'+ arr[1].trim() +'"]');
                    }
                    else {
                        var elementWithRole = document.querySelector('['+ selKey +'="' + selectedRole + '"][lt-prop-landmark="true"]');
                    }
                    if (elementWithRole) {
                        var elem = document.querySelector('.landmarkActiveElement');
                        if( elem ){
                            elem.classList.remove('landmarkActiveElement');
                        }
                        
                        elementWithRole.classList.add('landmarkActiveElement');

                        var focusableElement = elementWithRole.querySelector("  a[href]:not([tabindex='-1']), area[href]:not([tabindex='-1']), input:not([disabled]):not([tabindex='-1']), select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']), iframe:not([tabindex='-1']), [tabindex]:not([disabled]):not([tabindex='-1']), [data-tabindex]:not([disabled]):not([data-tabindex='-1']) ,[contentEditable=true]:not([tabindex='-1'])");

                        if ( focusableElement ) {
                            focusableElement.focus();
                        }
                        else{
                            if( obj && obj.standardNavigationOrder ){
                                elementWithRole.focus();
                            }
                            else if( !elementWithRole.disabled && $L(elementWithRole).is(":visible")){
                                elementWithRole.focus();
                            }
                        }
                    }
                }
            }

            if (!divsCreated) {
                
                var selKey = 'role';
                var temp = checkForExtrAttr( obj );
                if( temp ){
                    selKey = temp;
                }

                var elementsWithRole = document.querySelectorAll('[' + selKey + '][lt-prop-landmark="true"]');

                if( !obj || !obj.elemProps ){
                    var elemColor = {
                        'banner': {'color':'grey'},
                        'complementary': {'color':'#E74C3C'},
                        'contentinfo': {'color':'#F2A62E'},
                        'form': {'color':'brown'},
                        'main': {'color':'#0984E3'},
                        'navigation': {'color':'green'},
                        'region': {'color':'violet'},
                        'search': {'color':'darkcyan'}
                    };
                }
                else{
                    var elemColor = obj.elemProps;
                }

                elementsWithRole.forEach(function (element) {

                    var roleName = element.getAttribute('role') ;
                    var temp = checkForExtrAttr( obj );
                    if( temp ){
                        roleName = element.getAttribute(temp);
                    }

                    if ( elemColor.hasOwnProperty(roleName) ) {
                        var roleColor = elemColor[roleName].color;
                        if( !roleColor ){
                            roleColor = "black";
                        }
                        var highlightDiv = document.createElement("div");
                        var roleIndicator = document.createElement("div");
                    
                        roleIndicator.style.position = "absolute";
                        roleIndicator.style.top = "0";
                        roleIndicator.style.right = "0";
                        roleIndicator.style.border = "1px solid " + roleColor;
                        roleIndicator.style.color = "white";
                        roleIndicator.style.backgroundColor = roleColor;
                        roleIndicator.innerHTML = roleName;

                        highlightDiv.style.position = "absolute";

                        // if( compStyle && compStyle.position == 'static' ){
                        //     element.style.position = 'relative';
                        // }
                    
                        highlightDiv.style.top = ( ((element.offsetTop - borderSize < 0) ? 0 : (element.offsetTop - borderSize)) + "px" ) ;
                        // highlightDiv.style.top = boundRect.top + ( document.body.scrollTop ) + 2*borderSize +"px";
                        highlightDiv.style.left = ( element.offsetLeft < 0 ) ? 0 : element.offsetLeft + "px";
                        highlightDiv.style.width = ( ((element.offsetWidth - 2*borderSize < 0) ? 0 : (element.offsetWidth - 2*borderSize)) + "px" ) ;
                        highlightDiv.style.height = ( ((element.offsetHeight - borderSize < 0) ? 0 : (element.offsetHeight - borderSize )) + "px" ) ;
                        highlightDiv.style.border = `${borderSize}px solid ` + roleColor; 
                        highlightDiv.style.pointerEvents = "none";
                        highlightDiv.style.zIndex = "14";

                        if( element.offsetParent && element.offsetParent.offsetParent && window.getComputedStyle( element.offsetParent.offsetParent ).position == 'relative'){
                            highlightDiv.style.top = "0px";
                            highlightDiv.style.left = "0px";
                        }

                        highlightDiv.classList.add('lytelandmarkhighlightdiv');

                        element.style.setProperty("--lyte-landmark-role-color", roleColor);
                        element.style.setProperty("--lyte-landmark-border-size", borderSize+'px');
                        element.classList.add('ltCustomLandmark');
                        // _lyteUiUtils.appendChild(highlightDiv, roleIndicator);
                        // _lyteUiUtils.appendChild(element, highlightDiv);
                        // // _lyteUiUtils.appendChild(document.body, highlightDiv);
                        highlightDiv = null;
                        roleIndicator = null;
                        
                    }
                });

                divsCreated = true; 
            }

            $L(parDiv).draggable({
                onStop : function ( element ) {
                    element.style.zIndex = 20;
                }
            });
        }

        $L.landmark.disable = function () {
            if( shortcut ){
                shortcut.unregisterAll();
            }

            if ( parDiv ) {
                $L(parDiv).draggable("destroy");
                parDiv.remove(); 
                parDiv = null;
                selectButton = null;
                selectElement = null;
                spanElement = null;
            }

            if ( divsCreated ) {
        
                var divElements = document.querySelectorAll("div.lytelandmarkhighlightdiv");
                var newDivElements = document.querySelectorAll(".ltCustomLandmark");

                divElements.forEach(function (divElement) {
                    divElement.remove(); 
                });

                newDivElements.forEach( function( elem ){
                    elem.classList.remove('ltCustomLandmark');
                    // elem.style.outline='';
                });

                divsCreated = false; 
            }

            var elem = document.querySelector('.landmarkActiveElement');
            if( elem ){
                elem.classList.remove('landmarkActiveElement');
            }
        }

        function getLabelByText( sel, element ){
            var elemAriaBy = document.querySelector(`#${sel}`);
            var valToSet = elemAriaBy.innerText || elemAriaBy.textContent || "" ;
            setAriaAttribute( element,  valToSet);
            return valToSet ;
        }

        function getLabelText( ariaLabel, element ){
            setAriaAttribute( element, ariaLabel );
            return ariaLabel ;
        }

        function setAriaAttribute( elem, text ){
            var valToSet = text || `${dupInd++}`;
            elem.setAttribute("lt-landmark-label",valToSet);
            return valToSet;
        }

        function createButton( obj ){
            if( obj ){
                var text = obj.displayValue;
            }
            var button = document.createElement("lyte-button");
            button.setAttribute("id",'lyteLandmarkButton');
            button.setData('lt-prop-text',text || 'Skip To Content');
            return button;
        }

        function checkForExtrAttr( obj ){
            var temp;
            if( obj && obj.extraAttributes && obj.extraAttributes[0] ){
                temp = obj.extraAttributes[0];
            }
            return temp;
        }

    }
} );
