(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ZWAF = factory());
}(this, (function () { 'use strict';

/**
 * Polyfills
 */

/**
 * 
 * It's a wrapper over Object.defineProperty for setting  data descriptors for object .A data descriptor is a property that has a value, which sets isWritable,isConfigurable,isEnumerable for an object. By default all configuration values are false.
 * 
 * Below function will define Object.defineProperty if not defined.
 * Normal property addition through assignment(=) creates properties.
 * But it shows up during property enumeration (for...in loop or Object.keys method), whose values may be changed or deleted.
 * And it may even create some unusual behaviour. The Object.defineProperty method allows
 * three extra details(configurable, writable, and enumerable) to be set for the value.
 * By default all the value are true. Since defineProperty is not supported
 * below IE-9 we have implemented fall back to directly assign value to the object
 *
 * @param   {Object} obj
 * @param   {string} property
 * @param   {value}  value
 * @param   {boolean}  isOverrideDefaultValue
 * @param   {boolean}  isWritable
 * @param   {boolean}  isConfigurable
 * @param   {boolean}  isEnumerable
 * @returns {Object}
 */
/* eslint-disable-next-line max-params */
function defineProperty(obj, property, value, isOverrideDefaultValue, isWritable, isConfigurable, isEnumerable) {
  if (!isOverrideDefaultValue && property in obj) {
    return;
  }
  if (!Object.defineProperty || !function () {
    try {
      Object.defineProperty({}, 'x', {}); // No I18N
      return true;
    } catch (e) {
      return false;
    }
  }()) {
    obj[property] = value;
    return obj;
  }

  isWritable = isWritable === true;
  isConfigurable = isConfigurable === true;
  isEnumerable = isEnumerable === true;
  return Object.defineProperty(obj, property, {
    value: value,
    writable: isWritable,
    configurable: isConfigurable,
    enumerable: isEnumerable
  });
}

/**
 * Defining String.prototype.codePointAt if not defined already
 * This is not supported in IE 11 and below
 */


/**
 * Defining String.fromCodePoint if not defined already
 * Which is not supported in many browsers like IE ,Android ,Opera Mobile
 * */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Logger = function () {
  function Logger(level) {
    _classCallCheck(this, Logger);

    this.LEVELS = {
      NONE: -1,
      DEBUG: 0,
      INFO: 1,
      WARN: 2,
      ERROR: 3
    };
    if (level === this.LEVELS.NONE || level === this.LEVELS.DEBUG || level === this.LEVELS.INFO || level === this.LEVELS.WARN || level === this.LEVELS.ERROR) {
      this.level = level;
    } else {
      this.level = this.LEVELS.ERROR;
    }
  }

  _createClass(Logger, [{
    key: "debug",
    value: function debug() {
      var _window;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level !== this.LEVELS.DEBUG) {
        return;
      }

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_window = window["con" + "sole"]).debug.apply(_window, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "info",
    value: function info() {
      var _window2;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.INFO) {
        return;
      }

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_window2 = window["con" + "sole"]).log.apply(_window2, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "warn",
    value: function warn() {
      var _window3;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.WARN) {
        return;
      }

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_window3 = window["con" + "sole"]).warn.apply(_window3, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "error",
    value: function error() {
      var _window4;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.ERROR) {
        return;
      }

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      (_window4 = window["con" + "sole"]).error.apply(_window4, args.concat([performance.now()])); // No I18N
    }
  }]);

  return Logger;
}();

/**
 * @author: Patrick-2626 & Vigneshwar-5036
 *
 * @wiki: https://intranet.wiki.zoho.com/security/client-side-security.html
 *
 * Reference
 *  1)https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/
 *  2)https://github.com/danielstjules/blankshield
 */

var ZWAF$1 = window && window.ZWAF ? window.ZWAF : { version: '7.0.0' };
var logger = new Logger();

if (!ZWAF$1.defineProperty) {
  ZWAF$1.defineProperty = defineProperty;
}

if (!ZWAF$1.logger) {
  ZWAF$1.logger = logger;
}

if (!ZWAF$1['7_0_0']) {
  ZWAF$1['7_0_0'] = {
    version: '7.0.0',
    defineProperty: defineProperty,
    logger: logger
  };
}

/**
 * ConfigValidator
 * */

function addToSet(set, array) {
  var l = array.length;
  while (l--) {
    set[array[l]] = true;
  }
  return set;
}

function htmlPurifierValidation(conf, allConfigFlags, defaultForbiddenTags, defaultForbiddenAttr) {
  validateInvalidFlags(conf, allConfigFlags);

  // DATA Attributes should be removed when SAFE_FOR_TEMPLATES is set to true
  if (conf.SAFE_FOR_TEMPLATES) {
    if (conf.ALLOW_DATA_ATTR) {
      throw new Error("'ALLOW_DATA_ATTR' should not be set when 'SAFE_FOR_TEMPLATES' is true" // No I18N
      );
    }
  }

  // Validate ADD_URI_SAFE_ATTR in configuration
  if (!conf.ADD_URI_SAFE_ATTR) {
    conf.ADD_URI_SAFE_ATTR = [];
  }
  if (!(conf.ADD_URI_SAFE_ATTR.constructor === Array)) {
    throw new Error("Invalid Value for 'ADD_URI_SAFE_ATTR' in the configuration.It must be an Array" // No I18N
    );
  }

  // Validate GLOBAL_APPEND_ATTR rules in the configuration
  if (!conf.GLOBAL_APPEND_ATTR) {
    conf.GLOBAL_APPEND_ATTR = [];
  }
  for (var each = 0; each < conf.GLOBAL_APPEND_ATTR.length; each++) {
    if (conf.GLOBAL_APPEND_ATTR[each].ATTR_NAME === undefined || conf.GLOBAL_APPEND_ATTR[each].VALUE === undefined) {
      throw new Error('The Attribute Name and Attribute Value must be mentioned for GLOBAL_APPEND_ATTR rules', // No I18N
      conf.GLOBAL_APPEND_ATTR[each]);
    }
    if (!conf.GLOBAL_APPEND_ATTR[each].SIBLING_CONDITIONS) {
      continue;
    }

    for (var i = 0; i < conf.GLOBAL_APPEND_ATTR[each].SIBLING_CONDITIONS.length; i++) {
      var eachSiblingCondition = conf.GLOBAL_APPEND_ATTR[each].SIBLING_CONDITIONS[i];
      if (!eachSiblingCondition.ATTR_NAME) {
        throw new Error('The Attribute Name must be mentioned for SIBLING_CONDITIONS rule', // No I18N
        conf.GLOBAL_APPEND_ATTR[each]);
      }
      if (!eachSiblingCondition.CONDITIONS) {
        continue;
      }
      for (var j = 0; j < eachSiblingCondition.CONDITIONS.length; j++) {
        var eachAttrRuleCondition = eachSiblingCondition.CONDITIONS[j];
        validateAttributeRuleCondition(eachAttrRuleCondition, 'GLOBAL_APPEND_ATTR' // No I18N
        );
      }
    }
  }

  // Validate GLOBAL_ATTR_RULES rules in the configuration
  if (!conf.GLOBAL_ATTR_RULES) {
    conf.GLOBAL_ATTR_RULES = {};
  }
  for (var _i in conf.GLOBAL_ATTR_RULES) {
    if (!Object.prototype.hasOwnProperty.call(conf.GLOBAL_ATTR_RULES, _i)) {
      continue;
    }
    var eachValidateRule = conf.GLOBAL_ATTR_RULES[_i];
    validateAttributeRuleCondition(eachValidateRule, 'GLOBAL_ATTR_RULES'); // No I18N
  }

  // Check for mismatch in style validation
  validateStyleConfig(conf);

  // Check for mismatches between allowed/forbidden tags/attributes
  validateAllowedAndForbidden(conf.GLOBAL_TAGS, conf.GLOBAL_ATTR, conf.FORBID_TAGS, conf.FORBID_ATTR, defaultForbiddenTags, defaultForbiddenAttr);
}

function validateInvalidFlags(conf, allConfigFlags) {
  var allConfig = addToSet({}, allConfigFlags);
  // Check for any misspelled flags
  for (var eachFlag in conf) {
    if (!(eachFlag in allConfig)) {
      throw new Error("Invalid Flag in configuration! Value: " + eachFlag + ". Must be one of the following: " + JSON.stringify(allConfigFlags));
    }
  }

  var booleanFlags = addToSet({}, ['ALLOW_ARIA_ATTR', // No I18N
  'ALLOW_DATA_ATTR', // No I18N
  'ALLOW_UNKNOWN_PROTOCOLS', // No I18N
  'SAFE_FOR_JQUERY', // No I18N
  'SAFE_FOR_TEMPLATES', // No I18N
  'WHOLE_DOCUMENT', // No I18N
  'RETURN_DOM', // No I18N
  'RETURN_DOM_FRAGMENT', // No I18N
  'RETURN_DOM_IMPORT', // No I18N
  'FORCE_BODY', // No I18N
  'SANITIZE_DOM', // No I18N
  'KEEP_CONTENT', // No I18N
  'STYLE_VALIDATION', // No I18N
  'REMOVE_ONEVENTS' // No I18N
  ]);
  // Check Values of all Boolean Flags in the configuration
  for (var eachBooleanFlag in booleanFlags) {
    if (!(conf[eachBooleanFlag] === true || conf[eachBooleanFlag] === false)) {
      throw new Error("Invalid Value for '" + eachBooleanFlag + "' in the configuration. It needs to be either 'true' or 'false'" // No I18N
      );
    }
  }
}

function validateAttributeRuleCondition(attrRule, ruleType) {
  if (attrRule.MAX_LENGTH && attrRule.MAX_LENGTH.constructor !== Number) {
    throw new Error('Invalid value for MAX_LENGTH in ' + ruleType + ' rules', // No I18N
    attrRule);
  }
  if (attrRule.MIN_LENGTH && attrRule.MIN_LENGTH.constructor !== Number) {
    throw new Error('Invalid value for MIN_LENGTH in ' + ruleType + ' rules', // No I18N
    attrRule);
  }
  if (attrRule.REGEX && attrRule.REGEX.constructor !== RegExp) {
    throw new Error('Invalid value for REGEX in ' + ruleType + ' rules', // No I18N
    attrRule);
  }
  if (attrRule.LIST && attrRule.LIST.constructor !== Array) {
    throw new Error('Invalid value for LIST in ' + ruleType + ' rules', // No I18N
    attrRule);
  }
}

function validateStyleConfig(conf) {
  // Validate value of ALLOWED_STYLE
  if (conf.ALLOWED_STYLE) {
    conf.ALLOWED_STYLE = conf.ALLOWED_STYLE.toUpperCase();
    if (!(conf.ALLOWED_STYLE === 'ALL' || // No I18N
    conf.ALLOWED_STYLE === 'INTERNAL' || // No I18N
    conf.ALLOWED_STYLE === 'INLINE' || // No I18N
    conf.ALLOWED_STYLE === 'NONE' // No I18N
    )) {
      throw new Error("Invalid Value for 'ALLOWED_STYLE' in the configuration. It needs to be either 'ALL', 'INTERNAL', 'INLINE' or 'NONE'" // No I18N
      );
    }
  }

  if (conf.ALLOWED_STYLE === 'ALL') {
    // No I18N
    if (conf.FORBID_TAGS.indexOf('style') > -1 || // No I18N
    conf.FORBID_ATTR.indexOf('style') > -1 // No I18N
    ) {
        throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'ALL'" // No I18N
        );
      }
  } else if (conf.ALLOWED_STYLE === 'INLINE') {
    // No I18N
    if (conf.GLOBAL_TAGS.indexOf('style') > -1) {
      // No I18N
      throw new Error("You have added style to the allowed tag list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'INLINE'" // No I18N
      );
    }
    if (conf.FORBID_ATTR.indexOf('style') > -1) {
      // No I18N
      throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'INLINE'" // No I18N
      );
    }
  } else if (conf.ALLOWED_STYLE === 'INTERNAL') {
    // No I18N
    if (conf.GLOBAL_ATTR.indexOf('style') > -1) {
      // No I18N
      throw new Error("You have added style to the allowed attribute list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'INTERNAL'" // No I18N
      );
    }
    if (conf.FORBID_TAGS.indexOf('style') > -1) {
      // No I18N
      throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'INTERNAL'" // No I18N
      );
    }
  } else if (conf.ALLOWED_STYLE === 'NONE') {
    // No I18N
    if (conf.GLOBAL_TAGS.indexOf('style') > -1 || // No I18N
    conf.GLOBAL_ATTR.indexOf('style') > -1 // No I18N
    ) {
        throw new Error("You have added style to the allowed tag/attribute list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'NONE'" // No I18N
        );
      }
  }
}

function validateAllowedAndForbidden(conf, defaultForbidTags, defaultForbidAttr) {
  conf.GLOBAL_TAGS.forEach(function (eachTag) {
    if (conf.FORBID_TAGS.indexOf(eachTag.toLowerCase()) > -1 && eachTag !== 'style' // No I18N
    ) {
        throw new Error("Conflict in Allowed and Forbidden Tags! Tag '" + eachTag + "' is given in FORBID_TAGS and GLOBAL_TAGS in configuration!" // No I18N
        );
      }
    if (defaultForbidTags.indexOf(eachTag.toLowerCase()) > -1) {
      throw new Error("Tag '" + eachTag + "' is forbidden by default. The following Tags are forbidden by default: " + // No I18N
      JSON.stringify(defaultForbidTags));
    }
  });
  conf.GLOBAL_ATTR.forEach(function (eachAttr) {
    if (conf.FORBID_ATTR.indexOf(eachAttr.toLowerCase()) > -1 && eachAttr !== 'style' // No I18N
    ) {
        throw new Error("Conflict in Allowed and Forbidden Attributes! Attribute '" + eachAttr + "' is given in FORBID_ATTR and GLOBAL_ATTR in configuration!" // No I18N
        );
      }
    if (defaultForbidAttr.indexOf(eachAttr.toLowerCase()) > -1) {
      throw new Error("Attribute '" + eachAttr + "' is forbidden by default. The following Attributes are forbidden by default: " + // No I18N
      JSON.stringify(defaultForbidAttr));
    }
  });
}

var ConfigValidator = {
  htmlPurifierValidation: htmlPurifierValidation
};

if (ZWAF$1.version === '7.0.0' && !ZWAF$1.ConfigValidator) {
  ZWAF$1.defineProperty(ZWAF$1, 'ConfigValidator', // No I18N
  ConfigValidator, true, false, false, true);
}
if (!ZWAF$1['7_0_0'].ConfigValidator) {
  ZWAF$1.defineProperty(ZWAF$1['7_0_0'], 'ConfigValidator', // No I18N
  ConfigValidator, true, false, false, true);
}

return ZWAF$1;

})));
