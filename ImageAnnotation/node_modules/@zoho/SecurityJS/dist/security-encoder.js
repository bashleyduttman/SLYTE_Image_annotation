(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ZWAF = factory());
}(this, (function () { 'use strict';

/**
 * Polyfills
 */

/**
 * 
 * It's a wrapper over Object.defineProperty for setting  data descriptors for object .A data descriptor is a property that has a value, which sets isWritable,isConfigurable,isEnumerable for an object. By default all configuration values are false.
 * 
 * Below function will define Object.defineProperty if not defined.
 * Normal property addition through assignment(=) creates properties.
 * But it shows up during property enumeration (for...in loop or Object.keys method), whose values may be changed or deleted.
 * And it may even create some unusual behaviour. The Object.defineProperty method allows
 * three extra details(configurable, writable, and enumerable) to be set for the value.
 * By default all the value are true. Since defineProperty is not supported
 * below IE-9 we have implemented fall back to directly assign value to the object
 *
 * @param   {Object} obj
 * @param   {string} property
 * @param   {value}  value
 * @param   {boolean}  isOverrideDefaultValue
 * @param   {boolean}  isWritable
 * @param   {boolean}  isConfigurable
 * @param   {boolean}  isEnumerable
 * @returns {Object}
 */
/* eslint-disable-next-line max-params */
function defineProperty(obj, property, value, isOverrideDefaultValue, isWritable, isConfigurable, isEnumerable) {
  if (!isOverrideDefaultValue && property in obj) {
    return;
  }
  if (!Object.defineProperty || !function () {
    try {
      Object.defineProperty({}, 'x', {}); // No I18N
      return true;
    } catch (e) {
      return false;
    }
  }()) {
    obj[property] = value;
    return obj;
  }

  isWritable = isWritable === true;
  isConfigurable = isConfigurable === true;
  isEnumerable = isEnumerable === true;
  return Object.defineProperty(obj, property, {
    value: value,
    writable: isWritable,
    configurable: isConfigurable,
    enumerable: isEnumerable
  });
}

/**
 * Defining String.prototype.codePointAt if not defined already
 * This is not supported in IE 11 and below
 */

var codePointAt = String.prototype.codePointAt;
if (!codePointAt) {
  /* eslint-disable-next-line no-extend-native */
  codePointAt = function codePointAt(position) {
    if (this === null) {
      throw new TypeError(' ');
    }
    var string = String(this);
    var size = string.length;
    // `ToInteger`
    var index = position ? Number(position) : 0;
    if (window.isNan(index)) {
      // Better `isNaN`
      index = 0;
    }
    // Account for out-of-bounds indices:
    if (index < 0 || index >= size) {
      return undefined;
    }
    // Get the first code unit
    var first = string.charCodeAt(index);
    var second = void 0;
    if (
    // Check if it's the start of a surrogate pair
    first >= 0xd800 && first <= 0xdbff && // High surrogate
    size > index + 1 // There is a next code unit
    ) {
        second = string.charCodeAt(index + 1);
        if (second >= 0xdc00 && second <= 0xdfff) {
          // Low surrogate
          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
        }
      }
    return first;
  };
}

/**
 * Defining String.fromCodePoint if not defined already
 * Which is not supported in many browsers like IE ,Android ,Opera Mobile
 * */

var fromCodePoint = String.fromCodePoint;
if (!fromCodePoint) {
  var stringFromCharCode = String.fromCharCode;
  var floor = Math.floor;

  fromCodePoint = function fromCodePoint() {
    var MAX_SIZE = 0x4000;
    var codeUnits = [];

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var length = args.length;

    var highSurrogate = void 0;
    var lowSurrogate = void 0;
    var index = -1;
    if (!length) {
      return ''; // No I18N
    }
    var result = ''; // No I18N
    while (++index < length) {
      var codePoint = Number(args[index]);
      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
      codePoint < 0 || // Not a valid Unicode code point
      codePoint > 0x10ffff || // Not a valid Unicode code point
      floor(codePoint) !== codePoint // Not an integer
      ) {
          throw new RangeError('Invalid code point: ' + codePoint); // No I18N
        }
      if (codePoint <= 0xffff) {
        // BMP code point
        codeUnits.push(codePoint);
      } else {
        // Astral code point; split in surrogate halves
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xd800;
        lowSurrogate = codePoint % 0x400 + 0xdc00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
      if (index + 1 === length || codeUnits.length > MAX_SIZE) {
        result += stringFromCharCode.apply(undefined, codeUnits);
        codeUnits.length = 0;
      }
    }
    return result;
  };
}

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Logger = function () {
  function Logger(level) {
    _classCallCheck(this, Logger);

    this.LEVELS = {
      NONE: -1,
      DEBUG: 0,
      INFO: 1,
      WARN: 2,
      ERROR: 3
    };
    if (level === this.LEVELS.NONE || level === this.LEVELS.DEBUG || level === this.LEVELS.INFO || level === this.LEVELS.WARN || level === this.LEVELS.ERROR) {
      this.level = level;
    } else {
      this.level = this.LEVELS.ERROR;
    }
  }

  _createClass(Logger, [{
    key: "debug",
    value: function debug() {
      var _window;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level !== this.LEVELS.DEBUG) {
        return;
      }

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_window = window["con" + "sole"]).debug.apply(_window, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "info",
    value: function info() {
      var _window2;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.INFO) {
        return;
      }

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_window2 = window["con" + "sole"]).log.apply(_window2, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "warn",
    value: function warn() {
      var _window3;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.WARN) {
        return;
      }

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_window3 = window["con" + "sole"]).warn.apply(_window3, args.concat([performance.now()])); // No I18N
    }
  }, {
    key: "error",
    value: function error() {
      var _window4;

      if (!window || !window.console || this.level === this.LEVELS.NONE || this.level > this.LEVELS.ERROR) {
        return;
      }

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      (_window4 = window["con" + "sole"]).error.apply(_window4, args.concat([performance.now()])); // No I18N
    }
  }]);

  return Logger;
}();

/**
 * @author: Patrick-2626 & Vigneshwar-5036
 *
 * @wiki: https://intranet.wiki.zoho.com/security/client-side-security.html
 *
 * Reference
 *  1)https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/
 *  2)https://github.com/danielstjules/blankshield
 */

var ZWAF$2 = window && window.ZWAF ? window.ZWAF : { version: '7.0.0' };
var logger = new Logger();

if (!ZWAF$2.defineProperty) {
  ZWAF$2.defineProperty = defineProperty;
}

if (!ZWAF$2.logger) {
  ZWAF$2.logger = logger;
}

if (!ZWAF$2['7_0_0']) {
  ZWAF$2['7_0_0'] = {
    version: '7.0.0',
    defineProperty: defineProperty,
    logger: logger
  };
}

/**
 * Display a message in the browser developer console, warning any unwary user.
 *
 * Only a static message is displayed for now. Support for giving API to user to customize message maybe given in future
 * INFO: This warning is linked to a common source (Wikipedia page).
 * This is because our products maybe used for Whitelabel Deployment and we shouldn't display anything specific to Zoho there.
 * So we will maintain this to be common source.
 */

var called = false;
var Console = {
  log: function log() {
    if (!window || !window.console || !window.console.log || !window.navigator || !window.navigator.userAgent || called) {
      return;
    }
    var userAgent = window.navigator.userAgent;

    var browser = userAgent.match(/opera|chrome|safari|firefox|msie|trident(?=\/)/i);
    called = true;
    if (browser && browser[0].search(/trident|msie/i) < 0) {
      // Supported  browser
      window.console.log('%cSTOP!', // No I18N
      'color:red;font-size:xx-large;font-weight:bold;' // No I18N
      );
      window.console.log("%cThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details", // No I18N
      'font-size:large;' // No I18N
      );
      return;
    }
    // Not supported browser
    window.console.log("STOP!\nThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details" // No I18N
    );
  }
};

/**
 * Custom Functions for Sanitizer
 **/













/**
 * Custom Functions for Encoder
 **/

/**
 * Array.indexOf function is not supported below IE-9 .
 * Since defineProperty is not supported below IE-9 and many service teams are using
 * property enumeration (for...in loop) for Arrays (which is not recommended), the Array.indexOf
 * function is stored in the local variable(ZWAF.util.arrayIndexOf) instead of assigning
 * it directly to Array.prototype. And later it is called using ZWAF.util.arrayIndexOf.call(params...)
 *
 * @param   {Number|String}      searchElement  Element to search for in the array
 * @param   {...otherArguments}  args           Other arguments for Array.indexOf
 *
 * @return  {Number}                    Index of the given element in the array
 */
function indexOfPolyfill(searchElement) {
  if (this === undefined || this === null) {
    throw new TypeError(' ');
  }

  var t = {};
  var len = t.length >>> 0;
  if (len === 0) {
    return -1;
  }

  var n = 0;
  if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 0) {
    n = Number(arguments.length <= 2 ? undefined : arguments[2]);
    if (isNaN(n)) {
      n = 0;
    } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
      n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
  }

  if (n >= len) {
    return -1;
  }

  var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);

  for (; k < len; k++) {
    if (k in t && t.charAt(k) === searchElement) {
      return k;
    }
  }
  return -1;
}

var arrayIndexOf = Array.prototype.indexOf ? Array.prototype.indexOf : indexOfPolyfill;

/**
 * Cookie handling functions
 **/

function setCookie(name, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  options = Object.assign({
    path: '/',
    SameSite: 'lax', // No I18N
    // Default max age is 100 days
    'max-age': 100 * 24 * 60 * 60 * 1000 // No I18N
  }, options);
  if (!encodeURIComponent) {
    return;
  }
  var cookieVal = encodeURIComponent(name) + '=' + encodeURIComponent(value);

  for (var optionKey in options) {
    cookieVal += '; ' + optionKey;
    var optionValue = options[optionKey];
    if (optionValue !== true) {
      cookieVal += '=' + optionValue;
    }
  }
  document.cookie = cookieVal;
}
function deleteCookie(name) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

  setCookie(name, '', {
    path: path,
    'max-age': -1 // No I18N
  });
}

function getCookie(name) {
  name = name + '=';
  var cookieList = document.cookie;
  var res = void 0;
  cookieList.split('; ').forEach(function (cookie) {
    if (res !== undefined) {
      return;
    }
    var cookieValue = void 0;
    try {
      if (decodeURIComponent) {
        cookieValue = decodeURIComponent(cookie);
      }
    } catch (e) {
      cookieValue = cookie;
      ZWAF && ZWAF.logger && ZWAF.logger.warn && ZWAF.logger.warn("Error while trying to decode Cookie value!");
    }
    if (cookieValue.indexOf(name) === 0) {
      res = cookieValue.substring(name.length);
    }
  });
  return res;
}

function hasCookie(name) {
  return !!getCookie(name);
}











// Unused functions
//
// function setArray(arr1, arr2){
//   arr1.splice.apply(arr1,[0,arr1.length].concat(arr2));
// }
//
// function addObjsToSet(set, set2) {
//   for (let each in set2) {
//     if (set2.hasOwnProperty(each)) {
//       set[each] = true;
//     }
//   }
//   return set;
// };
//
// function removeFromSet(set, key) {
//   delete set[key];
//   return set;
// }
//
// /* Add all object keys to array */
// function addToArr(array, set) {
//   let property;
//   for (property in set) {
//     if (set.hasOwnProperty(property)) {
//       array.push(property);
//     }
//   }
//   return array;
// }
//
// /* Add flags to config */
// function addToConfig(set, array) {
//   let l = array.length;
//   while (l--) {
//     set[array[l]] = true;
//   }
//   return set;
// }

if (ZWAF$2.version === '7.0.0' && !ZWAF$2.Console) {
  ZWAF$2.defineProperty(ZWAF$2, 'Console', // No I18N
  Console, true, false, false, true);
}
if (!ZWAF$2['7_0_0'].Console) {
  ZWAF$2.defineProperty(ZWAF$2['7_0_0'], 'Console', // No I18N
  Console, true, false, false, true);
}

var COOKIE_NAMES = ['_zcsr_tmp', // No I18N
'com_chat_owner', // No I18N
'com_avcliq_owner', // No I18N
'wms.agent' // No I18N
];
var loggedInUser = COOKIE_NAMES.some(function (e) {
  return hasCookie(e);
});
if (loggedInUser) {
  ZWAF$2 && ZWAF$2['7_0_0'] && ZWAF$2['7_0_0'].Console && ZWAF$2['7_0_0'].Console.log();
}

var util = {
  arrayIndexOf: arrayIndexOf
};

if (Object.freeze) {
  Object.freeze(util);
}

if (ZWAF$2.version === '7.0.0' && !ZWAF$2.util) {
  ZWAF$2.defineProperty(ZWAF$2, 'util', // No I18N
  util, true, false, false, true);
}
if (!ZWAF$2['7_0_0'].util) {
  ZWAF$2.defineProperty(ZWAF$2['7_0_0'], 'util', // No I18N
  util, true, false, false, true);
}

/**
 * Identify specific browsers like Chromium-based Ulaa, Brave, Arc
 *
 * These browsers are usually not identifiable through User-Agent Request Header
 * This is because they sometimes prefer to be identified as their parent browser (like Chromium)
 * to ensure webpages work correctly. But it is necessary for us to get accurate stats on browsers
 *
 * Eg: To show users which browser they recently used to log in
 *
 * Browser-specific identification or "duck-typing" is done to identify the browser.
 * If it is not in the list of usually identifiable browsers,
 * then we place this detail in a cookie named "_zwaf_ua".
 * For now, only browser name is added. Based on further needs we can add more info
 * like specific browser version and device type.
 */
var UA_COOKIE_NAME = '_zwaf_ua'; // No I18N

var UAIdentification = {
  /**
   * Called by default when SecurityJS is loaded.
   *
   */
  init: function init() {
    deleteCookie(UA_COOKIE_NAME);

    // Reference:
    // https://github.com/brave/brave-browser/issues/10165#issuecomment-641128278
    // https://github.com/brave/brave-browser/issues/10165#issuecomment-644949774
    var isUlaa = !!window.ulaa;
    var isBrave = navigator && navigator.brave && typeof navigator.brave.isBrave === 'function'; // No I18N
    if (isUlaa) {
      setCookie(UA_COOKIE_NAME, 'Ulaa'); // No I18N
    } else if (isBrave) {
      setCookie(UA_COOKIE_NAME, 'Brave'); // No I18N
    } else {
      // Reference:
      // https://webmasters.stackexchange.com/a/142231
      // Should be done after 1 second timeout after page is loaded.
      window && window.addEventListener('load', // No I18N
      function () {
        window.setTimeout(function () {
          var isArc = window.getComputedStyle(window.document.documentElement).getPropertyValue('--arc-palette-background'); // No I18N
          if (isArc) {
            setCookie(UA_COOKIE_NAME, 'Arc'); // No I18N
          }
        }, 1000);
      });
    }
  },
  disable: function disable() {
    // If any one does not want this cookie to be set, they can call ZWAF.UAIdentification.disable()
    deleteCookie(UA_COOKIE_NAME);
  }
};

if (ZWAF$2.version === '7.0.0' && !ZWAF$2.UAIdentification) {
  ZWAF$2.defineProperty(ZWAF$2, 'UAIdentification', // No I18N
  UAIdentification, true, false, false, true);
}
if (!ZWAF$2['7_0_0'].UAIdentification) {
  ZWAF$2.defineProperty(ZWAF$2['7_0_0'], 'UAIdentification', // No I18N
  UAIdentification, true, false, false, true);
}

ZWAF$2 && ZWAF$2['7_0_0'] && ZWAF$2['7_0_0'].UAIdentification && ZWAF$2['7_0_0'].UAIdentification.init();

/**
 * Encoder
 * */
var Encoder = {};

function toCharCodeArr(charArr) {
  var charCodeArr = [];
  for (var i = 0; i < charArr.length; i++) {
    charCodeArr.push(charArr[i].charCodeAt(0));
  }
  return charCodeArr;
}
var arrayIndexOf$1 = util.arrayIndexOf;

var IMMUNE = {
  HTML: toCharCodeArr([',', '.', '-', '_', ' ']), // No I18N
  HTMLATTR: toCharCodeArr([',', '.', '-', '_']), // No I18N
  CSS: toCharCodeArr([]),
  JAVASCRIPT: toCharCodeArr([',', '.', '_']) // No I18N
};

var characterToEntityMap = {};
var characterToEntityArray = '34=&quot|38=&amp|60=&lt|62=&gt|160=&nbsp|161=&iexcl|162=&cent|163=&pound|164=&curren|165=&yen|166=&brvbar|167=&sect|168=&uml|169=&copy|170=&ordf|171=&laquo|172=&not|173=&shy|174=&reg|175=&macr|176=&deg|177=&plusmn|178=&sup2|179=&sup3|180=&acute|181=&micro|182=&para|183=&middot|184=&cedil|185=&sup1|186=&ordm|187=&raquo|188=&frac14|189=&frac12|190=&frac34|191=&iquest|192=&Agrave|193=&Aacute|194=&Acirc|195=&Atilde|196=&Auml|197=&Aring|198=&AElig|199=&Ccedil|200=&Egrave|201=&Eacute|202=&Ecirc|203=&Euml|204=&Igrave|205=&Iacute|206=&Icirc|207=&Iuml|208=&ETH|209=&Ntilde|210=&Ograve|211=&Oacute|212=&Ocirc|213=&Otilde|214=&Ouml|215=&times|216=&Oslash|217=&Ugrave|218=&Uacute|219=&Ucirc|220=&Uuml|221=&Yacute|222=&THORN|223=&szlig|224=&agrave|225=&aacute|226=&acirc|227=&atilde|228=&auml|229=&aring|230=&aelig|231=&ccedil|232=&egrave|233=&eacute|234=&ecirc|235=&euml|236=&igrave|237=&iacute|238=&icirc|239=&iuml|240=&eth|241=&ntilde|242=&ograve|243=&oacute|244=&ocirc|245=&otilde|246=&ouml|247=&divide|248=&oslash|249=&ugrave|250=&uacute|251=&ucirc|252=&uuml|253=&yacute|254=&thorn|255=&yuml|338=&OElig|339=&oelig|352=&Scaron|353=&scaron|376=&Yuml|402=&fnof|710=&circ|732=&tilde|913=&Alpha|914=&Beta|915=&Gamma|916=&Delta|917=&Epsilon|918=&Zeta|919=&Eta|920=&Theta|921=&Iota|922=&Kappa|923=&Lambda|924=&Mu|925=&Nu|926=&Xi|927=&Omicron|928=&Pi|929=&Rho|931=&Sigma|932=&Tau|933=&Upsilon|934=&Phi|935=&Chi|936=&Psi|937=&Omega|945=&alpha|946=&beta|947=&gamma|948=&delta|949=&epsilon|950=&zeta|951=&eta|952=&theta|953=&iota|954=&kappa|955=&lambda|956=&mu|957=&nu|958=&xi|959=&omicron|960=&pi|961=&rho|962=&sigmaf|963=&sigma|964=&tau|965=&upsilon|966=&phi|967=&chi|968=&psi|969=&omega|977=&thetasym|978=&upsih|982=&piv|8194=&ensp|8195=&emsp|8201=&thinsp|8204=&zwnj|8205=&zwj|8206=&lrm|8207=&rlm|8211=&ndash|8212=&mdash|8216=&lsquo|8217=&rsquo|8218=&sbquo|8220=&ldquo|8221=&rdquo|8222=&bdquo|8224=&dagger|8225=&Dagger|8226=&bull|8230=&hellip|8240=&permil|8242=&prime|8243=&Prime|8249=&lsaquo|8250=&rsaquo|8254=&oline|8260=&frasl|8364=&euro|8465=&image|8472=&weierp|8476=&real|8482=&trade|8501=&alefsym|8592=&larr|8593=&uarr|8594=&rarr|8595=&darr|8596=&harr|8629=&crarr|8656=&lArr|8657=&uArr|8658=&rArr|8659=&dArr|8660=&hArr|8704=&forall|8706=&part|8707=&exist|8709=&empty|8711=&nabla|8712=&isin|8713=&notin|8715=&ni|8719=&prod|8721=&sum|8722=&minus|8727=&lowast|8730=&radic|8733=&prop|8734=&infin|8736=&ang|8743=&and|8744=&or|8745=&cap|8746=&cup|8747=&int|8756=&there4|8764=&sim|8773=&cong|8776=&asymp|8800=&ne|8801=&equiv|8804=&le|8805=&ge|8834=&sub|8835=&sup|8836=&nsub|8838=&sube|8839=&supe|8853=&oplus|8855=&otimes|8869=&perp|8901=&sdot|8968=&lceil|8969=&rceil|8970=&lfloor|8971=&rfloor|10216=&lang|10217=&rang|9674=&loz|9824=&spades|9827=&clubs|9829=&hearts|9830=&diams'; // No I18N
characterToEntityArray = characterToEntityArray.split('|'); // No I18N
for (var i = 0; i < characterToEntityArray.length; i++) {
  var eachEntry = characterToEntityArray[i].split('='); // No I18N
  characterToEntityMap[eachEntry[0]] = eachEntry[1];
}

var hex = [];
for (var c = 0; c < 0xff; c++) {
  if (c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c >= 0x61 && c <= 0x7a) {
    hex[c] = null;
  } else {
    hex[c] = c.toString(16);
  }
}

function getHexForNonAlphanumeric(c) {
  if (c < 256) {
    return hex[c];
  }
  return c.toString(16);
}

function encodeHTMLCharacter(immuneCharList, c) {
  if (arrayIndexOf$1.call(immuneCharList, c) !== -1) {
    return fromCodePoint(c);
  }
  var hex = getHexForNonAlphanumeric(c);
  if (hex === null) {
    return fromCodePoint(c);
  }

  // Returning space for non printable characters
  if (c <= 0x1f && c != 0x09 && c != 0x0a && c != 0x0d || c >= 0x7f && c <= 0x9f || c === 0x20) {
    return '&#x20;'; // No I18N
  }
  var entityName = characterToEntityMap[c];
  if (entityName !== undefined) {
    return entityName + ';'; // No I18N
  }
  return '&#x' + hex + ';'; // No I18N
}

function encodeJSCharacter(immuneCharList, c) {
  if (arrayIndexOf$1.call(immuneCharList, c) !== -1) {
    return String.fromCharCode(c);
  }
  var hex = getHexForNonAlphanumeric(c);
  if (hex === null) {
    return String.fromCharCode(c);
  }
  var tmp = c.toString(16);
  var pad = void 0;
  if (c < 256) {
    pad = '00'.substr(tmp.length); // No I18N
    return '\\x' + pad + tmp.toUpperCase(); // No I18N
  }
  pad = '0000'.substr(tmp.length); // No I18N
  return '\\u' + pad + tmp.toUpperCase(); // No I18N
}

function encodeCSSCharacter(immuneCharList, c) {
  if (arrayIndexOf$1.call(immuneCharList, c) !== -1) {
    return fromCodePoint(c);
  }

  var hex = getHexForNonAlphanumeric(c);
  if (hex === null) {
    return fromCodePoint(c);
  }
  return '\\' + hex + ' '; // No I18N
}

/**
 * Iterates over the characters in sInput and calls characterEncoder to encode them
 * Based on isHandleUnicodeChar value, iteration is done by either code unit or code point
 *
 * @param   {Array}     immuneCharList       List of immune characters to not encode
 * @param   {String}    sInput               String of characters to encode
 * @param   {Function}  characterEncoder     Function to encode each character
 * @param   {Boolean}   isHandleUnicodeChar  Determines iteration technique, either by code unit or code point
 *
 * @return  {String}                        Encoded sInput string
 */
function encode(immuneCharList, sInput, characterEncoder, isHandleUnicodeChar) {
  if (sInput === null || sInput === undefined || typeof sInput !== 'string') {
    // No I18N
    return sInput;
  }
  var out = '';
  for (var _i = 0; _i < sInput.length; _i++) {
    if (isHandleUnicodeChar) {
      var _c = codePointAt.call(sInput, _i);
      out += characterEncoder(immuneCharList, _c, isHandleUnicodeChar);
      if (_c > 0xffff) {
        _i++;
      }
    } else {
      out += characterEncoder(immuneCharList, sInput.charCodeAt(_i));
    }
  }
  return out;
}

/**
 * Encodes text which has to be rendered as element text i.e., as HTML.
 * Here input has to be iterated by code point
 *
 * @param   {String}  input  Text to be encoded
 *
 * @return  {String}         Encoded Text
 */
Encoder.encodeForHTML = function (input) {
  return encode(IMMUNE.HTML, input, encodeHTMLCharacter, true);
};

/**
 * Encodes text which has to be rendered as HTML attribute value (except JS attributes like onclick, onblur etc.)
 * Here input has to be iterated by code point
 *
 * @param   {String}  input  Text to be encoded
 *
 * @return  {String}         Encoded Text
 */
Encoder.encodeForHTMLAttribute = function (input) {
  return encode(IMMUNE.HTMLATTR, input, encodeHTMLCharacter, true);
};

/**
 * Encodes text which has to be rendered inside the script tag
 * or inside HTML attributes which are executed as JavaScript (like onclick, onblur etc.)
 * Here input has to be iterated by code unit
 *
 * @param   {String}  input  Text to be encoded
 *
 * @return  {String}         Encoded Text
 */
Encoder.encodeForJavaScript = function (input) {
  return encode(IMMUNE.JAVASCRIPT, input, encodeJSCharacter, false);
};

/**
 * Encodes text which has to be rendered as CSS property name or value
 * Here input has to be iterated by code unit
 *
 * @param   {String}  input  Text to be encoded
 *
 * @return  {String}         Encoded Text
 */
Encoder.encodeForCSS = function (input) {
  return encode(IMMUNE.CSS, input, encodeCSSCharacter, true);
};

if (Object.freeze) {
  Object.freeze(Encoder);
}

if (ZWAF$2.version === '7.0.0' && !ZWAF$2.Encoder) {
  ZWAF$2.defineProperty(ZWAF$2, 'Encoder', // No I18N
  Encoder, true, false, false, true);
}
if (!ZWAF$2['7_0_0'].Encoder) {
  ZWAF$2.defineProperty(ZWAF$2['7_0_0'], 'Encoder', // No I18N
  Encoder, true, false, false, true);
}

return ZWAF$2;

})));
