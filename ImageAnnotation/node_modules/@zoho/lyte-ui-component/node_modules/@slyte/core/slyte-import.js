let slyteGlobalConfig = {},
    runtimeCheck = {},
    fileLoaded = {};

function isFileLoaded(file) {
    let entries = Array.prototype.slice
        .apply(document.querySelectorAll('script'))
        .filter(s => s.src)
        .map(s => s.src);
    entries = entries.concat(Array.prototype.slice
        .apply(document.querySelectorAll('link'))
        .filter(s => s.href)
        .map(s => s.href));
    for (let i = 0; i < entries.length; i++) {
        if (entries[i].endsWith(file)) {
            return true;
        }
    }
    return false;
}
function pathJoin() {
    let parts;
    return (parts = Array.from(arguments)).map((part, index) => {
        (index) && (part = part.replace(new RegExp('^/'), ''));
        (index !== parts.length - 1) && (part = part.replace(new RegExp('/$'), ''));
        return part;
    }).join('/');
}

function addSlash(value) {
    return (value[0] != "/") ? "/" : "";
}

function loadSlyteFile(options) {
    let {
        staticJsPath,
        staticCssPath,
        file,
        userDefinedAttr
    } = options,
    extension = file.split('.').pop();

    if (extension === "js") {
        let fullPath = pathJoin(staticJsPath, file);
        if(!isFileLoaded(fullPath)){
            let script = document.createElement("script");
            script.src = fullPath;
            for(let attr in userDefinedAttr){
                script.setAttribute(attr, userDefinedAttr[attr]);
            }
            document.head.appendChild(script);
            fileLoaded[file] = true;
        }
    }
    if (extension === "css") {
        let fullPath = pathJoin(staticCssPath, file);
        if(!isFileLoaded(fullPath)){
            let style = document.createElement("link");
            style.rel = "stylesheet";
            style.type = "text/css";
            style.href = pathJoin(staticCssPath, file);
            for(let attr in userDefinedAttr){
                style.setAttribute(attr, userDefinedAttr[attr]);
            }
            document.head.appendChild(style);
            fileLoaded[file] = true;
        }
    }
}
const attributes = ["mapFilePath", "staticPath", "staticJsPath", "staticCssPath"];
class SlyteImport extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        let DataRequestor = new XMLHttpRequest();
        let mapFilePath = this.getAttribute("mapFilePath") || slyteGlobalConfig.mapFilePath || "/mapping.json";
        DataRequestor.open('GET', mapFilePath, true);
        DataRequestor.onreadystatechange = function () {
            if (DataRequestor.readyState === 4 && DataRequestor.status === 200) {
                let jsonData = JSON.parse(DataRequestor.responseText),
                    entry = this.data.getAttribute("fileName"),
                    runtime = "/runtime.js",
                    staticPath = this.data.getAttribute("staticPath") || slyteGlobalConfig.staticPath,
                    staticJsPath = this.data.getAttribute("staticJsPath") || slyteGlobalConfig.staticJsPath,
                    staticCssPath = this.data.getAttribute("staticCssPath") || slyteGlobalConfig.staticCssPath,
                    userDefinedAttr = {},
                    attrs = this.data.attributes;
                for(let attr of attrs){
                    if(!["staticpath","statichjspath","staticcsspath","mapfilepath","filename"].includes(attr.name)){
                        userDefinedAttr[attr.name] = attr.value;
                    }
                }
                if (staticJsPath) {
                    staticJsPath = staticJsPath.trim();
                }
                if (staticCssPath) {
                    staticCssPath = staticCssPath.trim();
                }
                if (staticPath) {
                    staticPath = staticPath.trim();
                    !staticJsPath && (staticJsPath = staticPath);
                    !staticCssPath && (staticCssPath = staticPath);
                } else {
                    staticJsPath = staticCssPath = "/";
                }
                if (window.LyteFingerPrint) {
                    entry = LyteFingerPrint.fingerPrint[entry].file.trim();
                    entry = addSlash(entry) + entry;
                    runtime = LyteFingerPrint.fingerPrint[runtime].file.trim();
                    runtime = addSlash(runtime) + runtime;
                }
                if (jsonData.path[entry]) {
                    !runtimeCheck[runtime] && jsonData.path[entry].push(runtime);
                    runtimeCheck[runtime] = true;
                    for (let i = 0; i < jsonData.path[entry].length; i++) {
                        let file = jsonData.path[entry][i];
                        if (!fileLoaded[file]) {
                            loadSlyteFile({
                                file,
                                staticJsPath,
                                staticCssPath,
                                userDefinedAttr
                            })
                        }
                    }
                } else {
                    loadSlyteFile({
                        file: entry,
                        staticJsPath,
                        staticCssPath,
                        userDefinedAttr
                    })
                }
            }
        }.bind({
            data: this
        });
        DataRequestor.send();
    }
}

customElements.define('slyte-import', SlyteImport);

class SlyteConfig extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        for (let i = 0; i < attributes.length; i++) {
            let attribute = attributes[i],
                val;
            if (val = this.getAttribute(attribute)) {
                slyteGlobalConfig[attribute] = val;
            }
        }
    }
}
customElements.define('slyte-config', SlyteConfig);