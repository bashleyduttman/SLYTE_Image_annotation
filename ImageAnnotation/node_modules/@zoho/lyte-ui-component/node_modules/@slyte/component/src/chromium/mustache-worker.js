//ignorei18n_start
//var arrayCheck = []
onmessage = function(ev) {
    var data = ev.data;
    if(!data.debug) {
        console.warn = console.log = function() {}    
    }
    var retVal;
    if(ev.data.func === "getMustache") {
        retVal = getMustache.apply(undefined, ev.data.params);
    }else if(ev.data.func === "getArray") {
        retVal = getArray.apply(undefined, ev.data.params);
    }else {
        retVal = getHelper.apply(undefined, ev.data.params);
    }
    // arrayCheck.push(retVal);
    // if(!retVal || typeof retVal === "string") {
    //     retVal = {data : retVal};
    // }
    // retVal.something = arrayCheck.length;
    postMessage(retVal);
}

function getMustache(value,componentName,syn){
    value=(value && typeof value === "string") ? value.trim() : value;
        if(/^{{(?=[\s]*[\w-_\(\$)]+)/.test(value)){
        let arr = value.match(/{{[a-zA-Z0-9_.\[\]\(\)]*(?![\\])}}/g);
            if(arr && arr.length > 1){
                console.log("length>1",value)
                return undefined;
            }
            console.log(value);
            if(!syn.bool){
                console.log("syntax error",syn)
                return {bool:false,err:syn.err};
            }
            if(!(/{{[^}]*?(?:(?:('|")[^\1]*?\1)[^}]*?)*}}$/.test(value))){
                return undefined;
            }
            let dynamic = value.match(/[\w!@#\$%\^\&*\)\(+=.,_-]+[\s]*[(]{0,1}(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#\$%\^\&*\)\(\[\]+=.,_-]*?)*?[)]{0,1}[\s]*(?=}})/g); // /* */
            if(dynamic && dynamic.length > 1){
                return undefined;
            }
            else{
                dynamic = (dynamic) ? dynamic[0].trim(): dynamic;                
            }
//            let dynamic = /[\w!@#\$%\^\&*\)\(+=.,_-]+(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#\$%\^\&*\)\(\[\]+=.,_-]*?)*?(?=}}$)/.exec(value);
            console.log("dynamic value before returning ", dynamic);
            return dynamic;
        }
        return undefined;
    }

    function syntaxCheckWorker(value){ //' " " () {{}}
        var stack = [],lastAdded,stackBraces=[],stackBracket=[],openParenthesis=0 ,i=0;
        for(i=0;i<value.length;i++){
            if(value[i] === "'"){
                if(lastAdded === "'" && value[i-1] !== "\\"){
                    stack.pop();
                    lastAdded = undefined;
                }
                else if(!stack.length){
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            }
            else if(value[i] === "\""){
                if(lastAdded === "\"" && value[i-1] !== "\\"){
                    stack.pop();
                    lastAdded = undefined;
                }
                else if(!stack.length){
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            }
            else if(value[i] === "{" && !lastAdded) {
                stackBraces.push("{");
                openParenthesis ++;
            }
            else if(value[i] === "}" && !lastAdded) {
                if(stackBraces.length){
                    stackBraces.pop();
                    openParenthesis --;
                }
                else{
                    return {bool:false,err:"unmatched '}' brackets\n"+'\x1b[33m'+value.substr(0,i-2)+'\x1b[4m'+value.substr(i-2,value.length)+'\x1b[0m'+'\x1b[31m'};
                }
            }
            else if(value[i] === "(" && !lastAdded) {
                stackBracket.push("(");
            }
            else if(value[i] === ")" && !lastAdded) {
                if(stackBracket.length){
                     stackBracket.pop();
                }
                else{
                    return {bool:false,err:"unmatched ')' brackets\n"+'\x1b[33m'+value.substr(0,i-1)+'\x1b[4m'+value.substr(i-1,value.length)+'\x1b[0m'+'\x1b[31m'};
                }
            }
            else if(stackBraces.length > 2){
                return {bool:false,err:"'{{' not allowed inside another '{{' brackets\n"+'\x1b[33m'+value.substr(0,i-2)+'\x1b[4m'+value.substr(i-2,value.length)+'\x1b[0m'+'\x1b[31m'};
            }
            
        }
        if(stack.length){
            return {bool:false,err:"unmatched Quotes"};
        }
        
        else if(stackBraces.length){
            return {bool:false,err:"unmatched '{' braces"};
        }
        else if(stackBracket.length){
            return {bool:false,err:"unmatched '(' bracket"};
        }
        else if(openParenthesis>0){
            return {bool:false,err:"unmatched '(' bracket"};
        }
        return {bool:true,err:null};
    }

    function getHelper(dynamicValue,importHelperArray,defaultHelpers){
        console.log(dynamicValue);
        let helperValue = /\((?:[^\)]*|(?:(?:"(?:[^"\\]|\\.)*?")|(?:'([^'\\]|\\.)*?')|[\w\s!@#$%^&*)([\]+=.,_-]*?)*?)\)$/.exec(dynamicValue);
        if(helperValue){
            let actObj = getHelperInfo(dynamicValue,helperValue,importHelperArray,defaultHelpers);
            if(/\[(?=([\s]*[\w-_.]+)([\(\[]))/g.test(dynamicValue)){
                actObj._t = 'hq';
            }
            // actObj._importHelperArray = importHelperArray;
            return actObj;
        }
        return undefined;
    }

    function getHelperInfo(dynamicValue, helperValue,importHelperArray,defaultHelpers){
        let helperFunc = {};
        helperFunc.name = dynamicValue.substr(0,helperValue.index).replace(/\s/g,'');
        // if(importHelperArray.indexOf(helperFunc.name) == -1 && defaultHelpers.indexOf(helperFunc.name) == -1){
        //     importHelperArray.push(helperFunc.name);   
        // }
        helperValue = (helperValue) ? helperValue[0].trim() : helperValue;
        let args = getHelperArgs(helperValue.substr(1,helperValue.length-2),importHelperArray,defaultHelpers);
        if(args === false){
            return false;
        }
        helperFunc.args = args;
        return helperFunc;
    }

    function getHelperArgs(str,importHelperArray,defaultHelpers){ 
        let stack = [],escapeQuote = false,
        stringStarted = false,
        bracketStack = [],
        args = [] , from=0;
        let lastPushed; 
        for(let i=0; i<str.length; i++){
            if(!stack.length && str.charAt(i) === ","){
                let toPush = str.substr(from,i-from);
                toPush = toPush.trim();
                if(toPush && toPush.startsWith("\"") && toPush.endsWith("\"")){
                    toPush = toPush.slice(1,-1);
                    toPush = "'" + toPush + "'";
                }
                try{
                    toPush = getHelperArgValue(toPush,importHelperArray,defaultHelpers);
                }
                catch(err){
                    console.log("errr",err);
                    if(err.message == "lbindError"){
                        return "lbindError"
                    }
                }
                args.push(toPush);
                from = i + 1;
            }
            else if(!bracketStack.length && stringStarted && str.charAt(i) === "\\" && /\\|\'|\"/g.test(str.charAt(i+1))){
                str = str.substr(0,i)  + str.substr(i+1,str.length);
            }
            else if(str.charAt(i) === "\\" && /\\/g.test(str.charAt(i+1))){
                i++;
            }
            else if(str.charAt(i) === "\\" && /\'|\"/g.test(str.charAt(i+1))){
                escapeQuote = true
            }
            else if(str.charAt(i) === "("){
                if(stack[stack.length - 1] != "'" && stack[stack.length - 1] != "\""){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
                    bracketStack.push("(");
                }
            }
            else if(str.charAt(i) === ")"){
                if(stack[stack.length-1] === "("){
                    stack.pop();
                    bracketStack.pop();
                }
            }
            else if(str.charAt(i) === "'"){// && str.charAt(i-1) !== "\\"
                if(escapeQuote){
                    escapeQuote = false;
                    continue;
                }
                else if(stack[stack.length-1] === "'"){
                    stack.pop();
                }
                else if(stack[stack.length-1] !== "\""){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
                    stringStarted = true;
                }
            }
            else if(str.charAt(i) === "\""){// && str.charAt(i-1) !== "\\"
                if(escapeQuote){
                    escapeQuote = false;
                    continue;
                }
                else if(stack[stack.length-1] === "\""){
                    stack.pop();
//                  str.replaceAt(i, "'");
                }
                else if(stack[stack.length-1] !== "'"){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
                    stringStarted = true;
//                  str.replaceAt(i, "'");
                }
            }
        }
        if(stack.length){
            return false;
        }
        let toPush = str.substr(from,str.length-from);
        toPush = toPush.trim();
        if(toPush && toPush.startsWith("\"") && toPush.endsWith("\"")){
            toPush = toPush.slice(1,-1);
            toPush = "'" + toPush + "'";
        }
        try{
            toPush = getHelperArgValue(toPush,importHelperArray,defaultHelpers);
        }
        catch(err){
            console.log("errr",err);
            if(err.message == "lbindError"){
                return "lbindError"
            }
            return false;
        }
        args.push(toPush);
        return args;
    }

    function getHelperArgValue(argValue,importHelperArray,defaultHelpers) {
        switch(argValue) {
            case "undefined" : 
                return undefined
            case "true" : 
                return true;
            case "false" : 
                return false;
            case "null" : 
                return null;
            case "" : 
                return undefined;
            default :
                if(argValue && argValue.startsWith("'") && argValue.endsWith("'")){
                    return argValue;
                }
                else if(/\[(?=([\s]*[\w-_]+)([\(\[]))/g.test(argValue) && !(/\)$/g.test(argValue))){// //array //if array inside helepr or array inside array it should work/\w+\[.*\]/g
                    let arg = this.getArrayArg(argValue,importHelperArray,defaultHelpers);
                    return arg.args[0];
                } 
                else if(/\([\w\s,')(]*/.test(argValue)) {
                    let arg = getHelper(argValue,importHelperArray,defaultHelpers);
                    if(arg === false){
                        throw new Error(argValue);
                    }
                    if(arg.name == "lbind"){
                        throw new Error("lbindError");
                    }
                    return {"type" : "helper" , "value" : arg}
                } else if(!isNaN(argValue)) {
                    return parseInt(argValue);
                } else {
                    return argValue;
                }
        }
    }function getArray(mustacheVal,importHelperArray,defaultHelpers){
        // becomses true if it is arr[arr[0]] or arr[helper()]
        if(/\[(?=([\s]*[\w-_.]+)([\(\[]))/g.test(mustacheVal) && !(/\)$/g.test(mustacheVal))){
            let arg = this.getArrayArg(mustacheVal,importHelperArray,defaultHelpers);
            if(arg && arg.args[0]){
                arg.args[0].value._t = "sq";
                return arg.args[0].value;
            }else{
                return false;
            }
        }
    }
    function getArrayArg(argStr,importHelperArray,defaultHelpers){
        //argStr may be 0 or '0' or 'abc' or a() or a[] or a(b[]) or a[b()]
        // var arg = {"type":"sq","value":{"args":[],"name":""}},arrayName;
        if(/\(.*\)$/.test(argStr)){
            //if arr comes inside helper
            let arg = this.getHelper(argStr,importHelperArray,defaultHelpers);  
            if(arg === false){
                return false;
            };
            return {"args":[{ "type": "helper", "value": arg }]}
        }
        else if(/[a-zA-z0-9]*\[.*\]/g.test(argStr)){
            let arg = {'args':[]}, ret = [], temp,arrayExtra=[],retNew = [];
            let arrayArg = /\[.*\]/.exec(argStr);
            let arrayName = argStr.substr(0,arrayArg.index);
            // arrayArg = arrayArg[0];
            //splitting multi dimensional array a[one][two][three] into array
            var arr = this.splitMultiDimensionArray(argStr,arrayExtra);
            for(var i=0; i<arr.length; i++){
                if(/\w+\[.*\]/g.test(arr[i]) || /\(.*\)$/.test(arr[i])){
                    temp = this.getArrayArg(arr[i],importHelperArray,defaultHelpers);
                    ret.push(temp.args[0])
                }else{
                    ret.push(arr[i])
                }
            }
            for(var i=0; i<arrayExtra.length; i++){
                if(/\[(?=([\s]*[\w-_.]+)([\(\[]))/g.test(arrayExtra[i])){
                    temp = this.getArrayArg(arrayExtra[i],importHelperArray,defaultHelpers);
                    retNew.push(temp.args[0])
                }else{
                    retNew.push(arrayExtra[i])
                }
            }
            ret.forEach(function(item,index){
                if (item && item && typeof item == "string" && item.startsWith("\"") && item.endsWith("\"")) {
                    item = item.slice(1, -1);
                    item = "'" + item + "'";
                }else if(typeof item == "string" && /^[0-9]$/.test(item)){
                    item = "'" + item + "'";
                }
                arg.args.push(item)
            })
            arg.name = arrayName;
            if(arg.extra){
                arg.extra = retNew;
            }
            return {"args":[{"type" : "sq" , "value" : arg}]};
        } 
    }
    function splitMultiDimensionArray(val,arrayExtra){
        var openSq = 0,lastString,stringStarted,openSPos,resultStack = [],extra = false,extraPos;
        for(var i=0 ; i<val.length;i++){
            if(val[i] == "\\"){
                i=i+1;
            }
            else if(val[i] == "'"){
                if(lastString != '"'){//val[i-1] != "\\"  &&
                    if(!stringStarted){
                        stringStarted = true;
                        lastString = "'";
                    }else{
                        stringStarted = false;
                        lastString = undefined;
                    }
                }               
            }
            else if(val[i] == '"'){
                if(lastString != "'"){//val[i-1] != "\\" &&
                    if(!stringStarted){
                        stringStarted = true;
                        lastString = '"'
                    }else{
                        stringStarted = false;
                        lastString = undefined;
                    }
                }
            }
            else if(val[i] == "[" && !stringStarted){
                openSq = openSq + 1;
                if(openSq == 1){
                    openSqPos = i;
                }
            }
            else if(val[i] == "]" && !stringStarted){
                openSq = openSq - 1;
                if(!extra && openSq == 0){
                    resultStack.push(val.substring(openSqPos+1,i));//need to handlw []
                    openSq = 0;
                    if(val[i+1]=='.'){
                        extra = true;
                        extraPos = i+1;
                    }
                }
            }
        }
        if(extra){
            arrayExtra.push(val.substring(extraPos,i));//need to handlw []
        }
        return resultStack;
    }
//ignorei18n_end
