var fs = require("fs");
var path = require("path");
var semver = require("semver");
var baseCmd = process.argv[2];
var packageDir = process.cwd();
var packageJSONPath = path.join(packageDir,"package.json");
var errorMsg ='';
let consoleLog;
let debug = process.env.npm_config_debug;
if(debug) {
    consoleLog = function(msg,debug) {
        if(debug){
            errorMsg = errorMsg + msg + "\n";
        }
    }
} else{ 
    consoleLog = function(msg,logToWrite) {
        if(logToWrite) {
            errorMsg = errorMsg + msg + "\n";
        }
        
    }
}
let forceInstallation = process.env.npm_config_force_to_install;
if(fs.existsSync(packageJSONPath)) {
    let packageConfigContent = fs.readFileSync(packageJSONPath,"utf-8");
    let jsonFormat = JSON.parse(packageConfigContent);
    let packageName = jsonFormat.name;
    let flatDependencies = jsonFormat.flatDependencies || [];
    let devDependencies = jsonFormat.devDependencies || {};
    var appPackageJSONPath = path.join(baseCmd,'package.json');
    let appNodeModules = path.join(baseCmd,"node_modules");
    let resolutionKey = {};
    let appDevDependencies = {};
    let jsonContent;

    if(fs.existsSync(appPackageJSONPath)) {
        let packageContent = fs.readFileSync(appPackageJSONPath,"utf-8");
        jsonContent = JSON.parse(packageContent);
        resolutionKey = jsonContent.resolution || {};
        appDevDependencies = jsonContent.devDependencies || {};
    }
    let checkForExistenceInApp = function(dependency,versionExpected,fullVersion) {
        let dependencyPath = path.join(appNodeModules,dependency);
        var packageDependency = jsonContent.dependencies;
        // console.log(dependencyPath, packageDependency.existsSync(dependencyPath)) //eslint-disable-line  no-console
        if(fs.existsSync(dependencyPath) || packageDependency[dependencyPath] || appDevDependencies[dependencyPath]) {
            let packageJSONPath = path.join(dependencyPath,"package.json");
            let content = fs.readFileSync(packageJSONPath,"utf-8");
            let jsonContent = JSON.parse(content);
            let version = jsonContent.version;
            if(!semver.satisfies(version,versionExpected)) {
                let rVersion;
                if(rVersion = resolutionKey[dependency]) {
                    if(!semver.satisfies(rVersion,version)) {
                        consoleLog("Error : The version of "+ dependency+" installed was different from the version mentioned in the resolution key ",true)
                        
                    }
                } else {
                    consoleLog("Error : Version mismatch occurs in the dependency "+dependency,true);
                    consoleLog("Version  expected : "+versionExpected,true);
                    consoleLog("Version installed : "+version,true);
                    consoleLog("To resolve the issue either by two ways",true);
                    consoleLog("1) Add the resolution key with the dependency name and version",true);
                    consoleLog(`
                     Example : resolution  : {
                        `+dependency+` :`+ version +`
                     }
                    }`,true)
                    consoleLog("Note : version mentioned in the resolution key will be installed automatically next time",true)
                }
            }
        } else if(resolutionKey[dependency]) {
            if(!appDevDependencies[dependency]) {
                consoleLog("Error : Missing dependencies  "+dependency,true)  
                consoleLog("Add the dependency "+dependency+"in the dependencies key",true);
                consoleLog("Note : Dependencies mentioned in the resolution key must be specified in the dependencies",true) 
            }
           
        }  else {
            consoleLog("Base folder to install npm "+baseCmd,false);
            if(forceInstallation) {
                consoleLog("Force installation",false)
                let spawnSync = require("child_process").spawnSync;
                let versionToInstalled =dependency+"@"+fullVersion;
                try{
                    var http = "http";
                    let child = spawnSync('npm',['install',versionToInstalled,'--loglevel','error', "--registry",http+'://cm-npmregistry'],{
                        cwd: baseCmd
                    });
                    if(child.stderr){
                        consoleLog(child.stderr.toString());
                    }
                }catch(e){
                    consoleLog(e.toString());
                }
           
            } else {
                consoleLog("Missing dependencies : "+dependency+"",true)
                consoleLog("The package  "+packageName+" expecting the "+dependency+" of version "+versionExpected,true);
                consoleLog("To resolve the issue add this "+dependency+" in your application",true);
               
            }
        }
    }
    let getTheVersionFromTgzUrl = function(val){
        let version = val.substring(val.lastIndexOf('-')+1,val.indexOf('.tgz'));
        return version;
    }
    for(let index =0,len = flatDependencies.length;index < len;index++) {
        
        let flatDependency = flatDependencies[index];
        let devDependency = devDependencies[flatDependency]
        if(devDependency) {
            let devVersion;
            devVersion = devDependency.includes('.tgz') ? getTheVersionFromTgzUrl(devDependency) : devDependency;
            checkForExistenceInApp(flatDependency,devVersion,devDependency);   
        }
    }
    if(errorMsg.length) {
        var con = console;
        con.log('\x1b[31m%s\x1b[0m',errorMsg);
        process.exit(2);
    }
}