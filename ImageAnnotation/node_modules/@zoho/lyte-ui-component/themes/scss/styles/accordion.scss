@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/accordion.variables.scss";

@use "../default/variables/accordion.variables.scss" as *;

lyte-accordion {
	display: block;
    position: relative;
}
lyte-accordion-item {
	margin: map.get($lyteAccordionItemMap, "margin");
	border-bottom: map.get($lyteAccordionItemMap, "border-bottom");
	display: block;
	background: map.get($lyteAccordionItemMap, "background");
    @include addExtraStyles($lyteAccordionItemMap);
}
lyte-accordion-item:hover {
	border-bottom-color: map.get($lyteAccordionItemhoverMap, "border-bottom-color");
    @include addExtraStyles($lyteAccordionItemhoverMap);
}
.lyteAccordionNested lyte-accordion:last-child lyte-accordion-item:last-child {
    border-bottom: 0;
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-header,
lyte-accordion-header {
	padding: map.get($lyteAccordionHeaderMap, "padding");
	font-family: $primaryFont;
	color: map.get($lyteAccordionHeaderMap, "color");
	font-size: map.get($lyteAccordionHeaderMap, "font-size");
	text-align: $value-textalign-left;
    outline: 0;
	position: relative;
	display: block;
	cursor: pointer;
    @include addExtraStyles($lyteAccordionHeaderMap);
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-header:hover,
lyte-accordion-header:hover {
	color: map.get($lyteAccordionHeaderhoverMap, "color");
    @include addExtraStyles($lyteAccordionHeaderhoverMap);
}
.lyteAccordionActive {
	border-bottom-color: map.get($lyteAccordionActiveMap, "border-bottom-color");
    @include addExtraStyles($lyteAccordionActiveMap);
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header:hover,
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header,
.lyteAccordionActive lyte-accordion-header {
	color: map.get($lyteAccordionActiveHeaderMap, "color");
    @include addExtraStyles($lyteAccordionActiveHeaderMap);
}
lyte-accordion-body {
	width: map.get($lyteAccordionBodyMap, "width");
	padding: map.get($lyteAccordionBodyMap, "padding");
	color: map.get($lyteAccordionBodyMap, "color");
	font-family: $primaryFont;
    font-size: map.get($lyteAccordionBodyMap, "font-size");
	text-align: $value-textalign-left;
	display: block;
	overflow: hidden;
	transition: height ease-out 0.3s, padding ease-out 0.3s;
    @include addExtraStyles($lyteAccordionBodyMap);
}
.lyteAccordionNested lyte-accordion-body {
    width: map.get($lyteNestedAccordionBodyMap, "width");
    box-sizing: border-box;
    @include addExtraStyles($lyteNestedAccordionBodyMap);
}
.lyteAccordionNested .lyteAccordionActive lyte-accordion-body {
    padding-bottom: map.get($lyteNestedAccordionActiveBodyMap, "padding-bottom");
    @include addExtraStyles($lyteNestedAccordionActiveBodyMap);
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-body,
.lyteAccordionActive lyte-accordion-body {
    padding-bottom: map.get($lyteAccordionActiveBodyMap, "padding-bottom");
    @include addExtraStyles($lyteAccordionActiveBodyMap);
}
.lyteAccordionNested .lyteAccordionActive lyte-icon.lyteAccordionArrow,
lyte-icon.lyteAccordionArrow {
    @if $useCssMaskForBg {
		mask-image: map.get($lyteAccordionArrowMap, "mask-image");
		mask-position: map.get($lyteAccordionArrowMap, "mask-position");
		background-color: map.get($lyteAccordionArrowMap, "background-color");
	} 
    @else {
		background-image: map.get($lyteAccordionArrowMap, "background-image");
		background-position: map.get($lyteAccordionArrowMap, "background-position");
	}
	width: map.get($lyteAccordionArrowMap, "width");
	height: map.get($lyteAccordionArrowMap, "height");
	position: absolute;
    #{$property-left}: map.get($lyteAccordionArrowMap, "left");
	margin-top: map.get($lyteAccordionArrowMap, "margin-top");
	display: inline-block;
    @if ($direction == rtl) {
        transform: $value-rotate-0deg;
    }
    @include addExtraStyles($lyteAccordionArrowMap);
}
.lyteAccordionNested .lyteAccordionActive > lyte-accordion-header lyte-icon.lyteAccordionArrow,
.lyteAccordionActive lyte-icon.lyteAccordionArrow {
    @if $useCssMaskForBg {
		mask-position: map.get($lyteAccordionActiveArrowMap, "mask-position");
		background-color: map.get($lyteAccordionActiveArrowMap, "background-color");
	} @else {
		background-position: map.get($lyteAccordionActiveArrowMap, "background-position");
	}
	width: map.get($lyteAccordionActiveArrowMap, "width");
	height: map.get($lyteAccordionActiveArrowMap, "height");
    @if ($direction == rtl) {
        transform: $value-rotate-180deg;
    }
    @include addExtraStyles($lyteAccordionActiveArrowMap);
}
