@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/autocomplete.variables.scss";

@use "../default/variables/autocomplete.variables.scss" as *;


lyte-autocomplete {
	position: relative;
	display: inline-block;
}
lyte-autocomplete lyte-dropdown {
	display: block;
    @include addExtraStyles($lyteAutoCompDropdownMap);
}
lyte-autocomplete lyte-dropdown lyte-drop-button {
	border:map.get($lyteAutocompDropbuttonMap, "border");
	padding:map.get($lyteAutocompDropbuttonMap, "padding");
    @include addExtraStyles($lyteAutocompDropbuttonMap);
}
lyte-autocomplete lyte-input {
    display: block;
}
lyte-autocomplete lyte-input.lyteInputBox .lyteInputBoxSearch input {
    #{$property-padding-left}:map.get($lyteAutocompSearchInputMap, "padding-left");
    @include addExtraStyles($lyteAutocompSearchInputMap);
}
lyte-autocomplete lyte-input.lyteInputBox input {
    #{$property-padding-right}:map.get($lyteAutocompleteInputMap, "padding-right");
    font-size:map.get($lyteAutocompleteInputMap, "font-size");
    @include addExtraStyles($lyteAutocompleteInputMap);
}
lyte-autocomplete.searchPresent lyte-input.lyteInputBox input {
    #{$property-padding-right}:map.get($lyteAutocompleteInputWithSearchMap, "padding-right");
    @include addExtraStyles($lyteAutocompleteInputWithSearchMap);
}
lyte-autocomplete .lyteDropButtonDown lyte-input.lyteInputBox .lyteField,
lyte-autocomplete .lyteDropButtonDown lyte-input.lyteInputBox input {
    border-radius:map.get($lyteAutocompDropOpenDownInputMap, "border-radius");
    @include addExtraStyles($lyteAutocompDropOpenDownInputMap);
}
lyte-autocomplete .lyteDropButtonUp lyte-input.lyteInputBox .lyteField,
lyte-autocomplete .lyteDropButtonUp lyte-input.lyteInputBox input {
    border-radius:map.get($lyteAutocompDropOpenUpInputMap, "border-radius");
    @include addExtraStyles($lyteAutocompDropOpenUpInputMap);
}
lyte-autocomplete lyte-dropdown lyte-drop-button.lyteDropButtonUp,
lyte-autocomplete lyte-dropdown lyte-drop-button.lyteDropButtonDown,
lyte-autocomplete lyte-dropdown .lyteDummyEventContainer:focus lyte-drop-button,
lyte-autocomplete lyte-dropdown .lyteDummyEventContainer:focus lyte-drop-button:hover,
lyte-autocomplete lyte-dropdown lyte-drop-button:hover,
lyte-autocomplete lyte-dropdown lyte-drop-button.lyteDropButtonDown:hover,
lyte-autocomplete lyte-dropdown lyte-drop-button.lyteDropButtonUp:hover {
	border:map.get($lyteAutocompDropbuttonMap, "border");
    box-shadow: none;
    @include addExtraStyles($lyteAutocompDropbuttonMap);
}
lyte-autocomplete lyte-dropdown .lyteDummyEventContainer:focus .lyteField,
lyte-autocomplete .lyteDropButtonDown lyte-input.lyteInputBox .lyteField,
lyte-autocomplete .lyteDropButtonUp lyte-input.lyteInputBox .lyteField {
	border:map.get($lyteAutocompDropdownFocusedInputFieldMap, "border");
    @include addExtraStyles($lyteAutocompDropdownFocusedInputFieldMap);
}
.lyteAutoCompCloseIcon {
    @if $useCssMaskForBg {
		mask-image: map.get($lyteAutoCompCloseIconMap, "mask-image");
		mask-position: map.get($lyteAutoCompCloseIconMap, "mask-position");
		background-color: map.get($lyteAutoCompCloseIconMap, "background-color");
	} @else {
		background-image: map.get($lyteAutoCompCloseIconMap, "background-image");
		background-position: map.get($lyteAutoCompCloseIconMap, "background-position");
	}
    width:map.get($lyteAutoCompCloseIconMap, "width");
    height:map.get($lyteAutoCompCloseIconMap, "height");
    display: inline-block;
    vertical-align: top;
    @include addExtraStyles($lyteAutoCompCloseIconMap);
}
.lyteAutoCompCloseIconWrapper {
	#{$property-right}:map.get($lyteAutocompCloseMap, "right");
	top:map.get($lyteAutocompCloseMap, "top");
	padding:map.get($lyteAutocompCloseMap, "padding");
    height:map.get($lyteAutocompCloseMap, "height");
	position: absolute;
	cursor: pointer;
	z-index: 10;
	opacity:map.get($lyteAutocompCloseMap, "opacity");
    @include addExtraStyles($lyteAutocompCloseMap);
}
lyte-autocomplete.searchPresent .lyteAutoCompCloseIconWrapper {
    #{$property-right}:map.get($lyteAutocompCloseWithSearchMap, "right");
    @include addExtraStyles($lyteAutocompCloseWithSearchMap);
}
.lyteAutoCompCloseIconWrapper:hover {
	opacity:map.get($lyteAutocompCloseHoverMap, "opacity");
    @include addExtraStyles($lyteAutocompCloseHoverMap);
}
lyte-autocomplete lyte-input[lt-prop-type="search"] .searchIcon {
    #{$property-left}: auto;
    #{$property-right}:map.get($lyteAutocompSearchMap, "right");
	top:map.get($lyteAutocompSearchMap, "top");
	z-index: 10;
	cursor: default;
	opacity:map.get($lyteAutocompSearchMap, "opacity");
    @include addExtraStyles($lyteAutocompSearchMap);
}
.iconSeparator {
	height:map.get($lyteAutoCompIconSeparatorMap, "height");
    #{$property-border-right}:map.get($lyteAutoCompIconSeparatorMap, "border-right");
    #{$property-right}:map.get($lyteAutoCompIconSeparatorMap, "right");
	top:map.get($lyteAutoCompIconSeparatorMap, "top");
	display: inline-block;
	position: absolute;
	z-index: 10;
    @include addExtraStyles($lyteAutoCompIconSeparatorMap);
}
lyte-autocomplete-description {
	opacity:map.get($lyteAutoCompDescMap, "opacity");
    font-size:map.get($lyteAutoCompDescMap, "font-size");
    align-self: center;
    white-space: nowrap;
    @include addExtraStyles($lyteAutoCompDescMap);
}
.lyteautocompleteError {
	display: block;
    box-sizing: border-box;
    text-align: center;
    font-size:map.get($lyteAutocompleteErrorMap, "font-size");
    color:map.get($lyteAutocompleteErrorMap, "color");
    padding:map.get($lyteAutocompleteErrorMap, "padding");
    @include addExtraStyles($lyteAutocompleteErrorMap);
}
lyte-drop-item .lyteAutoComplete {
	color:map.get($lyteAutocompDropItemMap, "color");
	font-family: $primaryFont;
    max-width:map.get($lyteAutocompDropItemMap, "max-width");
    overflow-wrap: break-word;
    @include addExtraStyles($lyteAutocompDropItemMap);
}
.lyteautocompleteDropdown {
    border:map.get($lyteAutocompleteDropdownMap, "border");
	border-top:map.get($lyteAutocompleteDropdownMap, "border-top");
    box-shadow:map.get($lyteAutocompleteDropdownMap, "box-shadow");
    @include addExtraStyles($lyteAutocompleteDropdownMap);
}
.lyteautocompleteDropdown.lyteDropdownDown {
	transform:map.get($lyteAutocompleteDropdownDownMap, "transform");
    @include addExtraStyles($lyteAutocompleteDropdownDownMap);
}
.lyteautocompleteDropdown.lyteDropdownUp {
	transform:map.get($lyteAutocompleteDropdownUpMap, "transform");
    @include addExtraStyles($lyteAutocompleteDropdownUpMap);
}
.lyteautocompleteDropdown lyte-drop-item {
    #{$property-padding-left}:map.get($lyteAutocompDropdownItemMap, "padding-left");
    display: flex;
    @include addExtraStyles($lyteAutocompDropdownItemMap);
}
.lyteautocompleteDropdown lyte-drop-item[selected='true']::before {
    content: none;
}
.lyteautocompleteHighlight {
	color:map.get($lyteAutocompleteHighlightMap, "color");
    background:map.get($lyteAutocompleteHighlightMap, "background");
    @include addExtraStyles($lyteAutocompleteHighlightMap);
}
.lyteautocompleteDropdown lyte-drop-item.lyteSearchHidden {
	display: none;
}
