@use "sass:map";

@use "../default/global/global.variables.scss" as *;

@use "../default/global/rtl.scss" as *;

@forward "../default/variables/expresstable.variables.scss";

@use "../default/variables/expresstable.variables.scss" as *;

lyte-expresstable {
	display: block;
	height: 100%;
	max-height: inherit;
}
.lyteExpTableOrigTableWrapper {
	height: 100%;
	position: relative;
	max-height: inherit;
}
.lyteExpTableFixedColHeader {
	z-index: 1;
	box-shadow: map.get($lyteExpTableFixedColHeaderMap, "box-shadow");
	position: absolute;
	background: map.get($lyteExpTableFixedColHeaderMap, "background");
	#{$property-border-right}: map.get($lyteExpTableFixedColHeaderMap, "border-right");
    @include addExtraStyles($lyteExpTableFixedColHeaderMap);
}
.lyteExpTableWrapper {
	width: 100%;
	height: 100%;
	overflow: hidden;
	position: relative;
	border: map.get($lyteExpTableWrapperMap, "border");
	max-height: inherit;
    @include addExtraStyles($lyteExpTableWrapperMap);
}
.lyteExpTableSortableHelperCont {
	position: absolute;
	z-index: map.get($lyteExpTableSortableHelperContMap, "z-index");
	pointer-events: none;
	transform: map.get($lyteExpTableSortableHelperContMap, "transform");
	overflow:hidden;
	background: map.get($lyteExpTableSortableHelperContMap, "background");
	will-change: transform;
    @include addExtraStyles($lyteExpTableSortableHelperContMap);
}
.lyteExpTableSortableHelperCont .lyteExpTableHead {
	position: relative;
	z-index: 5;
}
.lyteExpTableFakeHeaderWrapper {
	position: absolute;
	display: flex;
	left: map.get($lyteExpTableFakeHeaderWrapperMap, "left");
	right: map.get($lyteExpTableFakeHeaderWrapperMap, "right");
	top: map.get($lyteExpTableFakeHeaderWrapperMap, "top");
	overflow: hidden;
	background: map.get($lyteExpTableFakeHeaderWrapperMap, "background");
    z-index: map.get($lyteExpTableFakeHeaderWrapperMap, "z-index");
    @include addExtraStyles($lyteExpTableFakeHeaderWrapperMap);
}
.lyteExpTableFakeHeaderShow {
	opacity: 1;
	z-index: 10;
}
lyte-exptable {
	display: table;
}
.lyteExpTableHeaderGroup,
lyte-exptable-thead {
	display: table-header-group;
}
.lyteExpTableRowGroup,
lyte-exptable-tbody {
	display: table-row-group;
}
lyte-exptable-tr {
	display: table-row;
}
lyte-expresstable .lyteExpTableHide {
    display: none;
}
.lyteExpTableHeaderGroup lyte-exptable-th,
.lyteExpTableHeaderGroup lyte-exptable-tr {
	-ms-transform: inherit;
}
@supports (-ms-ime-align: auto) {   /*  This code targets only Edge browser    */
	.lyteExpTableHeaderGroup lyte-exptable-th,
	.lyteExpTableHeaderGroup lyte-exptable-tr {
	   transform: inherit;
    }
}
.lyteExpAccordionTable td,
lyte-exptable-th,
lyte-exptable-td {
	display: table-cell;
	text-align: $value-textalign-left;
	padding: map.get($lyteExpTableHeadAndCellMap, "padding");
	border-bottom: map.get($lyteExpTableHeadAndCellMap, "border-bottom");
    white-space: nowrap;
    @include addExtraStyles($lyteExpTableHeadAndCellMap);
}
lyte-exptable-th {
	background: map.get($lyteExpTableHeadMap, "background");
	border-bottom: 0;
	box-sizing: border-box;
	white-space: nowrap;
    position: relative;
	min-width: map.get($lyteExpTableHeadMap, "min-width");
	color: map.get($lyteExpTableHeadMap, "color");
    @include addExtraStyles($lyteExpTableHeadMap);
}
lyte-exptable-td {
	color: map.get($lyteExpTableTdMap, "color");
    @include addExtraStyles($lyteExpTableTdMap);
}
.lyteExpTableOrigTableInnerWrap {
    overflow: auto;
    height: 100%;
	max-height: inherit;
}
.lyteExpOriginalTable {
    width: 100%;
}
.lyteExpTableOrigTableInnerWrap .lyteExpTableHeaderGroup {
    opacity: 0;
}
.lyteExpTableFixedColWrapper {
	position: absolute;
	background: map.get($lyteExpTableFixedColWrapperMap, "background");
	#{$property-border-right}: map.get($lyteExpTableFixedColWrapperMap, "border-right");
	z-index: 5;
    overflow-x: hidden;
    overflow: -moz-scrollbars-none;
    -ms-overflow-style: none;
    scrollbar-width: none;
    box-shadow: map.get($lyteExpTableFixedColWrapperMap, "box-shadow");
    height: map.get($lyteExpTableFixedColWrapperMap, "height");
    @include addExtraStyles($lyteExpTableFixedColWrapperMap);
}
.lyteExpTableNoShadow .lyteExpTableFixedColHeader,
.lyteExpTableNoShadow .lyteExpTableFixedColWrapper {
    box-shadow: none;
    #{$property-border-right}: map.get($lyteExpTableFixedColWrapperNoShadowMap, "border-right");
    @include addExtraStyles($lyteExpTableFixedColWrapperNoShadowMap);
}
.lyteExpTableFixedColWrapper::-webkit-scrollbar {
    width: 0;
}
.lyteExpSortableTable .lyteExpTableSortableColumn {
	opacity: 0;
}
.lyteExpTableFixedColTable {
	position: relative;
	z-index: 1;
	display: table;
	will-change: transform;
}
lyte-exptablehead-resize {
    cursor: ew-resize;
    height: map.get($lyteExpTableHeadResizeMap, "height");
    width: map.get($lyteExpTableHeadResizeMap, "width");
    top: map.get($lyteExpTableHeadResizeMap, "top");
    z-index: map.get($lyteExpTableHeadResizeMap, "z-index");
    #{$property-right}: map.get($lyteExpTableHeadResizeMap, "right");
    position: absolute;
    @include addExtraStyles($lyteExpTableHeadResizeMap);
}
lyte-exptablehead-resize::after {
    content: '';
    position: absolute;
    width: map.get($lyteExpTableHeadResizeAfterMap, "width");
    height: map.get($lyteExpTableHeadResizeAfterMap, "height");
    #{$property-right}: map.get($lyteExpTableHeadResizeAfterMap, "right");
    background: transparent;
    @include addExtraStyles($lyteExpTableHeadResizeAfterMap);
}
lyte-exptablehead-resize:hover::after {
    background: map.get($lyteExpTableHeadResizeHoverAfterMap, "background");
    @include addExtraStyles($lyteExpTableHeadResizeHoverAfterMap);
}
.lyteExpTableFixedColHeader lyte-exptablehead-resize {
    display: none;
}
lyte-expresstable.tableLayoutFixed lyte-exptable{
    table-layout: fixed;
}
lyte-exptable-th:last-of-type lyte-exptablehead-resize {
    #{$property-right}: 0;
}
.lyteExpTableFakeColHeaderWrapper {
    display: table;
    table-layout: fixed;
}
.lyteFixHeaderDisplayNone {
    display: none;
}
/*  Sticky Express Table CSS BEGINS    */
.lyteExpStickyInterSection {
    position: absolute;
    width: 1px;
    height: 10px;
    top: 20px;
    opacity: 0;
    will-change: left, top, right;
    pointer-events: none;
    z-index: -1;
}
.lyteExpStickyTable .lyteExpTableWrapper {
    overflow: auto;
    border: map.get($lyteExpStickyTableWrapperMap, "border");
    @include addExtraStyles($lyteExpStickyTableWrapperMap);
}
.lyteExpStickyTable .lyteExpTableOrigTableInnerWrap {
    display: block;
    width: map.get($lyteExpStickyTableInnerWrapMap, "width");
    position: relative;
    border: map.get($lyteExpStickyTableInnerWrapMap, "border");
    box-sizing: border-box;
    @include addExtraStyles($lyteExpStickyTableInnerWrapMap);
}
.lyteExpStickyTable .lyteExpTableOrigTableInnerWrap .lyteExpTableHeaderGroup {
    opacity: map.get($lyteExpStickyTableHeaderGroupMap, "opacity");
    @include addExtraStyles($lyteExpStickyTableHeaderGroupMap);
}
.lyteExpStickyTable lyte-exptable-th {
    position: -webkit-sticky;
    position: sticky;
    top: map.get($lyteExpStickyTableThMap, "top");
    z-index: map.get($lyteExpStickyTableThMap, "z-index");
    background: map.get($lyteExpStickyTableThMap, "background");
    @include addExtraStyles($lyteExpStickyTableThMap);
}
.lyteExpStickyTable lyte-exptable-th.lyteFixedColumn {
    z-index: map.get($lyteExpStickyTableThFixedColMap, "z-index");
    @include addExtraStyles($lyteExpStickyTableThFixedColMap);
}
.lyteExpAccordionTable td.lyteFixedColumn,
.lyteExpStickyTable lyte-exptable-td.lyteFixedColumn {
    position: sticky;
    z-index: map.get($lyteExpStickyTableTdFixedColMap, "z-index");
    background: map.get($lyteExpStickyTableTdFixedColMap, "background");
    @include addExtraStyles($lyteExpStickyTableTdFixedColMap);
}

/*  Sticky Express Table CSS ENDS    */

.lyteExpTableDummyColumn {
	position: absolute;
	z-index: map.get($lyteExpTableDummyColumnMap, "z-index");
	background: map.get($lyteExpTableDummyColumnMap, "background");
	color: map.get($lyteExpTableDummyColumnMap, "color");
	outline: map.get($lyteExpTableDummyColumnMap, "outline");
	padding: map.get($lyteExpTableDummyColumnMap, "padding");
	box-sizing: border-box;
	cursor: move;
    @include addExtraStyles($lyteExpTableDummyColumnMap);
}

/*  Accordion Table BEGINS  */
.lyteExpAccordionTable lyte-exptable {
	table-layout: fixed;
}
.lyteExpAccordionTable td {
	white-space: pre-line;
	overflow-wrap: break-word;
}
.lyteExpTableAccordionContent .lyteExpressAccordionTdChild,
.lyteExpTableAccordionContent lyte-td-wrap {
	transform-origin: top;
	overflow: hidden;
	max-height: var(--tableMaxHeight);
	display: block;
}
.lyteExpTableHideStart .lyteExpTableAccordionContent td {
	padding: 0 15px;
	border-bottom-width: 0;
}
.lyteExpTableHideStart .lyteExpTableAccordionContent .lyteExpressAccordionTdChild,
.lyteExpTableHideStart .lyteExpTableAccordionContent lyte-td-wrap {
	max-height: 0px;
}
.lyteExpTableAccordionAnimation .lyteExpTableAccordionContent td {
	transition: padding 0.3s linear, border-width 0.3s linear;
}
.lyteExpTableAccordionAnimation .lyteExpTableAccordionContent .lyteExpressAccordionTdChild,
.lyteExpTableAccordionAnimation .lyteExpTableAccordionContent lyte-td-wrap {
	transition: max-height 0.3s linear;
}
.lyteExpTbodyClosed .lyteExpTableAccordionContent {
	display: none;
}
