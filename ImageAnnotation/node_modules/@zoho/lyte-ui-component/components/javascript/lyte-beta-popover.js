import { prop } from "@slyte/core";
import { Component, objectUtils } from "@slyte/component";

/* @Slicer.otherframeworkStart */
import "../../plugins/lyte-trapFocus.js";
/* @Slicer.otherframeworkEnd */

var _lyteBetaPopover = {}
window.addEventListener('click' , function(eve){
	if(LytePopup._stopPropagation){
		LytePopup._sourceComp.setData('ltPropStopClick', false);
		return;
	}
	if(_lyteUiUtils.popupStack){
		if(_lyteUiUtils.popupStack.globalStack && _lyteUiUtils.popupStack.betaPopoverStack.length > 0){
			var lastPopup = _lyteUiUtils.popupStack.globalStack[ _lyteUiUtils.popupStack.globalStack.length - 1 ]
			if(
				(_lyteUiUtils.popupStack.globalStack[_lyteUiUtils.popupStack.globalStack.length-1].parentElement === _lyteUiUtils.popupStack.betaPopoverStack[_lyteUiUtils.popupStack.betaPopoverStack.length-1].parentElement) ||
				(_lyteUiUtils.popupStack.globalStack[_lyteUiUtils.popupStack.globalStack.length-1].parentElement.tagName === 'LYTE-POPOVER')
				){
				if(lastPopup.parentElement.tagName === "LYTE-BETA-POPOVER" && $L(lastPopup.parentElement).hasClass('lytePopoverOpened') && ($L(eve.target).attr('id') !== 'lytedropdownfreezelayer') && (eve.target.tagName !== 'LYTE-DROP-ITEM')){
					if($L(eve.target).closest('.lytePopoverElement')[0]){
						return;
					}
					if(!lastPopup.parentElement.getData('ltPropCloseOnBodyClick')){
						return
					}
					lastPopup.parentElement.setData('ltPropShow' , false);
				} else {
					lastPopup = _lyteUiUtils.popupStack.betaPopoverStack[ _lyteUiUtils.popupStack.betaPopoverStack.length - 1 ]
					if(!lastPopup.parentElement.getData('ltPropCloseOnBodyClick')){
						return
					}
					lastPopup.parentElement.setData('ltPropShow' , false);
				}
			}
		}
	}
},true);

window.addEventListener('resize' , function(eve){
	if(_lyteUiUtils.popupStack){
		if(_lyteUiUtils.popupStack.globalStack && _lyteUiUtils.popupStack.betaPopoverStack.length > 0){
			for(var i=0;i<_lyteUiUtils.popupStack.betaPopoverStack.length;i++){
				var currentPopup = _lyteUiUtils.popupStack.betaPopoverStack[i].parentElement
				currentPopup.component.setPopoverPosition()
			}
		}
	}
},true);

_lyteBetaPopover.scrollHandler = function(){
	if(_lyteUiUtils.popupStack){
		if(_lyteUiUtils.popupStack.globalStack && _lyteUiUtils.popupStack.betaPopoverStack.length > 0){
			for(var i=0;i<_lyteUiUtils.popupStack.betaPopoverStack.length;i++){
				var currentPopup = _lyteUiUtils.popupStack.betaPopoverStack[i].parentElement
				if(currentPopup){
					if(currentPopup.getData('ltPropCloseOnScroll')){
						currentPopup.setData('ltPropShow' , false);
						return;
					}
	
					var currentWormhole = _lyteUiUtils.popupStack.betaPopoverStack[i].childElement
					if(currentWormhole && currentPopup.getData('ltPropScrollable')){
	
						currentPopup.component.setPopoverPosition()
	
					}

					if(!currentPopup.component.isPopoverInBoundary()){
						currentPopup.setData('ltPropShow' , false);
						return;
					}

					if(!currentPopup.getData('ltPropForceScroll')){
						currentPopup.component.isOriginElemInViewport()
					}

				}


			}
		}
	}
}

window.addEventListener('scroll' , function(eve){
	_lyteBetaPopover.scrollHandler()
},true)
window.addEventListener('wheel' , function(eve){
	_lyteBetaPopover.scrollHandler()
},true)

class LyteBetaPopoverComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropShow : prop('boolean' , {
				default : false
			}),
			ltPropType : prop("string",{
				default : "callout"
			}),
			ltPropFreeze : prop("boolean",{
				default : true
			}),
			ltPropShowCloseButton : prop("boolean",{
				default : true
			}),
			ltPropCloseOnEscape : prop('boolean' ,{
				default : true
			}),
			ltPropOriginElem : prop('string' ,{
				default : ''
			}),
			ltPropPosition : prop('string' ,{		// ----> pending Not mentioned in docs
				default : "bottom"
			}),
			ltPropPlacement : prop("string" ,{
				default : "rightCenter"
			}),
			ltPropDimmer : prop( "object" ,{
				default : {"color":"black","opacity":"0.4"}
			}),
			ltPropDraggable : prop( "boolean" ,{
				default : false
			}),
			ltPropAllowMultiple : prop("boolean" ,{
				default : false
			}),
			ltPropScrollable : prop("boolean" ,{
				default: false
			}),
			ltPropMaxHeight : prop("string" ,{
				default : ""
			}),
			ltPropMaxWidth : prop("string" ,{
				default : ""
			}),
			ltPropWidth : prop('string' , {
				default : ""
			}),
			ltPropHeight : prop('string' , {
				default : ""
			}),	
			ltPropWrapperClass : prop('string' ,{
				default : ""
			}),
			ltPropBoundary : prop("object" ,{
				default : {}
			}),
			ltPropCloseOnBodyClick : prop('boolean' , {
				default : true
			}),
			ltPropDuration : prop('string' , {
				default : "400"
			}),
			ltPropOffset : prop('object' ,{
				default : {}
			}),
			ltPropOffsetFromTarget : prop( "object" ,{		// ----> pending not mentioned in docs
				default : {}
			}),
			ltPropBindToBody : prop('boolean' , {
				default : false
			}),
			ltPropHeaderPadding : prop( "string" ,{
				default : ""
			}),
			ltPropContentPadding : prop( "string" ,{
				default : ""
			}),
			ltPropFooterPadding : prop( "string" ,{
				default : ""
			}),
			ltPropAnimation : prop("string" ,{
				default : "fade"
			}),
			ltPropWindowSpacing : prop("object"),		// ----> pending

			ltPropForceScroll : prop( 'boolean' ,{
				default : false 
			}),
			ltPropAutoAlign : prop( 'boolean' ,{
				default : false
			}),
			ltPropPreventFocus : prop('boolean' ,{
				default : false 
			}),
			ltPropStopClick : prop( 'boolean' ,{
				default : false
			}),
			ltPropIgnoreBoundary : prop( 'boolean' ,{		// ----> pending
				default : false
			}),
			ltPropMargin : prop('object',{default : {}}),

			ltPropCloseOnScroll : prop( 'boolean' ,{
				default : false
			}),
			ltPropAllowContainment : prop('boolean' , {
                default : false
            }),
            ltPropIgnoreInput : prop('boolean' , {		// ----> pending
                default : false
            }),
            ltPropFocusOnClose : prop('boolean' , {		// ----> pending
                default : false
            }),

			ltPropAria : prop( 'boolean' ,{ 		// ----> pending
				default : false
			}),
			ltPropAriaAttributes : prop( 'object' ,{ 		// ----> pending
				default : {} 
			}),
			
			
			ltPropScaleFrom : prop('number' , {
				default: 0
			}),
			ltPropShowWormhole : prop('boolean' , {
				default : false
			}),
			ltPropHostElement : prop('string' , {
                default : ''
            }),

			initialPopoverDim : prop('object',{
				default : {
					top : 0,
					left : 0,
					right : 0,
					bottom : 0,
					width : 0,
					height : 0
				}
			}),
			initialMouseDown : prop('object' , {
			default : {
				clientX : 0,
				clientY : 0
			}
			}),
			initialComputedPopoverDim : prop('object' , {
			default : {
				left : 0,
				top : 0
			}
			}),
			prevOffsetVal : prop('object' , {
				default : {}
			}),
			finalPlacement : prop('string' , {
				default : 'bottom'
			})


		};		
	}

    init() {
		var _this = this;
		if(!_lyteUiUtils.lytePopoverKeyDown){
			_lyteUiUtils.lytePopoverKeyDown = true
			document.addEventListener('keydown' , function(evt){
				var popoverArr = []
				var popStack = []
				if(_lyteUiUtils.popupStack && _lyteUiUtils.popupStack.betaPopoverStack){
					popoverArr = _lyteUiUtils.popupStack.betaPopoverStack
				}
				if(_lyteUiUtils.popupStack && _lyteUiUtils.popupStack.globalStack){
					popStack = _lyteUiUtils.popupStack.globalStack
				}

				var isEscape = false;
				var isTabPressed = false;
				var isEnter = false;

				if ("key" in evt) {
					isEscape = (evt.key == "Escape" || evt.key == "Esc");
					isTabPressed = (evt.key == "Tab");
					isEnter = (evt.key == "Enter");
				} else {
					isEscape = (evt.keyCode == 27);
					isTabPressed = (evt.keyCode == 9);
					isEnter = (evt.keyCode == 13);
				}
				if(isEscape){
					if(popoverArr && popoverArr.length > 0){
						if(popoverArr[popoverArr.length - 1].parentElement.getData('ltPropCloseOnEscape')){
							if(popStack[popStack.length-1] === popoverArr[popoverArr.length-1]){
								popoverArr[popoverArr.length - 1].parentElement.setData('ltPropShow' , false);
							}
						}
					}
				}
			})
		}

		this.$node.changeOriginElement = function(){



		}

	}

    static actions() {
        return {
            closePopover : function(){
                this.setData('ltPropShow' , false);
            }	
            // Functions for event handling
        };
    }

    static methods() {
        return {
            beforeWormholeAppend : function(arg){
                if(this.childComp){
                    delete this.childComp;
                }
                if(this.actualPopoverDiv){
                    delete this.actualPopoverDiv;
                }
                this.childComp = arg;
                this.actualPopoverDiv = $L(this.childComp).find(".lytePopoverElement")[0];

                if(this.getData('ltPropDraggable')){
                    if($L(this.childComp).find('lyte-popover-header')[0]){
                        $L(this.childComp).find('lyte-popover-header')[0].style.cursor="move";
                        $L(this.childComp).find('lyte-popover-header')[0].addEventListener('mousedown' , this.mousedownFun)
                    }
                }

                // //Sets the padding style based on user provide padding values
                // if(this.$node.parentElement && this.$node.parentElement.tagName == 'LYTE-COLORPICKER'){
                //     this.$node.parentElement.component.childComp = this.childComp;
                // }
                // if(this.childComp.querySelector('lyte-popover-header')){
                //     this.childComp.querySelector('lyte-popover-header').style.padding = this.getData('ltPropHeaderPadding');
                // }
                // if(this.childComp.querySelector('lyte-popover-content')){
                //     this.childComp.querySelector('lyte-popover-content').style.padding = this.getData('ltPropContentPadding');
                // }
                // if(this.childComp.querySelector('lyte-popover-footer')){
                //     this.childComp.querySelector('lyte-popover-footer').style.padding = this.getData('ltPropFooterPadding');
                // }
                // this.actualPopoverDiv = this.childComp.querySelector(".lytePopover");
                // if(this.childComp.querySelector('lyte-popover-header') && this.getData('ltPropShowCloseButton')){
                //     var headerHeight=0, closeHeight= 0;
                //     $L.fastdom.measure(function(){
                //         headerHeight = this.childComp.querySelector('lyte-popover-header').offsetHeight /*this.childComp.querySelector('lyte-popover-header').getBoundingClientRect().height*/;
                //         closeHeight = this.childComp.querySelector('.lytePopoverClose').offsetHeight /*this.childComp.querySelector('.lytePopoverClose').getBoundingClientRect().height*/;
                //     },this);
                //     $L.fastdom.mutate(function(){
                //         this.childComp.querySelector('.lytePopoverClose').style.top = (headerHeight - closeHeight) / 2 + "px";
                //     },this);
                // }
            }
        };
    }

    //Mouse event functions
    mousedownFun(eve) {
		$L(this).addClass('lytePopoverDragRunning')
		var getBcr = $L(this)[0].getBoundingClientRect()
		var _this = $L(this).closest('lyte-wormhole')[0].component.parent.component

		// if((_this.getData('initialMouseDown').clientX === 0) && (_this.getData('initialMouseDown').clientY === 0)){
			objectUtils(_this.getData('initialMouseDown') , 'add' , 'clientX' , eve.clientX)
			objectUtils(_this.getData('initialMouseDown') , 'add' , 'clientY' , eve.clientY)
		// }

		var innerPopoverElementRect = _this.actualPopoverDiv.getBoundingClientRect();
		var modalWrapperElem = _this.actualPopoverDiv.parentElement;
		$L(modalWrapperElem).removeClass('lyteModalVerticalMiddleAlign lyteModalHorizontalCenterAlign lyteModalBottomAlign lyteModalRightAlign').addClass('lyteModalTopAlign lyteModalLeftAlign');
		_this.actualPopoverDiv.style.top = innerPopoverElementRect.top + 'px';
		_this.actualPopoverDiv.style.left = innerPopoverElementRect.left + 'px';
		_this.actualPopoverDiv.style.bottom = '';
		_this.actualPopoverDiv.style.right = '';

		_this.actualPopoverDiv.style.transition = 'none';

		objectUtils(_this.getData('initialComputedPopoverDim') , 'add' , 'left' , parseFloat(getComputedStyle($L(_this.actualPopoverDiv)[0]).left))
		objectUtils(_this.getData('initialComputedPopoverDim') , 'add' , 'top' , parseFloat(getComputedStyle($L(_this.actualPopoverDiv)[0]).top))
		window.addEventListener('mouseup' , _this.mouseupFun)
		window.addEventListener('mousemove' , _this.mousemoveFun);
	}

    mousemoveFun(eve) {
		var dragHeader = $L('.lytePopoverDragRunning')
		var popoverEle = $L(dragHeader).closest('.lytePopoverElement')[0]
		var popoverComp = $L(dragHeader).closest('lyte-wormhole')[0].component.parent;

		popoverComp.setData('ltPropType' , 'box')

		popoverEle.style.left = popoverComp.getData('initialComputedPopoverDim').left - (popoverComp.getData('initialMouseDown').clientX - eve.clientX) + "px"
		popoverEle.style.top = popoverComp.getData('initialComputedPopoverDim').top - (popoverComp.getData('initialMouseDown').clientY - eve.clientY) + "px"
		if(popoverComp.getData('ltPropAllowContainment')){
			if((popoverComp.getData('initialComputedPopoverDim').left - (popoverComp.getData('initialMouseDown').clientX - eve.clientX)) <= 0){
				popoverEle.style.left = "0px"
			}
			if((popoverComp.getData('initialComputedPopoverDim').top - (popoverComp.getData('initialMouseDown').clientY - eve.clientY))<= 0){
				popoverEle.style.top = "0px"
			}
			if((popoverComp.getData('initialComputedPopoverDim').left - (popoverComp.getData('initialMouseDown').clientX - eve.clientX)) + popoverComp.getData('initialPopoverDim').width >= window.innerWidth){
				popoverEle.style.left = (window.innerWidth - popoverComp.getData('initialPopoverDim').width) + "px"
			}
			if((popoverComp.getData('initialComputedPopoverDim').top - (popoverComp.getData('initialMouseDown').clientY - eve.clientY)) + popoverComp.getData('initialPopoverDim').height >= window.innerHeight){
				popoverEle.style.top = (window.innerHeight - popoverComp.getData('initialPopoverDim').height) + "px"
			}
		}
	}

    mouseupFun(eve) {
		var dragHeader = $L('.lytePopoverDragRunning')
		var _this = $L('.lytePopoverDragRunning').closest('lyte-wormhole')[0].component.parent.component

		dragHeader.removeClass('lytePopoverDragRunning')
		window.removeEventListener('mousemove' , _this.mousemoveFun);
		window.removeEventListener('mouseup' , _this.mouseupFun);
		
	}

    //Component functions
    addMutationObserver() {
        var lyteSelf = this;
        if(this.getData('ltPropAutoAlign')){
            var popover = this.$node,
            targetNode = this.actualPopoverDiv, reAlign, config;
            this.setData('prevOffsetVal', {
                    height : this.actualPopoverDiv.offsetHeight,
                    width : this.actualPopoverDiv.offsetWidth
                });
            popover.mutobserver = new MutationObserver( function( mutations ) {
                if(this.getData('ltPropAutoAlign')){
                    var popoverElem = this.actualPopoverDiv;
                    var prevOffsetVal = this.getData('prevOffsetVal');
                    var offsetWidth = popoverElem.offsetWidth;
                    var offsetHeight = popoverElem.offsetHeight;
                    for( var i = 0; i < mutations.length; i++ ) {
                        // console.log(mutations[ i ].type + " ====== " + mutations[i].attributeName);
                        if( ((mutations[ i ].type === 'attributes')/* && mutations[ i ].attributeName === 'style'*/) || mutations[i].type == 'childList' || mutations[i].type == 'subtree' ) {
                            if(prevOffsetVal.width != offsetWidth || prevOffsetVal.height != offsetHeight){
                                reAlign = true;
                                this.setData('prevOffsetVal', {
                                    height : offsetHeight,
                                    width : offsetWidth
                                })
                                break;
                            }
                        }
                    }
                    if(reAlign){
                        reAlign = false;
						if(this.getData('ltPropOriginElem') !== ''){
							this.setPopoverPosition();
						} else if(!lyteSelf.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
							this.setArrowPosition(this.getData('ltPropPlacement'));
						}
                    }
                }
            }.bind( this ) );

            config = {
                attributes: true,
                childList : true,
                subtree: true
                // attributeFilter: ['style', 'class']
            };

            popover.mutobserver.observe( targetNode, config );
            // Mutation observer ends
        }
    }

    closePrevPopup() {
		if(_lyteUiUtils.popupStack && _lyteUiUtils.popupStack.globalStack && _lyteUiUtils.popupStack.globalStack.length > 0){
			var prevIndex = _lyteUiUtils.popupStack.globalStack.length-1
			if(!_lyteUiUtils.popupStack.globalStack[prevIndex].parentElement.getData('ltPropAllowMultiple')){
				_lyteUiUtils.popupStack.globalStack[prevIndex].parentElement.setData('ltPropShow' , false);
			}
		}
	}

    setPopoverWidth() {
		if(this.getData('ltPropWidth') !== ""){
			var popoverElem = $L(this.childComp).find('.lytePopoverElement')
			if(popoverElem[0]){
				popoverElem[0].style.width = this.getData('ltPropWidth')
			}
		}
	}

    setPopoverHeight() {
		if(this.getData('ltPropHeight') !== ""){
			var popoverElem = $L(this.childComp).find('.lytePopoverElement')
			if(popoverElem[0]){
				popoverElem[0].style.height = this.getData('ltPropHeight')
			}
		}
	}

    setPopoverMaxWidth() {
		if(this.getData('ltPropMaxWidth') !== ""){
			var popoverElem = $L(this.childComp).find('.lytePopoverElement')[0]
			popoverElem.style.maxWidth = this.getData('ltPropMaxWidth');
		}
	}

    setPopoverMaxHeight() {
		if(this.getData('ltPropMaxHeight') !== ""){
			var popoverElem = $L(this.childComp).find('.lytePopoverElement')[0]
			popoverElem.style.maxHeight = this.getData('ltPropMaxHeight');
		}
	}

    setPadding() {
		if(this.getData('ltPropHeaderPadding') !== ""){
			var popoverElem = $L(this.childComp).find('lyte-popover-header')[0]
			if(popoverElem){
				popoverElem.style.padding = this.getData('ltPropHeaderPadding');
			}
		}
		if(this.getData('ltPropContentPadding') !== ""){
			var popoverElem = $L(this.childComp).find('lyte-popover-content')[0]
			if(popoverElem){
				popoverElem.style.padding = this.getData('ltPropContentPadding');
			}
		}
		if(this.getData('ltPropFooterPadding') !== ""){
			var popoverElem = $L(this.childComp).find('lyte-popover-footer')[0]
			if(popoverElem){
				popoverElem.style.padding = this.getData('ltPropFooterPadding');
			}
		}
	}

    setPopoverWithOffset() {
		var popoverElem = $L(this.childComp).find('.lytePopoverElement')[0]
		var offset = this.getData('ltPropOffset');
		if(popoverElem) {
			if(offset.left) {
				popoverElem.style.left = offset.left;
			}
			else if(offset.right) {
				popoverElem.style.right = offset.right;
			}
			if(offset.top) {
				popoverElem.style.top = offset.top;
			}
			else if(offset.bottom) {
				popoverElem.style.bottom = offset.bottom;
			}
		}
	}

    setPopoverPosition() {

		var popoverElem = $L(this.childComp).find('.lytePopoverElement')
		if(popoverElem[0]){
			var popoverElemDim = popoverElem[0].getBoundingClientRect()
		}
		var originElem
		if(this.getData('ltPropHostElement') !== ""){
            originElem = document.querySelector(this.$node.ltProp('hostElement'))[0].shadowRoot.querySelector(this.getData('ltPropOriginElem'))
        } else {
			originElem = $L(this.getData('ltPropOriginElem'))
		}
		if(originElem[0]){
			var originElemDim = originElem[0].getBoundingClientRect()
		} 
		if(!this.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
			originElemDim = this.getOffsetOfOrigin();
		}
		var spacing = 10;

		if(!this.getData('ltPropPlacement')){
			this.setData('ltPropPlacement' , 'bottom')
		}

		var placementArr = this.getData('ltPropPlacement').split(" ")
		var placement = placementArr[0];

		var popoverElemHeight = popoverElemDim.height;
		var popoverElemWidth = popoverElemDim.width;

		if(this.getData('ltPropAnimation') === 'zoom'){
			popoverElemHeight = popoverElem[0].offsetHeight
			popoverElemWidth = popoverElem[0].offsetWidth
		}
		// if(this.getData('ltPropOriginElem') !== ""){

			var finalPosition = this.getActualPosition(popoverElemWidth , popoverElemHeight,originElemDim ,placementArr)

			switch(finalPosition){
				case "top":
					popoverElem[0].style.top = ''
					popoverElem[0].style.right = ''
					popoverElem[0].style.bottom = ( window.innerHeight - originElemDim.top + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = this.setMidLeft()
				break;
				case "right":
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.right = ""
					popoverElem[0].style.left = (originElemDim.left + originElemDim.width + spacing + this.getPopoverMargin(placement)) + "px"
					// popoverElem[0].style.top = this.setMidTop()										// in v4 the placement property for left and right will be changed 
					popoverElem[0].style.top = originElemDim.top + "px";
				break;
				case "bottom":
					popoverElem[0].style.bottom = ''
					popoverElem[0].style.right = ''
					popoverElem[0].style.top = (originElemDim.top + originElemDim.height + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = this.setMidLeft()
				break;
				case "left":
					popoverElem[0].style.left = ""
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.right = (window.innerWidth - originElemDim.left + spacing + this.getPopoverMargin(placement)) + "px"
					// popoverElem[0].style.top = this.setMidTop()										// in v4 the placement property for left and right will be changed 
					popoverElem[0].style.top = originElemDim.top + "px";
				break;
				case "topLeft":
					popoverElem[0].style.right = ''
					popoverElem[0].style.top = ''
					popoverElem[0].style.bottom = ( window.innerHeight - originElemDim.top + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = originElemDim.left + "px";
				break;
				case "topRight":
					popoverElem[0].style.right = ''
					popoverElem[0].style.top = ''
					popoverElem[0].style.bottom = ( window.innerHeight - originElemDim.top + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = (originElemDim.left - (popoverElemWidth - originElemDim.width)) + "px"
				break;
				case "bottomLeft":
					popoverElem[0].style.right = ''
					popoverElem[0].style.bottom = ''
					popoverElem[0].style.top = (originElemDim.top + originElemDim.height + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = originElemDim.left + "px";
				break;
				case "bottomRight":
					popoverElem[0].style.right = ''
					popoverElem[0].style.bottom = ''
					popoverElem[0].style.top = (originElemDim.top + originElemDim.height + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.left = (originElemDim.left - (popoverElemWidth - originElemDim.width)) + "px"
				break;
				case "leftCenter":
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.left = ""
					popoverElem[0].style.right = (window.innerWidth - originElemDim.left + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.top = this.setMidTop()
				break;
				case "leftBottom":
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.left = ""
					popoverElem[0].style.right = (window.innerWidth - originElemDim.left + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.top = (originElemDim.top - (popoverElem[0].offsetHeight - originElemDim.height)) + "px"
				break;
				case "rightCenter":
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.right = ""
					popoverElem[0].style.left = (originElemDim.left + originElemDim.width + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.top = this.setMidTop()
				break;
				case "rightBottom":
					popoverElem[0].style.bottom = ""
					popoverElem[0].style.right = ""
					popoverElem[0].style.left = (originElemDim.left + originElemDim.width + spacing + this.getPopoverMargin(placement)) + "px"
					popoverElem[0].style.top = (originElemDim.top - (popoverElem[0].offsetHeight - originElemDim.height)) + "px"
				break;
			}

			var firstLetter = placement[0].toUpperCase();
			var popoverPlacementClass = "lytePopover" + firstLetter + placement.substr(1);
			popoverElem[0].classList.add(popoverPlacementClass);
			this.setArrowPosition(finalPosition);
		// }
	
	}

    setArrowPosition(placement) {
		var animationType = this.getData("ltPropAnimation");
		var popoverArrow = $L(this.childComp).find('.lytePopoverArrowIcon')
		var popoverElem = $L(this.childComp).find('.lytePopoverElement')
		var popoverElemWidth, popoverElemHeight;
		if(popoverElem[0]){
			var popoverElemDim = popoverElem[0].getBoundingClientRect()
			popoverElemWidth = popoverElemDim.width;
			popoverElemHeight = popoverElemDim.height;
		}
		if(this.getData('ltPropAnimation') === 'zoom'){
			popoverElemHeight = popoverElem[0].offsetHeight
			popoverElemWidth = popoverElem[0].offsetWidth
		}
		var originElem = $L(this.getData('ltPropOriginElem'))
		if(originElem[0]){
			var originElemDim = originElem[0].getBoundingClientRect()
		}
		if(!this.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
			originElemDim = this.getOffsetOfOrigin();
		}
		if(popoverArrow[0]){

			switch(placement){
				case "top":
					popoverArrow[0].style.top = ""
					popoverArrow[0].style.bottom = "-5px"
					popoverArrow[0].style.left = this.setArrowMidLeft()
				break;
				case "right":
					popoverArrow[0].style.right = ""
					popoverArrow[0].style.left = "-5px"
					popoverArrow[0].style.top = (( originElemDim.height / 2 ) - this.arrowHalfSize()) + "px"
				break;
				case "bottom":
					popoverArrow[0].style.bottom = ""
					popoverArrow[0].style.top = "-5px"
					popoverArrow[0].style.left = this.setArrowMidLeft()
				break;
				case "left":
					popoverArrow[0].style.left = ""
					popoverArrow[0].style.right = "-5px"
					popoverArrow[0].style.top = (( originElemDim.height / 2 ) - this.arrowHalfSize()) + "px"
				break;
				case "topLeft":
					popoverArrow[0].style.bottom = "-5px"
					popoverArrow[0].style.top = ""
					popoverArrow[0].style.left = ( originElemDim.width / 2 ) - this.arrowHalfSize() + "px"
				break;
				case "topRight":
					popoverArrow[0].style.bottom = "-5px"
					popoverArrow[0].style.top = ""
					popoverArrow[0].style.left = ( popoverElemWidth - (originElemDim.width / 2) - this.arrowHalfSize() ) + "px"
				break;
				case "bottomLeft":
					popoverArrow[0].style.top = "-5px"
					popoverArrow[0].style.bottom = ""
					popoverArrow[0].style.left = (( originElemDim.width / 2 ) - this.arrowHalfSize()) + "px"
				break;
				case "bottomRight":
					popoverArrow[0].style.top = "-5px"
					popoverArrow[0].style.bottom = ""
					popoverArrow[0].style.left = ( popoverElemWidth - (originElemDim.width / 2) - this.arrowHalfSize() ) + "px"
				break;
				case "leftCenter":
					popoverArrow[0].style.right = "-5px"
					popoverArrow[0].style.left = ""
					popoverArrow[0].style.top = this.setArrowMidTop()
				break;
				case "leftBottom":
					popoverArrow[0].style.right = "-5px"
					popoverArrow[0].style.left = ""
					popoverArrow[0].style.top = ( popoverElemHeight - (originElemDim.height / 2) - this.arrowHalfSize()) + "px"
				break;
				case "rightCenter":
					popoverArrow[0].style.left = "-5px"
					popoverArrow[0].style.right = ""
					popoverArrow[0].style.top = this.setArrowMidTop()
				break;
				case "rightBottom":
					popoverArrow[0].style.left = "-5px"
					popoverArrow[0].style.right = ""
					popoverArrow[0].style.top = ( popoverElemHeight - (originElemDim.height / 2) - this.arrowHalfSize()) + "px"
				break;
			}


		}
	}

    getActualPosition(popLength, popHeight, obj, preference) {
		var tarLength = obj.width;
		var tarHeight = obj.height;
		let wlength = window.innerWidth;
		let wHeight = window.innerHeight;
		let results = {
			topLeft : [wlength - obj.left,obj.top],
			top : tcFunc(),
			topRight : [obj.left+tarLength, obj.top],
		   
			left : [obj.left,wHeight-obj.top],
			leftCenter : lcFunc(),
			leftBottom : [obj.left,obj.top+tarHeight],
		   
			bottomLeft : [wlength-obj.left,wHeight-(tarHeight+obj.top)],
			bottom : bcFunc(),
			bottomRight : [obj.left+tarLength,wHeight-(tarHeight+obj.top)],
		   
			right : [wlength-(obj.left+tarLength),wHeight-obj.top],
			rightCenter : rcFunc(),
			rightBottom : [wlength-(obj.left+tarLength),obj.top+tarHeight]
		}
		function lcFunc(){
			let x = obj.left;
			let y = 0;
			if((tarHeight/2) + obj.top >= popHeight/2 && wHeight - obj.top - (tarHeight/2)>= popHeight/2){
				y = ((tarHeight/2) + obj.top)+(wHeight - obj.top - (tarHeight/2));
			}else{
				y = Math.min((tarHeight/2) + obj.top,wHeight - obj.top - (tarHeight/2));
			} 
			return [x,y];
		}
		function bcFunc(){
			let x = 0;
			let y = wHeight-(tarHeight+obj.top);
			if((tarLength/2)+obj.left>=popLength/2 && wlength - obj.left - (tarLength/2) >= popLength/2){
				x = ((tarLength/2)+obj.left) + (wlength - obj.left - (tarLength/2));
			}else{
				x = Math.min((tarLength/2)+obj.left,wlength - obj.left - (tarLength/2));
			}
			return [x,y];
		}
		function rcFunc(){
			let x = wlength-(obj.left+tarLength);
			let y = 0;
			if(obj.top+(tarHeight/2)>=popHeight/2 && wHeight - obj.top - (tarHeight/2) >= popHeight/2){
				y = (obj.top+(tarHeight/2)) + (wHeight - obj.top - (tarHeight/2));
			}else{
				y = Math.min(obj.top+(tarHeight/2),wHeight - obj.top - (tarHeight/2))
			}
			return [x,y];
		}
		function tcFunc(){
			let x = 0;
			let y = obj.top;
			if((tarLength/2)+obj.left>= popLength/2 && wlength-obj.left - (tarLength/2)>=popHeight/2){
				x = ((tarLength/2)+obj.left) + (wlength-obj.left - (tarLength/2)); 
			} else{
				x = Math.min((tarLength/2)+obj.left,wlength-obj.left - (tarLength/2));
			}
			return [x,y];
		}
		function getPopupPosition(results,popLength,popHeight,preference){
			if(preference!==undefined && preference.length>=0){
				for(let key of preference){
					if(results[key][0]>=popLength && results[key][1]>=popHeight){
						return key;
					}
				}
			}
			for(let key in results){
				if(results[key][0]>=popLength && results[key][1] >=popHeight){
					return key;
				}
			}
			if(preference!==undefined && preference.length>=0){
				return preference[0];
			}
			return 'topRight';
		}
		return getPopupPosition(results,popLength,popHeight,preference);
	}

    getOffsetOfOrigin() {
		var offsetDim = {}
		if(!this.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
			var offsetVal = this.getData('ltPropOffset')

			if(offsetVal.left){
				offsetDim.left = parseFloat(offsetVal.left)
			} else if(offsetVal.right){
				offsetDim.right = parseFloat(offsetVal.right)
			} else {
				offsetDim.left = 0
			}

			if(offsetVal.right){
				offsetDim.right = parseFloat(offsetVal.right)
			} else if(offsetVal.left){
				offsetDim.left = parseFloat(offsetVal.left)
			} else {
				offsetDim.right = 0
			}

			if(offsetVal.bottom){
				offsetDim.bottom = parseFloat(offsetVal.bottom)
			} else if(offsetVal.top){
				offsetDim.top = parseFloat(offsetVal.top)
			} else {
				offsetDim.bottom = 0
			}
			if(offsetVal.top){
				offsetDim.top = parseFloat(offsetVal.top)
			} else if(offsetVal.bottom){
				offsetDim.bottom = parseFloat(offsetVal.bottom)
			} else {
				offsetDim.bottom = 0
			}
			
			if(offsetVal.width){
				offsetDim.width = parseFloat(offsetVal.width)
			} else {
				offsetDim.width = 1
			}
			if(offsetVal.height){
				offsetDim.height = parseFloat(offsetVal.height)
			} else {
				offsetDim.height = 1
			}

			return offsetDim

		}

	}

    getTargetMidPoint() {
		var originElem = $L(this.getData('ltPropOriginElem'))
		var retVal = {
			midHeight : 0,
			midWidth : 0
		}
		if(originElem[0]){
			var originElemDim = originElem[0].getBoundingClientRect()
			retVal.midWidth = (originElemDim.width / 2) + originElemDim.left
			retVal.midHeight = (originElemDim.height / 2) + originElemDim.top
			retVal.halfWidth = (originElemDim.width / 2)
		} else {
			if(!this.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
				var offsetDim = this.getOffsetOfOrigin();
				retVal.midWidth = (offsetDim.width / 2) + offsetDim.left
				retVal.midHeight = (offsetDim.height / 2) + offsetDim.top
				retVal.halfWidth = (offsetDim.width / 2)
			}
		}

		return retVal
	}

    getPopoverMidPoint() {

		var animationType = this.getData("ltPropAnimation");
		var popoverElem = $L(this.childComp).find('.lytePopoverElement')
		var retVal = {
			midHeight : 0,
			midWidth : 0
		}

		if(popoverElem[0]){
			var popoverElemDim = popoverElem[0].getBoundingClientRect()
			// retVal.midWidth = (popoverElemDim.width / 2) + popoverElemDim.left
			// retVal.midHeight = (popoverElemDim.height / 2) + popoverElemDim.top
			retVal.midWidth = (popoverElemDim.width / 2)
			retVal.midHeight = (popoverElemDim.height / 2)
			if(this.getData('ltPropAnimation') === 'zoom'){
				retVal.midHeight = (popoverElem[0].offsetHeight / 2)
				retVal.midWidth = (popoverElem[0].offsetWidth / 2)
			}
		}

		return retVal
	}

    getArrowMindPoint() {
		var popoverElem = $L(this.childComp).find('.lytePopoverArrowIcon')

		var retVal = {
			midHeight : 0,
			midWidth : 0
		}
		if(popoverElem[0]){
			var popoverElemDim = popoverElem[0].getBoundingClientRect()
			retVal.midWidth = (popoverElemDim.width / 2) + popoverElemDim.left
			retVal.midHeight = (popoverElemDim.height / 2) + popoverElemDim.top
		}

		return retVal
	}

    getPopoverMargin(placement) {
		var spaceVal = 0;
		switch(placement){
			case "topLeft":
			case "topRight":
			case "top":
				if(this.getData('ltPropMargin') && this.getData('ltPropMargin').bottom){
					spaceVal = this.getData('ltPropMargin').bottom
				}
			break;
			case "right":
			case "rightCenter":
			case "rightBottom":
				if(this.getData('ltPropMargin') && this.getData('ltPropMargin').left){
					spaceVal = this.getData('ltPropMargin').left
				}
			break;
			case "bottomLeft":
			case "bottomRight":
			case "bottom":
				if(this.getData('ltPropMargin') && this.getData('ltPropMargin').top){
					spaceVal = this.getData('ltPropMargin').top
				}
			break;
			case "leftCenter":
			case "leftBottom":
			case "left":
				if(this.getData('ltPropMargin') && this.getData('ltPropMargin').right){
					spaceVal = this.getData('ltPropMargin').right
				}
			break;
		}
		return spaceVal;
	}

    arrowHalfSize() {
		var popoverElem = $L(this.childComp).find('.lytePopoverArrowIcon')
		
		if(this.getData('ltPropAnimation') === 'zoom'){
			return popoverElem[0].offsetWidth / 2
		}
		return popoverElem[0].getBoundingClientRect().width / 2
		
	}

    setMidLeft() {
		return ((this.getTargetMidPoint().midWidth - this.getPopoverMidPoint().midWidth) + "px");
	}

    setMidTop() {
		return ((this.getTargetMidPoint().midHeight - this.getPopoverMidPoint().midHeight) + "px");
	}

    setArrowMidLeft() {
		return ((this.getPopoverMidPoint().midWidth - this.arrowHalfSize()) + "px");
	}

    setArrowMidTop() {
		return ((this.getPopoverMidPoint().midHeight - this.arrowHalfSize()) + "px");
	}

    setDimension() {
		var dim = this.actualPopoverDiv.getBoundingClientRect();
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'top' , dim.top)
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'left' , dim.left)
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'right' , dim.right)
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'bottom' , dim.bottom)
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'width' , dim.width)
		objectUtils(this.getData('initialPopoverDim') , 'add' , 'height' , dim.height)
	}

    unsetDimensions() {
		var popoverElem = $L(this.childComp).find('.lytePopoverWrapper')
		var popoverElemInnerElem = popoverElem.find('.lytePopoverElement')[0];
		if(popoverElem.find('#lytePopoverArrow')[0]){
			popoverElem.find('#lytePopoverArrow')[0].style.left = ''
			popoverElem.find('#lytePopoverArrow')[0].style.right = ''
			popoverElem.find('#lytePopoverArrow')[0].style.bottom = ''
			popoverElem.find('#lytePopoverArrow')[0].style.top = ''
		}
		if(popoverElemInnerElem){
			popoverElemInnerElem.style.left = ''
			popoverElemInnerElem.style.right = ''
			popoverElemInnerElem.style.bottom = ''
			popoverElemInnerElem.style.top = ''
		}
		this.setData('ltPropOffset' , {})
	}

    isOriginElemInViewport() {
		if(this.childComp && this.getData('ltPropOriginElem')){

			var originDim = $L(this.getData('ltPropOriginElem'))[0].getBoundingClientRect();
			if((originDim.top < 0) || (originDim.top + originDim.height > window.innerHeight)){
				this.setData('ltPropShow' , false)
			}
			if((originDim.left < 0) || (originDim.left + originDim.width > window.innerWidth)){
				this.setData('ltPropShow' , false)
			} 

		}
	}

    isPopoverInBoundary() {
		var popoverDim = this.actualPopoverDiv.getBoundingClientRect();
		if(this.getData('ltPropBoundary') !== {}){
			var boundaryVal = this.getData('ltPropBoundary')
			if(boundaryVal.top){
				if(popoverDim.top < parseFloat(boundaryVal.top)){
					return false
				}
			}
			if(boundaryVal.bottom){
				if((popoverDim.top+popoverDim.height) > parseFloat(boundaryVal.bottom)){
					return false
				}
			}
			if(boundaryVal.left){
				if(popoverDim.left < parseFloat(boundaryVal.left)){
					return false
				}
			}
			if(boundaryVal.right){
				if((popoverDim.left+popoverDim.width) > parseFloat(boundaryVal.right)){
					return false
				}
			}
		}
		return true
	}

    _closePopover(event) {
		var popStack = _lyteUiUtils.popupStack.globalStack
		var popoverElem = $L(this.childComp).find('.lytePopoverWrapper')
		var popoverElemInnerElem = popoverElem.find('.lytePopoverElement')[0];
		var animationType = this.getData('ltPropAnimation');
		if($L(this.childComp).find('.lytePopupFreezeLayer')[0]){
			$L(this.childComp).find('.lytePopupFreezeLayer')[0].style.opacity = 0;
		}
		switch(animationType) {
			case "fade": 
				popoverElem.removeClass('lytePopoverFadeAnimation')
				break;
			case "zoom":
				var popoverElemDim = popoverElemInnerElem.getBoundingClientRect();
				var originElemMidPoint = this.getTargetMidPoint();
	
				var popoverElemLeft = popoverElemDim.x + (popoverElemDim.width / 2);
				var popoverElemTop = popoverElemDim.y + (popoverElemDim.height / 2);
				var originElemLeft = originElemMidPoint.midWidth;
				var originElemTop = originElemMidPoint.midHeight;
				
				var xdiff = -1 * (popoverElemLeft - originElemLeft);
				var ydiff = -1 * (popoverElemTop - originElemTop);
				var transformString;
				transformString = 'translate(' + xdiff + "px, " + ydiff + "px) scale(0)";
				popoverElemInnerElem.style.transform = transformString;
				popoverElem.removeClass('lytePopoverZoomAnimation');
				break;
			case "pop":
				transformString = "scale(" + this.getData("ltPropScaleFrom") + ")";
				popoverElemInnerElem.style.transform = transformString;
				popoverElem.removeClass('lytePopoverPopAnimation');
				break;
		}
		var _self = this;

		if(this.getData('ltPropFreeze') && popStack && popStack.length > 1){
			$L(this.childComp).find('.lytePopupFreezeLayer').addClass('lyteModalFreezeLayerHidden')
			if(popStack && popStack.length > 1){
				for(var i=popStack.length-2 ; i>=0 ;i--){
					var prevFreeze = $L(popStack[i].parentElement.component.childComp).find('.lytePopupFreezeLayer')
					if(prevFreeze[0]){
						prevFreeze.removeClass('lyteModalFreezeLayerHidden')
						i=-1;
					}
				}
			}
		}

		this.closePopoverTransition = setTimeout(function() {
			if(_self.$node.mutobserver){
				_self.$node.mutobserver.disconnect()
			}
			_self.unsetDimensions();
			popoverElem.removeClass('lytePopoverShow').addClass('lytePopoverHide');
			popoverElem.removeClass('lytePopoverZoom lytePopoverPop');
			_self.setData("ltPropShow", false);
			popoverElemInnerElem.style.transform = '';
			popoverElemInnerElem.classList.remove(
				"lytePopoverLeft", 
				"lytePopoverLeftCenter",
				"lytePopoverLeftBottom",
				"lytePopoverTopLeft",
				"lytePopoverTop",
				"lytePopoverTopRight",
				"lytePopoverRight",
				"lytePopoverRightCenter",
				"lytePopoverRightBottom",
				"lytePopoverBottom",
				"lytePopoverBottomLeft",
				"lytePopoverBottomRight"
			)

			$L(_self.$node).removeClass('lytePopoverOpened')

			_self.setData('ltPropShowWormhole' , false)

			if(_self.getMethods("onClose")){
				_self.executeMethod( "onClose" , event , _self , _self.actualPopoverDiv);
			}
		},300)
	}

    _popoverChanges() {

		var popoverElem = $L(this.childComp).find('.lytePopoverElement')
		if(popoverElem[0]){
			var popoverElemDim = popoverElem[0].getBoundingClientRect()
		}

		var originElem = $L(this.getData('ltPropOriginElem'))
		if(originElem[0]){
			var originElemDim = originElem[0].getBoundingClientRect()
		}

		this.popoverObserver = new MutationObserver(function(mutations) {
			mutations.forEach(function(mutation) {
				// console.log(mutation);
			});
		});

		const config = { attributes: true, childList: true, subtree: true };

		this.popoverObserver.observe(popoverElem[0], config);
	}

    _draggableFunction() {
		if(this.childComp && this.getData('ltPropShow')){
			if(this.getData('ltPropDraggable')){
				$L(this.childComp).find('lyte-popover-header')[0].style.cursor="move";
				$L(this.childComp).find('lyte-popover-header')[0].addEventListener('mousedown' , this.mousedownFun)
			} else {
				$L(this.childComp).find('lyte-popover-header')[0].style.cursor="";
				$L(this.childComp).find('lyte-popover-header')[0].removeEventListener('mousedown' , this.mousedownFun)
			}
		}
	}

    didDestroy() {

		this.setData('ltPropShowWormhole', false);
		// this.$node.classList.remove('lytePopoverOpened');

		clearTimeout(this.closePopoverTransition); 
		if(this.popoverObserver){
			this.popoverObserver.disconnect();
		}


        if(this.childComp){
            
            if(this.tIdBeforeClose){
                clearTimeout(this.tIdBeforeClose);
                this.tIdBeforeClose = false;
            }
            if(this.tIdClose){
                clearTimeout(this.tIdClose);
                this.tIdClose = false;
            }
            if(this.getData('ltPropFreeze') && this.addedFreezeDetails){
                LytePopup.hideOrShowFreeze("close",this);
                delete this.addedFreezeDetails;
            }
            
            this.childComp.remove();
            if(!this.getData('ltPropFreeze') && document.body.classList.contains('lyteStopBodyScrolling')){
                document.body.classList.remove('lyteStopBodyScrolling');
            }
        }

	}

    static observers() {
        return {
            //Observer funcitons
            _showPopover : function(event){
                var originElem = $L(this.getData('ltPropOriginElem'))[0]
                var animationType = this.getData('ltPropAnimation');
                var duration = parseInt(this.getData('ltPropDuration'))
                if(!this.getData('ltPropShow')){

                    var closeResult = true;

                    if(this.getMethods("onBeforeClose")){
                        closeResult = this.executeMethod("onBeforeClose",event,this , this.actualPopoverDiv);
                    }
                    if(closeResult !== false){
                        this._closePopover();
                    }
                    return;
                }

                this.closePrevPopup()

                if(!originElem && this.$registry.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
                    console.error("Please provide values for either ltPropOriginElem or ltPropOffset to open the popover at proper position.")
                    this.setData('ltPropShow',false);
                    return;
                }

                if(this.getData('ltPropShow')){
                    this.setData('ltPropBindToBody' , true)
                    this.setData('ltPropShowWormhole' , true)
                    if(this.childComp){
                        $L(this.childComp).removeClass('lytePopoverVisibilityHidden')
                    }
                    var result = true;
                    if(this.getMethods("onBeforeShow")){
                        result = this.executeMethod("onBeforeShow",this , this.actualPopoverDiv);
                    }
                    if(result !== false){

                        var popoverElem = $L(this.childComp).find('.lytePopoverWrapper');
                        popoverElem.addClass('lytePopoverShow').removeClass('lytePopoverHide');

                        popoverElem[0].style.zIndex = _lyteUiUtils.getZIndex();

                        this.setPopoverWidth()
                        this.setPopoverHeight()
                        this.setPopoverMaxWidth()
                        this.setPopoverMaxHeight()
                        this.setPadding()

                        if(this.getData('ltPropFreeze')){
                            var freezeElem = $L(this.childComp).find('.lytePopupFreezeLayer')
                            freezeElem[0].style.opacity = this.getData('ltPropDimmer').opacity
                            freezeElem[0].style.background = this.getData('ltPropDimmer').color
                            var popStack = _lyteUiUtils.popupStack.globalStack
                            freezeElem.removeClass('lyteModalFreezeLayerHidden')
                            if(popStack && popStack.length > 1){
                                for(var i=popStack.length-2 ; i>=0 ;i--){
                                    var prevFreeze = $L(popStack[i].parentElement.component.childComp).find('.lytePopupFreezeLayer')
                                    if(prevFreeze[0]){
                                        prevFreeze.addClass('lyteModalFreezeLayerHidden')
                                        i=-1;
                                    }
                                }
                            }
                        } 
                        // else {
                        // 	// this.setData('ltPropFreeze' , false)
                        // 	// this.setData('showFreeze' , false)
                        // }


                        // if(!Lyte.Component.registeredHelpers.lyteUiIsEmptyObject(this.$node.ltProp('offset'))){
                        // 	// this.setData('ltPropOriginElem' , '')
                        // 	this.setPopoverWithOffset()
                        // 	if(this.getData('ltPropType') === 'callout'){
                        // 		this.setArrowPosition(this.getData('ltPropPlacement'));
                        // 	}
                        // } else if(originElem){
                            this.setPopoverPosition();
                        // }

                        this.addMutationObserver();
                        var popoverElemInnerElem = popoverElem.find('.lytePopoverElement')[0];
                        var transformString;
                        if(animationType === "pop" || animationType === "zoom") {
                            if( animationType === "pop") {
                                popoverElem.addClass('lytePopoverPop');
                                transformString = "scale(" + this.getData("ltPropScaleFrom") + ")";
                            }
                            else {
                                var popoverElemDim = popoverElemInnerElem.getBoundingClientRect();
                                var popoverElemLeft = popoverElemDim.x + (popoverElemDim.width / 2);
                                var popoverElemTop = popoverElemDim.y + (popoverElemDim.height / 2);
                                var originElemMidPoint = this.getTargetMidPoint();
                                var originElemLeft = originElemMidPoint.midWidth;
                                var originElemTop = originElemMidPoint.midHeight;
                                var xdiff = -1 * (popoverElemLeft - originElemLeft);
                                var ydiff = -1 * (popoverElemTop - originElemTop);
                                popoverElem.addClass('lytePopoverZoom');
                                transformString = 'translate(' + xdiff + "px, " + ydiff + "px) scale(0)";
                            }
                            popoverElemInnerElem.style.transition = 'none';
                            popoverElemInnerElem.style.transform = transformString;
                        }
                        var _self = this;
                        setTimeout(function() {
                            var animType = _self.getData('ltPropAnimation');
                            switch (animType) {
                                case "fade":
                                    popoverElem.addClass('lytePopoverFadeAnimation')
                                    break;
                                case "zoom":
                                    popoverElemInnerElem.style.transition = '';
                                    popoverElemInnerElem.style.transform = 'translate(0, 0) scale(1)';
                                    popoverElem.addClass('lytePopoverZoomAnimation');
                                    break;
                                case "pop":
                                    popoverElemInnerElem.style.transition = '';
                                    popoverElemInnerElem.style.transform = 'scale(1)';
                                    popoverElem.addClass('lytePopoverPopAnimation');
                                    break;
                            }
                            $L(_self.$node).addClass('lytePopoverOpened')
                        }, 10);
                        setTimeout(function(){
                            if(_self.getMethods("onShow")){
                                _self.executeMethod("onShow",_self , _self.actualPopoverDiv);
                            }
                            if(!_self.getData('ltPropPreventFocus')){
                                $L(_self.childComp).trapFocus()
                            }
                            _self.setDimension()
                        },duration)
                    } else {
                        this.setData('ltPropShow' ,false)
                        this.setData('ltPropBindToBody' , false)
                        this.setData('ltPropShowWormhole' , false)
                    }
                }

            }.observes('ltPropShow'),

            _changeOriginElem : function(){
                if(this.actualPopoverDiv && this.getData('ltPropShow')){
                    this.setPopoverPosition();
                }
            }.observes('ltPropOriginElem'),

            _changePlacement : function(){
                if(this.actualPopoverDiv && this.getData('ltPropShow')){
                    this.unsetDimensions();
                    var popoverElem = $L(this.childComp).find('.lytePopoverWrapper')
                    var popoverElemInnerElem = popoverElem.find('.lytePopoverElement')[0];
                    popoverElemInnerElem.style.transform = '';
                    popoverElemInnerElem.classList.remove(
                        "lytePopoverLeft", 
                        "lytePopoverLeftCenter",
                        "lytePopoverLeftBottom",
                        "lytePopoverTopLeft",
                        "lytePopoverTop",
                        "lytePopoverTopRight",
                        "lytePopoverRight",
                        "lytePopoverRightCenter",
                        "lytePopoverRightBottom",
                        "lytePopoverBottom",
                        "lytePopoverBottomLeft",
                        "lytePopoverBottomRight"
                    )
                    this.setPopoverPosition();
                }
            }.observes('ltPropPlacement'),

            // _offsetChanges : function(){
            // 	if(this.childComp){
            // 		var popoverElem = $L(this.childComp).find('.lytePopoverWrapper')
            // 		var popoverElemInnerElem = popoverElem.find('.lytePopoverElement')[0];
            // 		if(popoverElem.find('#lytePopoverArrow')[0]){
            // 			popoverElem.find('#lytePopoverArrow')[0].style.left = ''
            // 			popoverElem.find('#lytePopoverArrow')[0].style.right = ''
            // 			popoverElem.find('#lytePopoverArrow')[0].style.bottom = ''
            // 			popoverElem.find('#lytePopoverArrow')[0].style.top = ''
            // 		}
            // 		if(popoverElemInnerElem){
            // 			popoverElemInnerElem.style.left = ''
            // 			popoverElemInnerElem.style.right = ''
            // 			popoverElemInnerElem.style.bottom = ''
            // 			popoverElemInnerElem.style.top = ''
            // 		}
            // 		this.setPopoverWithOffset();
            // 	}
            // }.observes('ltPropOffset'),

            _dimmerChanges : function(){
                if(this.childComp && this.getData('ltPropShow')){
                    if ($L(this.childComp).find('.lytePopupFreezeLayer')[0]) {
                        var freezeElem = $L(this.childComp).find('.lytePopupFreezeLayer')
                        if(!this.getData('ltPropDimmer').color){
                            freezeElem[0].style.background = freezeElem[0].style.background
                        } else {
                            freezeElem[0].style.background = this.getData('ltPropDimmer').color
                        }
                        if(!this.getData('ltPropDimmer').opacity){
                            freezeElem[0].style.opacity = freezeElem[0].style.opacity
                        } else {
                            freezeElem[0].style.opacity = this.getData('ltPropDimmer').opacity	
                        }
                    }
                }
            }.observes('ltPropDimmer'),

            _observeClickEvent : function(){
                _lyteBetaPopover._stopPropagation = this.getData('ltPropStopClick');
                if(_lyteBetaPopover._stopPropagation){
                    _lyteBetaPopover._sourceComp = this;
                }
                else{
                    if(_lyteBetaPopover._sourceComp){
                        delete _lyteBetaPopover._sourceComp;
                    }
                }
            }.observes('ltPropStopClick')
        };
    }
}

export { LyteBetaPopoverComponent };
