import { prop } from "@slyte/core";
import { Component } from "../component.js";
import $L from "@zoho/lyte-dom"
/**
 * Renders a navigator
 * @component lyte-navigator
 * @version  1.0.0
 * @methods onNext,onPrevious,onHome,onEnd,onSelect,beforeRender,afterRender
 */
class LyteNavigatorComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			/**
             * @componentProperty {number} ltPropPerpage=10
             * @minValue 0
             */
			ltPropPerpage:prop("number", {"default": window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'perPage', 10 ) }), 
			/**
             * @componentProperty {number} ltPropValue=0
             * @minValue 0
             */
			ltPropValue:prop("number", {"default":0}), 
			/** @componentProperty {number} ltPropRecords
            */
			ltPropRecords:prop("number", {"default":undefined}),
			/**
             * @componentProperty {boolean} ltPropMoreRecords=false
             * 
             */
			ltPropMoreRecords:prop("boolean", {"default":false}),
			/**
             * @componentProperty {string} ltPropMiddleText='to'
             */
			ltPropMiddleText : prop('string', {'default' : window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'middleText', 'to' ) }),
			/**
             * @componentProperty {default | simple | border} ltPropType='default'
             */
			ltPropType:prop("string", {"default":window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'type', 'default' ) }),
			paginationRange:prop("array",{"default":undefined}),
			/**
             * @componentProperty {number} ltPropSelected=0
             */
			ltPropSelected:prop("number",{"default":0}),
			/**
             * @componentProperty {boolean} ltPropShowOnlyIcon=false
             */
			ltPropShowOnlyIcon:prop("boolean",{"default":window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'showOnlyIcon', false ) }),
			/**
             * @componentProperty {boolean} ltPropShowText=false
             */
			ltPropShowText:prop("boolean",{"default":window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'showText', false ) }),
			/**
             * @componentProperty {boolean} ltPropYield=false
             */
			ltPropYield:prop("boolean",{"default":false}),
			/**
             * @componentProperty {boolean} ltPropAdjustStart=false
             * @version 3.0.0
             */
			ltPropAdjustStart : prop( "boolean", { "default" : false } ),
			/**
             * @componentProperty {boolean} ltPropAria=false
             * @version 3.1.0
             */
			ltPropAria : prop('boolean', {'default': true}),
			/**
             * @componentProperty {object} ltPropAriaNavigator={}
             * @version 3.1.0
             */
			ltPropAriaNavigator : prop('object', { 
				'default':{}
			}),
			/**
             * @componentProperty {object} ltPropAriaNext={}
             * @version 3.1.0
             */
			ltPropAriaNext : prop('object', {
				'default':{}
			}),
			/**
             * @componentProperty {object} ltPropAriaPrev={}
             * @version 3.1.0
             */
			ltPropAriaPrev : prop('object', {
				'default':{}
			}),
			/**
             * @componentProperty {object} ltPropAriaHome={}
             * @version 3.1.0
             */
			ltPropAriaHome : prop('object',{
				'default':{}
			}),
			/**
             * @componentProperty {object} ltPropAriaEnd={}
             * @version 3.1.0
             */
			ltPropAriaEnd : prop('object',{
			'default':{}
			}),
			'ltPropTabIndex' : prop('number',{'default':0}),
			'ltPropDataTabIndex' : prop('number',{'default':0}),
			'ltPropEndText' : prop('string',{'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-navigator', 'endText', 'pages' ) }),
			 totalPages : prop('number', {'default': 0}),
			 currentPage : prop( 'number', {'default':1})
		};
	}

    init() {
		if(this.getData('ltPropType').toLowerCase() === 'border'){
			this.setData('ltPropType', 'simple')
		}
		if(this.getMethods('beforeRender'))
        {
            	
         this.executeMethod('beforeRender', this.$node);
        }
		this.settingStartEndValue();

	}

    settingStartEndValue() {
		var firstIndex = this.getData( 'ltPropValue' ),
		perPage = this.getData( 'ltPropPerpage' ),
		MaxRecords = this.getData( 'ltPropRecords' ),
		startRecord = this.getData( 'startRecord' ),
		endRecord = this.getData( 'endRecord' ),
		newstart = ( firstIndex + 1 ) > MaxRecords ? MaxRecords : ( firstIndex + 1 ),
		newend = ( firstIndex + perPage ) > MaxRecords ? MaxRecords : firstIndex + perPage;

		if( this.getData('ltPropAdjustStart') && this.getData('ltPropType').toLowerCase() == 'default' && startRecord && endRecord && (endRecord-startRecord != perPage-1) && endRecord > perPage){
			newend = endRecord ? (endRecord < perPage ? perPage : endRecord ): perPage
			newstart = endRecord ? (endRecord-perPage+1 < 1 ? 1 : endRecord-perPage+1) : 1
			if( this.getMethods( 'onPerpageChange' ) ){
				this.executeMethod( 'onPerpageChange', newstart-1, this.$node)
			}
		}
		startRecord != newstart && this.setData( 'startRecord', newstart );
		endRecord != newend && this.setData( 'endRecord', newend );
		
		
	}
    didConnect() {

		this.buttonDisable.call(this);
		this.initalizeOrReset.call(this);
		if(this.getData( "ltPropType")!="default" ) {   
			 var elems=this.$node.querySelectorAll('lyte-nav-arrow');
			 if(this.getData('ltPropShowText')){
			 	this.$node.querySelector('.lytepagination').classList.add('textNavLink');
			 }
			if( elems.length == 4 ){   
        		this.$node.querySelector( '.lyteDoubleBack' ).appendChild(elems[0]);
        		this.$node.querySelector( '.lyteSingleBack' ).appendChild(elems[1]);
        		this.$node.querySelector( '.lyteSingleFront' ).appendChild(elems[2]);
        		this.$node.querySelector( '.lyteDoubleFront' ).appendChild(elems[3]);
        		
        	}
        	if( elems.length == 2 ) {   
        		this.$node.querySelector( '.lyteDoubleBack' ).style.display = "none";
        		this.$node.querySelector( '.lyteSingleBack' ).appendChild(elems[0]);
        		this.$node.querySelector( '.lyteSingleFront' ).appendChild(elems[1]);
        		this.$node.querySelector( '.lyteDoubleFront' ).style.display = "none";
        	}
        }
		if(this.getMethods('afterRender')) {  
			
            this.executeMethod('afterRender', this.$node);
        }
       	$L.fastdom.measure( function(){
			var fg = window.getComputedStyle( this.$node ).getPropertyValue( 'direction' ) == 'rtl';
			$L.fastdom.mutate( function(){
				if( fg ) {
					this.$node.classList.add( 'lyteRTL' )
				}
			}.bind( this ) )
		}.bind( this ) )		
       	
	}

    buttonDisable() {
		if( !this.data.ltPropYield ) {
			var next = this.$node.querySelector('.lyteSingleFront' ).style,
			prev = this.$node.querySelector( '.lyteSingleBack' ).style,
			hme = this.$node.querySelector('.lyteDoubleBack' ).style,
			end = this.$node.querySelector('.lyteDoubleFront' ).style;
			if( next ) {
				
				next.display = this.getMethods('onNext') ? '' : 'none';
			}
			if( prev ) {
				
				prev.display = this.getMethods('onPrevious') ? '' : 'none';
			}
			if( hme ) {
				
				hme.display = this.getMethods('onHome') ? '' : 'none';
			}
	        if( end ) {
	        	
	        	end.display = this.getMethods('onEnd') ? '' : 'none';
	        }
        }     
	}

    initalizeOrReset() {
		this.checkButton()
		this.setInitialValue()
	}

    checkButton() {
		var firstIndex = this.getData('ltPropValue'), perPage = this.getData('ltPropPerpage'), MaxRecords = this.getData('ltPropRecords')
		var singleFront =this.$node.querySelector( '.lyteSingleFront' ), singleBack = this.$node.querySelector( '.lyteSingleBack' ), doubleBack = this.$node.querySelector('.lyteDoubleBack' ), doubleFront = this.$node.querySelector( '.lyteDoubleFront' );
		$L.fastdom.mutate( function() {
		if( doubleBack && firstIndex <= 0 ){
			doubleBack.classList.add('lyteDisabled')
			this.setAriaDisabled(doubleBack)

		}
		else if( doubleBack ){
			doubleBack.classList.remove('lyteDisabled')
			this.removeAriaDisabled(doubleBack)
		}
				
		if( singleBack && firstIndex <= 0 ){
			singleBack.classList.add('lyteDisabled')
			this.setAriaDisabled(singleBack)
		}
		else if( singleBack ){
			singleBack.classList.remove('lyteDisabled')
			this.removeAriaDisabled(singleBack)
		}	
		if( singleFront && ( firstIndex + perPage >= MaxRecords ) && !this.getData( 'ltPropMoreRecords' ) ){
			singleFront.classList.add('lyteDisabled')
			this.setAriaDisabled(singleFront)
		}
		else if( singleFront ){
			singleFront.classList.remove('lyteDisabled')
			this.removeAriaDisabled(singleFront)
		}

		if( doubleFront && ( firstIndex + perPage >= MaxRecords ) ){
					doubleFront.classList.add('lyteDisabled')
					this.setAriaDisabled(doubleFront)
		}
		else if( doubleFront ){
			doubleFront.classList.remove('lyteDisabled')
			this.removeAriaDisabled(doubleFront)
		}
				
		if( this.getData("ltPropType").toLowerCase() == "simple" &&! this.getMethods('onSelect') && !this.getData('ltPropYield')){
			var lytePageDiv = this.$node.querySelector('.lytepage' )  
			lytePageDiv.classList.add("lyteDisabled");
			   
	    }
		
		}.bind(this))

				
	}

    setInitialValue() {
		this.getData('ltPropType').toLowerCase() !== '' && this.settingStartEndValue();

		if( this.getData( "ltPropType" ).toLowerCase() === "simple" ) {
			this.setData( "ltPropSelected", Math.ceil( this.getData( 'startRecord' ) / this.getData( 'ltPropPerpage' ) ) );
			var ele = this.$node.querySelectorAll( '[data-value="..."]' );
			for( var i = 0; i < ele.length; i++ ) {   
				ele[ i ].classList.add( "lyteDisabled" );
				ele[ i ].classList.add( "dots3" );
				this.setAriaDisabled(ele[ i ])
			}
		}
		
	}

    setAriaDisabled(item) {
		item.setAttribute('aria-disabled',true)
	}

    removeAriaDisabled(item) {
		item.removeAttribute('aria-disabled')
	}

    activeAdd() {

		if( this.getData( "ltPropType" ) != 'default' && !this.getData( 'ltPropShowOnlyIcon' ) ){
			var a = this.$node.querySelector( '[data-value="'+ this.getData( 'ltPropSelected' ) +'"]' );
			if( a!=null ){
				a.classList.add( 'lyteActiveAdd' );
				if(this.getData('ltPropAria')){
					a.tabIndex= this.getData('ltPropTabIndex')
					a.setAttribute('data-tabindex',this.getData('ltPropDataTabIndex'))

				}
				
			}
		}
	}

    onForward(evt) {
		var firstIndex = this.getData( 'ltPropValue' ), perPage = this.getData( 'ltPropPerpage' ), MaxRecords = this.getData( 'ltPropRecords' );
		firstIndex += perPage
		var z = (firstIndex) > MaxRecords ? MaxRecords : firstIndex;
		var actionName = this.getMethods('onNext');
		if(actionName ){
			this.executeMethod( 'onNext', z, this.$node, evt )
		}
	}

    onBackward(evt) {
		var firstIndex = parseInt(this.getData('ltPropValue')), perPage = parseInt(this.getData('ltPropPerpage'))
		firstIndex -= perPage
		var z = (firstIndex) < 0 ? 0 : firstIndex;
		if( this.getMethods( 'onPrevious' ) ){
			this.executeMethod( 'onPrevious', z, this.$node, evt )
		}
				    
	}

    goFirst(evt) {
		this.setData( 'ltPropValue', 0, this.$node, evt );
		if( this.getMethods( 'onHome' ) ){
			this.executeMethod('onHome', this.getData('ltPropValue'), this.$node, evt);
			var singleFront = this.$node.querySelector( '.lyteSingleFront' );
			if(singleFront){
				singleFront.classList.remove('lyteDisabled')
				this.removeAriaDisabled(singleFront)
			}
		}
		if( this.getData( 'ltPropType' ) != "default" ){
			if( this.getData( 'ltPropSelected' ) >= 1 ){   
				this.setData( 'ltPropSelected',1 );
			}
			this.activeAdd();
		}
	}

    goLast(evt) {
		var firstIndex = this.getData( 'ltPropValue' ), perPage = this.getData( 'ltPropPerpage' ), MaxRecords = this.getData( 'ltPropRecords' )
		var x = Math.floor( MaxRecords / perPage ) * perPage >= MaxRecords ? MaxRecords - perPage : Math.floor(MaxRecords / perPage) * perPage;
		if( this.getMethods( 'onEnd' ) ){
			this.executeMethod( 'onEnd', x, this.$node, evt );
		}
	}

    onSelect(evt) {
		var firstIndex = this.getData( 'ltPropValue' ), perPage = this.getData( 'ltPropPerpage' ), MaxRecords = this.getData( 'ltPropRecords' )
			       		
		firstIndex += perPage
		var x = ( parseInt( evt.target.getAttribute( 'data-value' ) ) * perPage )- perPage >= MaxRecords ? MaxRecords - perPage : ( parseInt( evt.target.getAttribute( 'data-value' ) ) * perPage ) - perPage;
		var actionName = this.getMethods( 'onSelect' );
		if( actionName ){
			this.executeMethod( 'onSelect', x, this.$node, evt )
		}
	}

    pagination() {
		var current = this.getData('ltPropSelected'),
        propRecord = this.getData('ltPropRecords'),
        delta = 1,
        left = current - delta,
        right = current + delta + 1,
        range = [],
        rangeWithDots = [],
        l,last;
        last = Math.ceil(propRecord/this.getData('ltPropPerpage'));

        if( last>5){
        	if( current == 1 && current != last ){
        		right+=1;
        	}
        	if(current==last&&current!=1){
        		left-=1;
        	}
	    	for( var i = 1; i < last; i++){
	        	if(i == 1 || i == last || i >= left && i < right){
	            	range.push(i); 
	        	}
	        	else if( i>1 && i<left ){
	        		i=left-1;
	        	}
	        	else if( i >= right && i < last ){
	        		i=last-1;
	        	}
	    }
	    range.push(last);
		for (var i=0;i<range.length;i++){
			var val=range[i];
	        if (l){
	           	if (val - l !== 1){
	               	 	rangeWithDots.push("...");
	            	}
	        	}
		        rangeWithDots.push(val);
		        l = val;
	    	}
		}
		else{
			for( var i=1; i <= last; i++ ){
				rangeWithDots.push(i);
			}	
		}
    	this.setData("paginationRange",rangeWithDots);
    	this.activeAdd();
	}

    static methods() {
        return {
            
        };
    }

    static actions() {
        return {
                 
                'clickEvent' : function(evt){
                    var elm=evt.target;
                    if(elm.getAttribute('data-value')){
                        if(elm.getAttribute('data-value')!="..."){
                            this.onSelect(evt);
                        }
                        
                    }
                    else{
                        while(elm&&(!elm.className||(elm.className.indexOf("lyteNavigator")==-1&&elm.className.indexOf("lyteDoubleFront")==-1&&elm.className.indexOf("lyteSingleFront")==-1&&elm.className.indexOf("lyteDoubleBack")==-1&&elm.className.indexOf("lyteSingleBack")==-1))){
                            elm=elm.parentNode;
                        }
                        if(elm&&elm.className.indexOf("lyteDoubleFront")!=-1){
                            this.goLast(evt);
                        }
                        else if(elm&&elm.className.indexOf("lyteSingleFront")!=-1){
                            this.onForward(evt);
                        }
                        else if(elm&&elm.className.indexOf("lyteDoubleBack")!=-1){
                            this.goFirst(evt);
                        }
                        else if(elm&&elm.className.indexOf("lyteSingleBack")!=-1){
                            this.onBackward(evt)
                        }
                        else{
                            evt.preventDefault();
                        }
                    }
                    
                }	
        };
    }

    static observers() {
        return {
            ariaObserver: function( change ) {
                if(this.getData('ltPropAria')){
                    window._lyteUiUtils.setAttribute( this.$node.querySelector('.lyteNavigator'), this.getData( 'ltPropAriaNavigator' ) || {}, {} );
                    window._lyteUiUtils.setAttribute( this.$node.querySelector('.lyteSingleFront'), this.getData( 'ltPropAriaNext' ) || {}, {} );
                    window._lyteUiUtils.setAttribute( this.$node.querySelector('.lyteSingleBack'), this.getData( 'ltPropAriaPrev' ) || {}, {} );
                    window._lyteUiUtils.setAttribute( this.$node.querySelector('.lyteDoubleFront'), this.getData( 'ltPropAriaEnd' ) || {}, {} );
                    window._lyteUiUtils.setAttribute( this.$node.querySelector('.lyteDoubleBack'), this.getData( 'ltPropAriaHome' ) || {}, {} );

                }

            }.observes( 'ltPropAriaNavigator','ltPropAriaNext','ltPropAriaPrev','ltPropAriaHome','ltPropAriaEnd' ).on( 'didConnect' ),

            paginationObs:function(){
                var type = this.getData('ltPropType').toLowerCase()
                if( type === 'simple'){
                    this.pagination();
                } 
            }.observes('ltPropSelected','ltPropPerpage','ltPropRecords'),

            checkButtonObs : function(){
                this.initalizeOrReset.call(this);
            }.observes('ltPropPerpage', 'ltPropValue', 'ltPropRecords', 'ltPropMoreRecords')
        };
    }
}

/**
 * @syntax nonYielded 
 *  <lyte-navigator> </lyte-navigator>  
 */

/**
 * @syntax 
 * @attribute ltPropType=simple
 * @attribute ltPropYield=false
 * <lyte-navigator lt-prop-type="simple" > 
 *	  <lyte-nav-arrow> </lyte-nav-arrow> 
 *	  <lyte-nav-arrow> </lyte-nav-arrow> 
 *	  <lyte-nav-arrow> </lyte-nav-arrow> 
 *	  <lyte-nav-arrow> </lyte-nav-arrow> 
 * </lyte-navigator>  
 */

/**
* @syntax
* @attribute ltPropType=border
* @attribute ltPropYield=false
* <lyte-navigator lt-prop-type="border" > 
*	  <lyte-nav-arrow> </lyte-nav-arrow> 
*	  <lyte-nav-arrow> </lyte-nav-arrow> 
*	  <lyte-nav-arrow> </lyte-nav-arrow> 
*	  <lyte-nav-arrow> </lyte-nav-arrow> 
* </lyte-navigator>  
*/

/**
* @syntax 
* @attribute ltPropType=border 
* @attribute ltPropYield=true
*  <lyte-navigator lt-prop-type="border"> 
*	  <template is = "registerYield" yield-name = "navigatorYield"> 
*	  	  <div class="lyteDoubleBack"> Home </div> 
*	  	  <div class="lyteSingleBack"> Prev </div> 
*	  	  <div> {{startRecord}} to {{endRecord}} </div> 
*	  	  <div class="lyteSingleFront"> Next </div> 
*	  	  <div class="lyteDoubleFront"> End </div> 
*	  </template> 
*	</lyte-navigator>  
*/

/**
* @syntax  
* @attribute ltPropType=simple 
* @attribute ltPropYield=true
* <lyte-navigator lt-prop-type="simple"> 
*	 <template is = "registerYield" yield-name = "navigatorYield"> 
*	  	 <div class="lyteDoubleBack"> Home </div> 
*	  	 <div class="lyteSingleBack"> Prev </div> 
*	  	   <div data-value="1"> 1</div> 
*	  	   <div data-value="10"> 10</div>
*	  	 <div class="lyteSingleFront"> Next </div> 
*	  	 <div class="lyteDoubleFront"> End </div> 
*	 </template> 
* </lyte-navigator>   
*/

/**
* @syntax 
* @attribute ltPropType=border 
* @attribute ltPropYield=true
* <lyte-navigator lt-prop-type="border"> 
*	 <template is = "registerYield" yield-name = "navigatorYield"> 
*	  	 <div class="lyteDoubleBack"> Home </div> 
*	  	 <div class="lyteSingleBack"> Prev </div> 
*	  		<div data-value="1"> 1</div> 
*	  	   <div data-value="10"> 10</div>
*	  	 <div class="lyteSingleFront"> Next </div> 
*	  	 <div class="lyteDoubleFront"> End </div> 
*	 </template> 
* </lyte-navigator>   
*/

export { LyteNavigatorComponent };