import { prop } from "@slyte/core";
import { Component } from "../../component.js";

class LyteSchedulerWeekComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropMultiUserView : prop('boolean'),
			selectedUserArr : prop('array',{default:[]}),
			ltPropMaxAllDayEvent : prop('number',{default:5}),
			ltPropDateArray : prop('array'),
			ltPropLabel : prop('array'),
			ltPropDisplayYear : prop('number'),
			ltPropCurrMonth : prop('number'),
			ltPropCurrentDate : prop('object'), 
			startDateOfView : prop('string'),
			ltPropEvent : prop('object'),
			ltPropBusinessDays : prop('array'),
			ltPropWeekStart : prop('number'),
			ltPropSchedulerLabelFormat : prop('string'),
			month :  prop( 'array', { default : [ 'January', 'February', 'March', 'April', 'May','June' ,'July','August','September','October','November','December' ] } )
		};		
	}

    weekView(date, weekStart) {
		var date = date || new Date();
		this.generateWeek(date, weekStart);
	}

    generateWeek(date, weekStart) {
		var startofWeek = new Date(date.getFullYear(),date.getMonth(), date.getDate() );
		var start_diff = date.getDay()  - weekStart  ;
		if( date.getDay() > weekStart ){
			startofWeek.setDate(startofWeek.getDate() - (start_diff));
		}else{
			startofWeek.setDate(startofWeek.getDate() - ((7 + start_diff) % 7));
		}
		var result = [];
		var businessDay = this.getData('ltPropBusinessDays');

		var eventArr  = this.getData('ltPropEvent');
		var nxt_date = new Date(startofWeek);
		this.setData('ltPropCurrMonth',startofWeek.getMonth());
		
		for ( var index = 0; index < 7; index++ ) {
			var year = nxt_date.getFullYear();
			var month = ( nxt_date.getMonth() + 1 );
			var curr_date = ('0' + nxt_date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + year;

			var is_business = businessDay.includes(nxt_date.getDay()) ? 'lyteSchedulerBusinessDay' : 'lyteSchedulerNonBusinessDay' ;
			result[index] = {'val' : $L.moment(curr_date,'DD-MM-YYYY') ,'date' : nxt_date.getDate(),'month' : nxt_date.getMonth(),'day' : nxt_date.getDay(),'buisness': is_business,'events' : eventArr[curr_date], 'currentDate' : this.isDateEqual(curr_date)};

			nxt_date.setDate(nxt_date.getDate()+1);
		}
		var lastofweek = nxt_date.setDate(nxt_date.getDate()-1);
		this.setData('ltPropDisplayYear', startofWeek.getFullYear());
		this.setData('startDateOfView',result[0].val.format('DD-MM-YYYY'));
		
		var _this = this;
		$L.fastdom.mutate( function(){
			var startofWeek = $L.moment(_this.getData('startDateOfView'),'DD-MM-YYYY').getDObj();
			_this.setDisplayDate($L("scheduler-start-date",this.$node)[0],startofWeek);
			var endofWeek = new Date( startofWeek.setDate(startofWeek.getDate() + 6) );
			_this.setDisplayDate($L("scheduler-end-date",this.$node)[0],endofWeek);
		});	
		startofWeek = new Date( startofWeek.setDate(startofWeek.getDate() + 6) );
		this.setData('ltPropDateArray',result);
	}

    addEventObj(date, eventObj, event, indexDate, view) {
		var start_format = date.format('DD-MM-YYYY');
		var start_date =  $L.moment(event.start,this.getData('ltPropFormat'));
		var cloneObject = window.$u.clone(event);
		var weekstart = this.getData('ltPropWeekStart') === undefined ? 0 : this.getData('ltPropWeekStart');
		if(start_format == start_date.format('DD-MM-YYYY')){
			cloneObject.StartOfEvent = true;
		}else{
			delete cloneObject.middleofevent;
			cloneObject.endOfevent  =true;
		}
		eventObj[indexDate] =  eventObj[indexDate] ? eventObj[indexDate] : [];
		eventObj[indexDate].push(cloneObject);
		var startDay = date.get('day');
		var end_date = $L.moment(event.end,this.getData('ltPropFormat'));

		if(view === 'week' || view === 'month' && !this.getData('ltPropMultiUserView')){
			var curr_date = ((6 - weekstart   ) + date.get('day') + 1) % 7;
			var EndOftheWeek  = $L.moment(date).add((6 - curr_date),'date',true);
			if( this.isinBetween(start_format,EndOftheWeek.format('DD-MM-YYYY'),end_date.format('DD-MM-YYYY'))){
				if( !cloneObject.StartOfEvent ){
					delete cloneObject.endOfevent;
					cloneObject.middleofevent = true;
				}
				eventObj = this.addEventObj(EndOftheWeek.add(1,'date',true),eventObj,event,EndOftheWeek.format('DD-MM-YYYY'),view);
			}
		}
		else{
			if(start_format !== end_date.format('DD-MM-YYYY') ){
				date.add(1,'date',true);
				indexDate = date.format('DD-MM-YYYY');
				eventObj = this.addEventObj(date,eventObj,event,indexDate,view);
			}
		}
		
		return eventObj;
	}

    isDateEqual(date) {
		var curr_date = this.getData( 'ltPropCurrentDate' );
		date = $L.moment( date , 'DD-MM-YYYY' ).getDObj();
		return curr_date.getDate() === date.getDate() && curr_date.getMonth() === date.getMonth() && curr_date.getFullYear() === date.getFullYear();
	}

    setDisplayDate(dateDiv, date, showdate) {
		if(dateDiv.children.length){
		
			while(dateDiv.children.length){
				dateDiv.children[0].remove();
			}		
		}
		if(this.getData('ltPropSchedulerView') !== 'month' || showdate){
			dateDiv.appendChild(this.createTextNode(date.getDate(), 'lyteSchNavigatorDateLabel'));
		}
		dateDiv.appendChild(this.createTextNode(this.data.month[ date.getMonth() ], 'lyteSchNavigatorMonthLabel'));
		dateDiv.appendChild(this.createTextNode(date.getFullYear(), 'lyteSchNavigatorYearLabel'));

	}

    createTextNode(text, className) {
		var span = document.createElement('span');
		if(className) {
			span.classList.add(className);
		}
		var textnode =  document.createTextNode(text);
		span.appendChild(textnode);
		return span; 
	}

    generateTimeLine() {
		var timeLine = this.$node.getData('ltPropTimeLine');
		var timelineArray = [];
		var index = 0;
		var mins = 60 - timeLine;
		timelineArray[index++] = 0; 
		while(mins){
			timelineArray[index] =  timelineArray[ index - 1 ] + timeLine;
			mins -= timeLine;		
			index++;
			
		}
		this.$node.setData('timelineArray',timelineArray);
	}

    static actions() {
        return {
            clearSelection : function(){
                this.setData('selectedUserArr',[]);
                var search_popover = $L('#usersreachPopover')[0];
                var userlist = $L('.lyteSchedulerUserSearch', search_popover.actualModalDiv);
                for(window.index = 0; window.index < userlist.length; window.index++){
                    var checkbox = $L('lyte-checkbox',userlist[window.index])[0];
                    checkbox.setData('ltPropChecked',false);
                }
                var  schedulerUser = $L('[data-userid]');
                schedulerUser.removeClass('lyteSchedulerUserHide');
                schedulerUser.removeClass('lyteSchedulerUserSelected'); 
            },
            hiddenEvent : function(event,hiddenObj,date){
                this.throwEvent('hiddenEvent',event,hiddenObj,date);
            },
            onSchedulerEventClick : function(event ,elem){
                this.throwEvent('onSchedulerEventClick',event,elem);
            },
            onSchedulerEventHover : function(){
                this.throwEvent('onSchedulerEventHover',window.event,window.elem);
            }
        };
    }

    static methods() {
        return {
            openUserSearch : function( event , element ){
                var popover = $L('#usersreachPopover');
                if(!popover[0].getData('ltPropShow')){
                    popover[0].ltProp('show',true);
                }
            }
            
        };
    }

    static observers() {
        return {
            initFunc : function(){
                var eventManipulator = new window._lyteUiUtils.eventManipulator( this.getData('ltPropFormat') );
                var event = eventManipulator.generateEventObjArr( this.getData('ltPropManipulatedEvent'), this.getData('ltPropFormat'), 'week',  this.getData('ltPropWeekStart') , this.getData('ltPropMultiUserView') ,this.getData('ltPropMaxAllDayEvent'));
                this.setData('ltPropEvent',event.eventObj);
                this.setData('hiddenObj',event.hiddenObj)
                var startweek = this.getData('ltPropWeekStart');
                var format = this.getData('ltPropFormat');
                format = (format.split(' '))[0];
                startweek = startweek ? startweek : 0;
                var date =  $L.moment(this.getData('ltPropStartDateOfView'),format).getDObj();
                this.weekView(date, startweek);
            }.observes('ltPropStartDateOfView','ltPropManipulatedEvent')
        };
    }
}

export { LyteSchedulerWeekComponent };
