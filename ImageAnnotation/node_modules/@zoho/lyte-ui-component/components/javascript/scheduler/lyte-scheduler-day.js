import { prop } from "@slyte/core";
import { Component } from "../../component.js";

class LyteSchedulerDayComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropMultiUserView : prop('boolean'),
			ltPropDateArray : prop('array',{default :[]}),
			ltPropLabel : prop('array'),
			ltPropMaxAllDayEvent : prop('number',{default:5}),
			ltPropDisplayYear : prop('number'),
			ltPropCurrMonth : prop('number'),
			ltPropCurrentDate : prop('object',{default : new Date()}), 
			ltPropStartDateOfView : prop('string',{default:''}),
			ltPropEvent : prop('object',{default :{}}),
			ltPropBusinessDays : prop('array'),
			ltPropWeekStart : prop('number'),
			ltPropShowCurrentTime : prop('boolean',{default : false}),
			month :  prop( 'array', { default : [ 'January', 'February', 'March', 'April', 'May','June' ,'July','August','September','October','November','December' ] } ),
			"days" : prop('array',{default:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']})

		};		
	}

    ResetTimeLine() {
		var allDay = $L('.lyteSchedulerAllDayEvent .scheduler-event-div');
		for(var index = 0; index < allDay.length;index++){
			var div = allDay[index];
			if(div){
				div.style.height = '0px';
			}
		}
		// if(this.getData('ltPropMultiUserView')){
		// 	var nMorebtn = $L('.lyteSchedulerEventMoreBtn',this.$node).not(".lyteSchedulerEventMoreBtnHide");
		// 	for(var index = 0; index < nMorebtn.length;index++){
		// 		nMorebtn[index].classList.add('lyteSchedulerEventMoreBtnHide');
		// 		nMorebtn[index].innerHTML = '';
		// 	}
		// }
		var timeline = $L('.lyteSchedulerMultiUserViewEventElem',this.$node);
		for(var index = 0 ; index < timeline.length ; index++){
			timeline[index].style.height = '0px';
		}
	}

    didConnect() {
		this.MultiDayViewNav();
	}

    MultiDayViewNav() {
		var scrollLeftNav = this.$node.querySelector('.lyteSchedulerLeftNav');
		var fixedCol = this.$node.querySelector('.lyteSchedulerFixedCol');
		if(scrollLeftNav){
			scrollLeftNav.style.left = fixedCol.offsetWidth + 'px';
			scrollLeftNav.classList.add('lyteSchedulerhideScrollNav');
			var scrollRightNav = this.$node.querySelector('.lyteSchedulerRightNav');
			var scrollDiv = this.$node.querySelector('.lyteSchedulerViewWrapper');
			var _this = this;
			scrollDiv.addEventListener('scroll',function(event){
				
				var MaxScrollWidth = this.scrollWidth - this.offsetWidth;
				if(this.scrollLeft == 0){
					scrollLeftNav.classList.add('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft !== 0){
					scrollLeftNav.classList.remove('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft == MaxScrollWidth){
					scrollRightNav.classList.add('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft !== MaxScrollWidth){
					scrollRightNav.classList.remove('lyteSchedulerhideScrollNav');
				}
			});
		}
		var schedulerEventDiv = $L('scheduler-event-div');
	}

    dayView(date) {
		var date =  date || new Date();
		this.generateDay(date);
		this.MultiDayViewNav();
	}

    generateDay(date) {
		this.setData('ltPropDisplayYear',date.getFullYear());
		var Day = this.data.days[date.getDay()];
		this.setData('currDay',Day);
		var month = date.getMonth()+1;
		var curr_date = ('0' + date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + date.getFullYear();
		var _this = this;
		var array = []
		array =  this.getData('ltPropEvent')[curr_date] || [];
		this.setData('ltPropDateArray',array);
		$L.fastdom.mutate( function(){
			_this.setDisplayDate($L("scheduler-start-date",$L(_this.$node).closest('lyte-scheduler')[0])[0],date);
		});
		$L('.lyteSchedulerDate').addClass(this.isDateEqual(curr_date) ? 'lyteSchedulerCurrDate' : '');
	}

    setDisplayDate(dateDiv, date, showdate) {
		if(dateDiv.children.length){
		
			while(dateDiv.children.length){
				dateDiv.children[0].remove();
			}		
		}
		if(this.getData('ltPropSchedulerView') !== 'month' || showdate){
			dateDiv.appendChild(this.createTextNode(date.getDate(), 'lyteSchNavigatorDateLabel'));
		}
		dateDiv.appendChild(this.createTextNode(this.data.month[ date.getMonth() ], 'lyteSchNavigatorMonthLabel'));
		dateDiv.appendChild(this.createTextNode(date.getFullYear(), 'lyteSchNavigatorYearLabel'));

	}

    createTextNode(text, className) {
		var span = document.createElement('span');
		if(className) {
			span.classList.add(className);
		}
		var textnode =  document.createTextNode(text);
		span.appendChild(textnode);
		return span; 
	}

    isDateEqual(date) {
		var curr_date = this.getData( 'ltPropCurrentDate' );
		date = $L.moment( date , 'DD-MM-YYYY' ).getDObj();
		return curr_date.getDate() === date.getDate() && curr_date.getMonth() === date.getMonth() && curr_date.getFullYear() === date.getFullYear();
	}

    setCurrentTimeLine(date) {
		if(this.getData('ltPropShowCurrentTime')){
			if($L.moment(date).format('DD-MM-YYYY') ===  $L.moment(this.getData('ltPropCurrentDate')).format('DD-MM-YYYY') ){
				this._navigated = false;

				$L('.schedulerToday',this.$node)[0].ltProp('disabled',true);
				if($L('.lyteschedulerCurrentTimeLine',this.$node)[0]){
					$L('.lyteschedulerCurrentTimeLine',this.$node)[0].style.display = 'flex';
					var currentLine = $L('.lyteschedulerCurrentTimeLine',this.$node)[0];
					if(currentLine){
						var current_Time = this.getData('ltPropCurrentDate');
						var min = current_Time.getMinutes();
						var hours = current_Time.getHours();
						var Meridiem;
						if( hours <  12 ){
							Meridiem = 'AM';
						}else{
							Meridiem = 'PM';
							hours = hours - 12;
							hours = hours === 0 ? 12 : hours;  
						}
						var Div_min = this.getData('ltPropTimeLine') * parseInt((min/this.getData('ltPropTimeLine')));
						var timeformat  = '[data-time="' + ('0' + hours).slice(-2) + ':' +   ('0' + Div_min).slice(-2) + ' ' + Meridiem +  '"]';
						var div = $L(timeformat)[0];
						currentLine.style.top =  div.getBoundingClientRect().top - currentLine.offsetParent.getBoundingClientRect().top + (div.offsetHeight/this.getData('ltPropTimeLine')) * (min - Div_min)  + 'px';
						currentLine.insertBefore(this.createTextNode(hours + ":" + min + ' ' + Meridiem,'lyteSchedulerCurrentTime'),currentLine.firstChild);
					}
				}
			}else{
				$L('.schedulerToday',this.$node)[0].ltProp('disabled',false);
				this.removeCurrentTimeline();
			}
		}else{
			this.removeCurrentTimeline();
		}	
		
	}

    removeCurrentTimeline() {
		if($L('.lyteschedulerCurrentTimeLine',this.$node)[0]){
			$L('.lyteschedulerCurrentTimeLine',this.$node)[0].style.display = 'none';
			if($L('.lyteSchedulerCurrentTime',this.$node)[0]){
				$L('.lyteSchedulerCurrentTime',this.$node)[0].remove();
			} 
		}
	}

    static actions() {
        return {
            hiddenEvent : function(event,hiddenObj,date,user){
                this.throwEvent('hiddenEvent',event,hiddenObj,date,user);
            },
            onSchedulerEventClick : function(event ,elem){
                this.throwEvent('onSchedulerEventClick',event,elem);
            },
            onSchedulerEventHover : function(){
                this.throwEvent('onSchedulerEventHover',window.event,window.elem);
            }
        };
    }

    static methods() {
        return {
            // Functions which can be used as callback in the component.
        };
    }

    static observers() {
        return {
            initFunc : function(){

                var eventManipulator = new window._lyteUiUtils.eventManipulator( this.getData('ltPropFormat') );
                var event = eventManipulator.generateEventObjArr( this.getData('ltPropManipulatedEvent'), this.getData('ltPropFormat'), 'day',  this.getData('ltPropWeekStart') , this.getData('ltPropMultiUserView') ,this.getData('ltPropMaxAllDayEvent'));
                this.setData('ltPropEvent',event.eventObj);
                this.setData('hiddenObj',event.hiddenObj);
                this.ResetTimeLine();
                var start_date = $L.moment(this.getData('ltPropStartDateOfView'),'DD-MM-YYYY').getDObj();
                this.dayView(start_date);
            }.observes('ltPropStartDateOfView','ltPropManipulatedEvent'),

            showCurrentTimeObserver: function(){
                this.setCurrentTimeLine(this.getData('ltPropCurrentDate'));
            }.observes('ltPropShowCurrentTime')
        };
    }
}

export { LyteSchedulerDayComponent };