import { prop } from "@slyte/core";
import { Component } from "../../component.js";

class LyteSchedulerMonthComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropMultiUserView : prop('boolean'),
			ltPropDateArray : prop('array'),
			ltPropLabel : prop('array'),
			ltPropDisplayYear : prop('number'),
			ltPropCurrMonth : prop('number'),
			ltPropMaxAllDayEvent : prop('number',{default:5}),
			ltPropCurrentDate : prop('object'), 
			ltPropStartDateOfView : prop('string'),
			ltPropEvent : prop('object'),
			ltPropBusinessDays : prop('array'),
			ltPropWeekStart : prop('number'),
			ltPropFormat : prop('string'),
			month :  prop( 'array', { default : [ 'January', 'February', 'March', 'April', 'May','June' ,'July','August','September','October','November','December' ] } )
		};		
	}

    monthView(date) {
		var date = date || new Date();
		var displayHead = date.getMonth();
		this.setData('ltPropCurrMonth', displayHead);
		this.setData('ltdisplayHead',this.data.month[displayHead] +  ' ' + date.getFullYear());
		this.setData('ltPropDisplayYear', date.getFullYear());
		// if(this.getData('ltPropMultiUserView')){
		// 	this.generateEventObjArr();
		// }
		this.generateMonth(new Date(date.getFullYear(), date.getMonth(), 1));
	}

    generateMonth(startOfMonth) {
		var result=[];
		var current_month = startOfMonth.getMonth();
		var eventArr  = this.getData('ltPropEvent');
		var businessDay = this.getData('ltPropBusinessDays');
		var date = new Date(startOfMonth.getFullYear(), startOfMonth.getMonth(), 1); 
		var weekstart = this.getData('ltPropWeekStart') === undefined ? 0 : this.getData('ltPropWeekStart');
		var start_diff = date.getDay()  - weekstart ;
		if( date.getDay() > weekstart ){
			date.setDate(date.getDate() - (start_diff));
		}else{
			date.setDate(date.getDate() - ((7 + start_diff) % 7));
		}
		for(var row = 0 ; row < 6; row++ ){
			var week = new Array(7);
			for(window.index = 0 ; index < 7 ; index++){
				var year = date.getFullYear();
				var month = ( date.getMonth() + 1 );
				var curr_date = ('0' + date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + year;

				var is_business = businessDay.includes(date.getDay()) ? 'lyteSchedulerBusinessDay' : 'lyteSchedulerNonBusinessDay' ;
				week[ index ] = {'val' : $L.moment(curr_date,'DD-MM-YYYY') ,'date' : date.getDate(), 'buisness' : is_business,'events' : eventArr[curr_date] , 'currentDate' : this.isDateEqual( curr_date ),'month' :month-1,'year': year};
				if(current_month == date.getMonth()){
					week[index].current_month = true;
				}
				date.setDate( date.getDate() + 1 );
			}
			result.push( week );
		}
		var startDate = result[0][0].val;
		// this.setData('ltPropStartDateOfView',startDate.format('DD-MM-YYYY'));
		startDate = startDate.getDObj();
		var _this = this;
		$L.fastdom.mutate( function(){
			_this.setDisplayDate($L("scheduler-start-date",this.$node)[0],startOfMonth);
		});
		this.setData('ltPropDateArray', result);
	}

    createTextNode(text, className) {
		var span = document.createElement('span');
		if(className) {
			span.classList.add(className);
		}
		var textnode =  document.createTextNode(text);
		span.appendChild(textnode);
		return span; 
	}

    setDisplayDate(dateDiv, date, showdate) {
		if(dateDiv.children.length){
		
			while(dateDiv.children.length){
				dateDiv.children[0].remove();
			}		
		}
		if(this.getData('ltPropSchedulerView') !== 'month' || showdate){
			dateDiv.appendChild(this.createTextNode(date.getDate(), 'lyteSchNavigatorDateLabel'));
		}
		dateDiv.appendChild(this.createTextNode(this.data.month[ date.getMonth() ], 'lyteSchNavigatorMonthLabel'));
		dateDiv.appendChild(this.createTextNode(date.getFullYear(), 'lyteSchNavigatorYearLabel'));

	}

    isDateEqual(date) {
		var curr_date = this.getData( 'ltPropCurrentDate' );
		date = $L.moment( date , 'DD-MM-YYYY' ).getDObj();
		return curr_date.getDate() === date.getDate() && curr_date.getMonth() === date.getMonth() && curr_date.getFullYear() === date.getFullYear();
	}

    static actions() {
        return {
            hiddenEvent : function(event,hiddenObj,date){
                this.throwEvent('hiddenEvent',event,hiddenObj,date);
            },
            onSchedulerEventClick : function(event ,elem){
                this.throwEvent('onSchedulerEventClick',event,elem);
            },
            onSchedulerEventHover : function(){
                this.throwEvent('onSchedulerEventHover',window.event,window.elem);
            }
        };
    }

    static methods() {
        return {
            // Functions which can be used as callback in the component.
        };
    }

    static observers() {
        return {
            initFunc : function(){
                var eventManipulator = new window._lyteUiUtils.eventManipulator( this.getData('ltPropFormat') );
                var event = eventManipulator.generateEventObjArr( this.getData('ltPropManipulatedEvent'), this.getData('ltPropFormat'), 'month',  this.getData('ltPropWeekStart') , this.getData('ltPropMultiUserView') ,this.getData('ltPropMaxAllDayEvent'));
                this.setData('ltPropEvent',event.eventObj);
                this.setData('hiddenObj',event.hiddenObj);
                var start_date = $L.moment(this.getData('ltPropStartDateOfView'),'DD-MM-YYYY').getDObj();
                this.monthView(start_date);
            }.observes('ltPropStartDateOfView')
        };
    }
}

export { LyteSchedulerMonthComponent };
