import { prop } from "@slyte/core";
import { Component, LyteUiComponentComponentRegistry } from "../../component.js";
window._lyteSchedulerStartId = 0;
window._lyteSchedulerEndId = 0;

class LyteSchedulerComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			'month' :  prop( 'array', { default : [ 'January', 'February', 'March', 'April', 'May','June' ,'July','August','September','October','November','December' ] } ),
			'montharray' : prop('array', { default : [] } ),
			'DateArray' : prop('array', { default : [] } ),
			'ltPropEvent' : prop('array' ,{ default : [] } ),
			'ltPropManipulatedEvent' : prop('array',{ default : [] }),
			'label' : prop('array',{default : ['SUN','MON','TUE','WED','THU','FRI','SAT']}),
			'ltPropDayLabel' :  prop('array',{default : ['SUN','MON','TUE','WED','THU','FRI','SAT']}),
			'labelFF' :  prop('array',{default : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']}),
			'ltPropFormat' : prop('string',{ default : 'DD-MM-YYYY HH:mm A'}),
			'ltPropcurrMonth' : prop('number'),
			'ltdisplayCurrDate' : prop('string'),
			'ltPropCurDay' :prop('string'),
			'ltdisplayYear' : prop('number'),
			'ltPropDraggable' : prop('boolean',{default:false}),
			'ltPropMultiUserView' : prop('boolean',{default: false}),
			'ltPropWeekStart' : prop('number'),
			'openSchedulerPopover' : prop('boolean',{default: false}),
			'ltPropSchedulerUser' : prop('array',{default:[]}),
			'ltPropBusinessDays' : prop('array',{default:[1,2,3,4,5]}),
			'ltPropBusinessHour' : prop('array',{default:[]}),
			'ltPropSchedulerView' : prop('string',{default:'month'}),
			'ltPropSchedulerHeaderYield' : prop('boolean',{default:false}),
			'ltPropSchedulerBusinessHour' : prop('array',{default:['09:00 AM','06:00 PM']}),
			'TimeLine' : prop('array',{ default:['12am','1am','2am','3am','4am','5am','6am','7am','8am','9am','10am','11am','12pm','1pm','2pm','3pm','4pm','5pm','6pm','7pm','8pm','9pm','10pm','11pm']}),
			'timelineArray' : prop('array',{default:[]}),
			'ltPropTimeLine' : prop('number',{default : 30}),
			'currDay' : prop('string'),
			'ltCurrStartDate' : prop('string'),
			'ltCurrEndDate' : prop('string'),
			'ltPropCurrentDate' : prop('object',{default : new Date()}),
			"days" : prop('array',{default:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']}),
			"startDateOfView" : prop('string'),
			'hiddenEvent' : prop('array',{default:[]}),
			"hiddenObj" : prop('object',{default:{}}),
			"eventArr" : prop('array',{default:[]}),
			"todayButton": prop('string',{default:'Today'}),
			'ltPropSchedulerSearch': prop('boolean',{default : false}),
			"selectionType" : prop('string',{default:'day'}),
			'ltPropSortUser' : prop('boolean',{default: false}),
			'checkboxArr' : prop('array',{default:[]}),
			"selectedUserArr" : prop('array',{default:[]}),
			 //lyte-menu data
			"ltPropSchedulerMenu" : prop('boolean',{default: false}),
			"ltPropSchedulerMenuYield" : prop('boolean',{default: false}),
			"ltPropSchedulerMenuContent" : prop('array',{default:[]}),
			"ltPropSchedulerMenuUserValue" : prop('string'),
			"ltPropSchedulerMenuSystemValue" : prop('string'),
			"ltPropSchedulerMenuDescription" : prop('string'),
			"ltPropSchedulerMenuId" : prop('string'),
			"ltPropSchedulerMenuClass" : prop('string'),
			"ltPropSchedulerMenuPosition" : prop('string'),
			"ltPropSchedulerMenuWidth" : prop('string',{default:'auto'}),
			"ltPropSchedulerMenuHeight" : prop('string',{default:'auto'}),
			"ltPropSchedulerMenuCallout" : prop('boolean', {default : false}),
			"ltPropSchedulerMenuFreeze" : prop('boolean',{default : false}),
			"ltPropSchedulerMenuQueryClass" : prop('string',{default: 'lyteMenuSelected'}),
			"ltPropSchedulerMenuBindToBody" : prop('boolean',{default : true}),
			"ltPropSchedulerMenuAnimate" : prop('boolean',{default : false}),
			"ltPropSchedulerMenuWrapperClass" : prop('string'),
			"ltPropSchedulerMenuAria" : prop('boolean', { default : false}),
			"ltPropSchedulerMenuAriaAttribute" : prop('object' , { default : { role : 'menu'} }) ,
			"dropData" : prop('array',{default:[ {
				'name': 'Tamilnadu',
				'value': 'TN'
			}, {
				'name': 'Kerala',
				'value': 'KL'
			} ]})

		};		
	}

    init() {
		this.generateTimeLine();
	}

    didConnect() {
        var lyteSelf = this;

        var _this = this;
        // if($L('.lyteSchedulerNavLeft')){
		// 	this.$node.querySelector('.lyteSchedulerNavLeft').addEventListener('click', this.schedulerNav.bind(this));
		// }
        // if($L('.lyteSchedulerNavRight')){
		// 	this.$node.querySelector('.lyteSchedulerNavRight').addEventListener('click', this.schedulerNav.bind(this));
		// }
        this.$node.addEvent = function(event){
			if(event.start){
				var events  = this.getData('ltPropEvent');
				
				if(!window.$u.findWhere(events,{'id':event.id})){
					lyteSelf.$addon.arrayUtils( events , 'push' , event );
					_this.callCurrentView();
				}
			}
		}
        this.$node.deleteEvent = function(event_id){
			if(event_id){
				var events  = this.getData('ltPropEvent');
				var event_data = window.$u.findWhere(events,{'id':event_id});

				if(event_data){
					lyteSelf.$addon.arrayUtils( events , 'removeObjects' , event_data );
					_this.callCurrentView();
				}

			}
		}
        this.$node.today = function(){
			_this._navigated = false;
			$L('.schedulerToday',this.$node)[0].ltProp('disabled',true);
			var date = this.getData('ltPropCurrentDate') || new Date();
			_this.setData('ltPropCurrMonth',date.getMonth());
			_this.setData('ltPropDisplayYear',date.getFullYear());
			_this.callCurrentView(date,false,this.getData('ltPropWeekStart'));
			if(_this.getMethods('onTodayClick')){
				_this.executeMethod('onTodayClick',_this.$node);
			}
		}
		this.addEventForNav();
        this.MultiDayViewNav();
    }
	addEventForNav(){
		var leftNav = $L('.lyteSchedulerNavLeft',this.$node)[0];
		var rightNav = $L('.lyteSchedulerNavRight',this.$node)[0];
		if(leftNav){
			leftNav.addEventListener('click', this.schedulerNav.bind(this));
		}
		if(rightNav){
			rightNav.addEventListener('click', this.schedulerNav.bind(this));
		}
	}

    schedulerNav(event) {
		var schedulerView =  this.getData('ltPropSchedulerView');	
		this._navigated = true;	
		var weekStart = this.getData('ltPropWeekStart');
		weekStart = weekStart === undefined ? 0 : weekStart;
		var _this = this;
		switch(schedulerView){
			case 'month':
				if(event.target.classList.contains('lyteSchedulerNavLeft')){
					var displayMonth = this.data.ltPropCurrMonth - 1;
				}else{
					
					var displayMonth = this.data.ltPropCurrMonth + 1;
				}
				var date = new Date(this.data.ltdisplayYear,displayMonth);
				_this.generateMonth(date);
				_this.setData('ltPropcurrMonth',date.getMonth());
				_this.setData('ltdisplayYear',date.getFullYear());
				$L('.schedulerToday',_this.$node)[0].ltProp('disabled',false);
				break;
			case 'week':
				var start_date = $L('lyte-scheduler-week')[0].getData('ltPropDateArray')[0].date;
				var date =  new Date(this.data.ltPropDisplayYear,this.data.ltPropCurrMonth,start_date);
				if(event.target.classList.contains('lyteSchedulerNavLeft')){
					date.setDate(date.getDate()-7);
				}else{
					date.setDate(date.getDate()+7);
				}
				$L('.schedulerToday',_this.$node)[0].ltProp('disabled',false);
				$L('lyte-scheduler-week')[0].setData('ltPropStartDateOfView',$L.moment(date).format('DD-MM-YYYY'));
				break;
			case 'day':
				if(this.getData('ltPropMultiUserView')){
					var events = $L('lyte-scheduler-event-tag');
					for(var index =0 ;index < events.length;index++){
						events[index].remove();
					}
				}

				var curr_date = $L.moment(this.getData('startDateOfView'),'DD-MM-YYYY').getDObj();
				var date =  new Date(curr_date.getFullYear(),curr_date.getMonth(),curr_date.getDate());
				if(event.target.classList.contains('lyteSchedulerNavLeft')){
					date.setDate(date.getDate()-1);
				}else{
					date.setDate(date.getDate()+1);
				}
				if($L.moment(date).format('DD-MM-YYYY') ===  $L.moment(this.getData('ltPropCurrentDate')).format('DD-MM-YYYY')){
					this._navigated = false;
					$L('.schedulerToday',this.$node)[0].ltProp('disabled',true);
					if(this.getData('ltPropShowCurrentTime')){
						$L('lyte-scheduler-day')[0].setData('ltPropShowCurrentTime',false);
					}
					
				}else{
					this._navigated = true;
					$L('.schedulerToday',this.$node)[0].ltProp('disabled',false);
					if(this.getData('ltPropShowCurrentTime')){
						$L('lyte-scheduler-day')[0].setData('ltPropShowCurrentTime',true);
					}
				}
				$L('lyte-scheduler-day')[0].setData('ltPropEvent',[])
				$L('lyte-scheduler-day')[0].setData('ltPropStartDateOfView',$L.moment(date).format('DD-MM-YYYY'));
				break;
		}
		this.setData( 'ltdisplayCurrDate', date.getDate() + ' ' + this.data.month[ date.getMonth() ]  );
		this.setData('ltPropCurDay',this.data.days[date.getDay()]);
		$L.fastdom.mutate(function(){
			_this.addDragAndDrop();
		})
		if(this.getMethods('onNavClick')){
			this.executeMethod('onNavClick',$L.moment(this.getData('startDateOfView','DD-MM-YYYY')));
		}
	}

    ResetTimeLine() {
		if(this.getData('ltPropMultiUserView')){
			var nMorebtn = $L('.lyteSchedulerEventMoreBtn',this.$node).not(".lyteSchedulerEventMoreBtnHide");
			for(var index = 0; index < nMorebtn.length;index++){
				nMorebtn[index].classList.add('lyteSchedulerEventMoreBtnHide');
				nMorebtn[index].innerHTML = '';
			}
		}
		var timeline = $L('.lyteSchedulerMultiUserViewEventElem',this.$node);
		for(var index = 0 ; index < timeline.length ; index++){
			timeline[index].style.height = '0px';
		}
	}

    setDisplayDate(dateDiv, date, showdate) {
		if(dateDiv.children.length){
		
			while(dateDiv.children.length){
				dateDiv.children[0].remove();
			}		
		}
		if(this.getData('ltPropSchedulerView') !== 'month' || showdate){
			dateDiv.appendChild(this.createTextNode(date.getDate(), 'lyteSchNavigatorDateLabel'));
		}
		dateDiv.appendChild(this.createTextNode(this.data.month[ date.getMonth() ], 'lyteSchNavigatorMonthLabel'));
		dateDiv.appendChild(this.createTextNode(date.getFullYear(), 'lyteSchNavigatorYearLabel'));

	}

    createTextNode(text, className) {
		var span = document.createElement('span');
		if(className) {
			span.classList.add(className);
		}
		var textnode =  document.createTextNode(text);
		span.appendChild(textnode);
		return span; 
	}

    generateTimeLine() {
		var timeLine = this.$node.getData('ltPropTimeLine');
		var timelineArray = [];
		var index = 0;
		var mins = 60 - timeLine;
		timelineArray[index++] = 0; 
		while(mins){
			timelineArray[index] =  timelineArray[ index - 1 ] + timeLine;
			mins -= timeLine;		
			index++;
			
		}
		this.$node.setData('timelineArray',timelineArray);
	}

    callCurrentView(date, init, weekStart) {
		var schedulerView = this.getData('ltPropSchedulerView');
		var _this = this;
		weekStart = weekStart === undefined ? 0 : weekStart;
		switch(schedulerView){
			case 'month':
				if( this._navigated && this.data.startDateOfView){
					var start_date = $L.moment( this.data.startDateOfView,'DD-MM-YYYY');
					date = date ? date :  new Date(start_date.format('YYYY'),start_date.format('MM') - 1,start_date.format('DD'));
				}else if( !date ){
					date = this.getData('ltPropCurrentDate');
				}
				$L('lyte-scheduler-month')[0].setData('ltPropStartDateOfView',$L.moment( date,'DD-MM-YYYY').format('DD-MM-YYYY'));
				this.setData('selectionType','month');
				this.setData('todayButton','This Month');
				break;
			case 'week':
				if( this._navigated && this.data.startDateOfView){
					var start_date = $L.moment( this.data.startDateOfView,'DD-MM-YYYY');
					date = date ? date :  new Date(start_date.format('YYYY'),start_date.format('MM') - 1,start_date.format('DD'));
				}else if( !date ){
					date = this.getData('ltPropCurrentDate');
				}
				$L('lyte-scheduler-week')[0].setData('ltPropWeekStart',weekStart);
				$L('lyte-scheduler-week')[0].setData('ltPropStartDateOfView',$L.moment( date,'DD-MM-YYYY').format('DD-MM-YYYY'));
				
				
				if(this.getData('ltPropWeekStart') !== undefined){
					this.setData('selectionType','week');
				}else{
					this.setData('selectionType','day');
				}
				this.setData('todayButton','This Week');
				break;
			case 'day':
				
				if( this._navigated && this.data.startDateOfView){
					var start_date = $L.moment( this.data.startDateOfView,'DD-MM-YYYY');
					date = date ? date :  new Date(start_date.format('YYYY'),start_date.format('MM') - 1,start_date.format('DD'));
				}else if( !date ){
					date = this.getData('ltPropCurrentDate');
				}
				$L('lyte-scheduler-day')[0].setData('ltPropStartDateOfView',$L.moment( date,'DD-MM-YYYY').format('DD-MM-YYYY'));
				this.setData('selectionType','day');
				this.setData('todayButton','Today');
				break;
		}
		
		date = (init || $L('.schedulerToday')[0].ltProp('disabled') ) ? new Date() : $L.moment(this.data.startDateOfView,'DD-MM-YYYY').getDObj();
		this.setData('ltdisplayCurrDate',date.getDate() + ' ' + this.data.month[date.getMonth()] + ' ' + date.getFullYear());
		this.setData('ltPropCurDay',this.data.days[date.getDay()]);
		$L.fastdom.mutate(function(){
			_this.addDragAndDrop();
		})
	}

    weekView(date, weekStart) {
		
		var date = date || new Date();
		this.generateEventObjArr();
		this.generateWeek(date, weekStart);
		
	}

    dayView(date) {
		var date =  date || new Date();
		this.generateDay(date);
		this.MultiDayViewNav();
	}

    generateDay(date) {
		this.setData('ltdisplayYear',date.getFullYear());
		var Day = this.data.days[date.getDay()];
		this.setData('currDay',Day);
		var month = date.getMonth()+1;
		var curr_date = ('0' + date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + date.getFullYear();
		this.setData('startDateOfView', curr_date);
		var _this = this;
		$L.fastdom.mutate( function(){
			_this.setDisplayDate($L("scheduler-start-date",_this.$node)[0],date);
		});
		
		$L('.lyteSchedulerDate').addClass(this.isDateEqual(curr_date) ? 'lyteSchedulerCurrDate' : '');

	}

    generateWeek(date, weekStart) {
		var startofWeek = new Date(date.getFullYear(),date.getMonth(), date.getDate() );
		var start_diff = date.getDay()  - weekStart  ;
		if( date.getDay() > weekStart ){
			startofWeek.setDate(startofWeek.getDate() - (start_diff));
		}else{
			startofWeek.setDate(startofWeek.getDate() - ((7 + start_diff) % 7));
		}
		var result = [];
		var businessDay = this.getData('ltPropBusinessDays');

		var eventArr  = this.getData('eventArr');
		var nxt_date = new Date(startofWeek);
		this.setData('ltPropcurrMonth',startofWeek.getMonth());
		
		for ( var index = 0; index < 7; index++ ) {
			var year = nxt_date.getFullYear();
			var month = ( nxt_date.getMonth() + 1 );
			var curr_date = ('0' + nxt_date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + year;

			var is_business = businessDay.includes(nxt_date.getDay()) ? 'lyteSchedulerBusinessDay' : 'lyteSchedulerNonBusinessDay' ;
			result[index] = {'val' : $L.moment(curr_date,'DD-MM-YYYY') ,'date' : nxt_date.getDate(),'month' : nxt_date.getMonth(),'day' : nxt_date.getDay(),'buisness': is_business,'events' : eventArr[curr_date], 'currentDate' : this.isDateEqual(curr_date)};

			nxt_date.setDate(nxt_date.getDate()+1);
		}
		var lastofweek = nxt_date.setDate(nxt_date.getDate()-1);
		this.setData('ltdisplayYear', startofWeek.getFullYear());
		this.setData('startDateOfView',result[0].val.format('DD-MM-YYYY'));
		
		var _this = this;
		$L.fastdom.mutate( function(){
			var startofWeek = $L.moment(_this.getData('startDateOfView'),'DD-MM-YYYY').getDObj();
			_this.setDisplayDate($L("scheduler-start-date",_this.$node)[0],startofWeek);
			var endofWeek = new Date( startofWeek.setDate(startofWeek.getDate() + 6) );
			_this.setDisplayDate($L("scheduler-end-date",_this.$node)[0],endofWeek);
		});	
		startofWeek = new Date( startofWeek.setDate(startofWeek.getDate() + 6) );
		this.setData('DateArray',result);
	}

    monthView(date) {
		var date = date || new Date();
		var displayHead = date.getMonth();
		this.data.ltPropcurrMonth = displayHead;
		this.setData('ltdisplayHead',this.data.month[displayHead] +  ' ' + date.getFullYear());
		this.setData('ltdisplayYear', date.getFullYear());
		if(this.getData('ltPropMultiUserView')){
			this.generateEventObjArr();
		}
		
		this.generateMonth(new Date(date.getFullYear(), date.getMonth(), 1));
	}

    generateMonth(startOfMonth) {

		var EndOfMonth = new Date(startOfMonth.getFullYear(), startOfMonth.getMonth()+1, 0);
		var result=[];
		var current_month = startOfMonth.getMonth();
		var eventArr  = this.getData('eventArr');
		var businessDay = this.getData('ltPropBusinessDays');
		var events = this.getData('ltPropManipulatedEvent');
		var date = new Date(startOfMonth.getFullYear(), startOfMonth.getMonth(), 1); 
		var weekstart = this.getData('ltPropWeekStart') === undefined ? 0 : this.getData('ltPropWeekStart');
		var start_diff = date.getDay()  - weekstart ;
		if( date.getDay() > weekstart ){
			date.setDate(date.getDate() - (start_diff));
		}else{
			date.setDate(date.getDate() - ((7 + start_diff) % 7));
		}
		for(var row = 0 ; row < 6; row++ ){
			var week = new Array(7);
			for(window.index = 0 ; index < 7 ; index++){
				var year = date.getFullYear();
				var month = ( date.getMonth() + 1 );
				var curr_date = ('0' + date.getDate()).slice(-2) + '-' + ('0' + month).slice(-2) + '-' + year;

				var is_business = businessDay.includes(date.getDay()) ? 'lyteSchedulerBusinessDay' : 'lyteSchedulerNonBusinessDay' ;
				week[ index ] = {'val' : $L.moment(curr_date,'DD-MM-YYYY') ,'date' : date.getDate(), 'buisness' : is_business,'events' : eventArr[curr_date] , 'currentDate' : this.isDateEqual( curr_date ),'month' :month-1,'year': year};
				if(current_month == date.getMonth()){
					week[index].current_month = true;
				}
				date.setDate( date.getDate() + 1 );
			}
			result.push( week );
		}
		var startDate = result[0][0].val;
		this.setData('startDateOfView',startDate.format('DD-MM-YYYY'));
		startDate = startDate.getDObj();
		var _this = this;
		$L.fastdom.mutate( function(){
			_this.setDisplayDate($L("scheduler-start-date",_this.$node)[0],startOfMonth);
		});
		this.setData('DateArray', result);
	}

    generateEventObjArr() {
		var schedulerevent =  this.getData('ltPropManipulatedEvent');
		var eventObj = [];
		var _this = this;
		schedulerevent.forEach(function(item){
			var start_date = $L.moment(item.start,_this.getData('ltPropFormat'));
			var end_date =  $L.moment(item.end,_this.getData('ltPropFormat'));
			item.allDayEvent = true;
			if( start_date.format('DD-MM-YYYY') === end_date.format('DD-MM-YYYY') ){
				item.allDayEvent = false;
			}
			var start_format = start_date.format('DD-MM-YYYY');
			eventObj = _this.addEventObj(start_date,eventObj,item,start_format,_this.getData('ltPropSchedulerView'));
		});
		this.setData('eventArr' , eventObj);
		
	}

    addEventObj(date, eventObj, event, indexDate, view) {
		var start_format = date.format('DD-MM-YYYY');
		var start_date =  $L.moment(event.start,this.getData('ltPropFormat'));
		var cloneObject = window.$u.clone(event);
		var weekstart = this.getData('ltPropWeekStart') === undefined ? 0 : this.getData('ltPropWeekStart');
		if(start_format == start_date.format('DD-MM-YYYY')){
			cloneObject.StartOfEvent = true;
		}else{
			delete cloneObject.middleofevent;
			cloneObject.endOfevent  =true;
		}
		eventObj[indexDate] =  eventObj[indexDate] ? eventObj[indexDate] : [];
		eventObj[indexDate].push(cloneObject);
		var startDay = date.get('day');
		var end_date = $L.moment(event.end,this.getData('ltPropFormat'));

		if(view === 'week' || view === 'month' && !this.getData('ltPropMultiUserView')){
			var curr_date = ((6 - weekstart   ) + date.get('day') + 1) % 7;
			var EndOftheWeek  = $L.moment(date).add((6 - curr_date),'date',true);
			if( this.isinBetween(start_format,EndOftheWeek.format('DD-MM-YYYY'),end_date.format('DD-MM-YYYY'))){
				if( !cloneObject.StartOfEvent ){
					delete cloneObject.endOfevent;
					cloneObject.middleofevent = true;
				}
				eventObj = this.addEventObj(EndOftheWeek.add(1,'date',true),eventObj,event,EndOftheWeek.format('DD-MM-YYYY'),view);
			}
		}
		else{
			if(start_format !== end_date.format('DD-MM-YYYY') ){
				date.add(1,'date',true);
				indexDate = date.format('DD-MM-YYYY');
				eventObj = this.addEventObj(date,eventObj,event,indexDate,view);
			}
		}
		
		return eventObj;
	}

    MultiDayViewNav() {
		var scrollLeftNav = this.$node.querySelector('.lyteSchedulerLeftNav');
		var fixedCol = this.$node.querySelector('.lyteSchedulerFixedCol');
		if(scrollLeftNav){
			scrollLeftNav.style.left = fixedCol.offsetWidth + 'px';
			scrollLeftNav.classList.add('lyteSchedulerhideScrollNav');
			var scrollRightNav = this.$node.querySelector('.lyteSchedulerRightNav');
			var scrollDiv = this.$node.querySelector('.lyteSchedulerViewWrapper');
			var _this = this;
			scrollDiv.addEventListener('scroll',function(event){
				
				var MaxScrollWidth = this.scrollWidth - this.offsetWidth;
				if(this.scrollLeft == 0){
					scrollLeftNav.classList.add('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft !== 0){
					scrollLeftNav.classList.remove('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft == MaxScrollWidth){
					scrollRightNav.classList.add('lyteSchedulerhideScrollNav');
				}
				if(this.scrollLeft !== MaxScrollWidth){
					scrollRightNav.classList.remove('lyteSchedulerhideScrollNav');
				}
			});
		}
		var schedulerEventDiv = $L('scheduler-event-div');
	}

    addDragAndDrop() {
		if(!this.getData('ltPropDraggable')){
			return;
		}
		var _this = this;
		var  allDayEvent = false;
		var diff = 0,first = true;
		var total_length;
		var returnval = true;
		var isMultiView  = this.getData('ltPropMultiUserView');
		var view = this.getData('ltPropSchedulerView');
		var userdata_width = $L('.lyteSchedulerFixedCol').length && $L('.lyteSchedulerFixedCol')[0].offsetWidth;
		if(!isMultiView){
			var header_height = _this.$node.querySelector('.lyteSchedulerViewMainTable thead') ;
			header_height = header_height ? header_height.offsetHeight : _this.$node.querySelector('.lyteSchedulerDayViewAllDayRow').offsetHeight;
		}
		if((view == 'week' || view == 'day') && !isMultiView){
			var height = this.$node.querySelector("[data-time='12:00 AM']").getBoundingClientRect().height;
			var scrollDiv =  this.$node.querySelector(".lyteSchedulerViewWrapper");
			var width = $L('.lyteSchedulerDate')[0].offsetWidth;
			var MaxScrollHeight =  scrollDiv.scrollHeight - (scrollDiv.offsetHeight );
 			var first_tdWidth =  scrollDiv.querySelector('td').getBoundingClientRect().width;
 		}else if(view == 'day'){
 			var height = $L('.lyteSchedulerTimeLineEvent')[0].offsetHeight;
 			var scrollDiv =  this.$node.querySelector(".lyteSchedulerViewWrapper");
 			var width = $L('.lyteSchedulerTimeLineEvent')[0].offsetWidth / (60/this.getData('ltPropTimeLine'));
 			var MaxScrollWidth =  scrollDiv.scrollWidth - ( scrollDiv.offsetWidth );
 		}	
		var event_tag = this.$node.querySelectorAll('lyte-scheduler-event-tag');

		event_tag.length && $L(event_tag).draggable({
			
			onStart : function ( element, event) {
            	var id =  element.dataset.id;
            	var scheduler = $L(element).closest('lyte-scheduler')[0];
            	var disable_elem = scheduler.querySelectorAll('[data-id ="'+ id +'"]');
            	$L(disable_elem).not(element).addClass('hideSchedulerEvent');
            	window.startTop = event.clientY;
            	window.startLeft = event.clientX;
            	window.offsetTop = element.offsetTop ;
            	window.offsetLeft = element.offsetLeft;
            	element.style.zIndex = 10000;
				allDayEvent = element.classList.contains('all-day-event') ? true  : false;
				if(!isMultiView){
					if(!element.parent){
						element.parent = $L(element).closest('td')[0];
						element.style.left = '0px';
						window.offsetLeft = 0;
					}else{
						element.style.left = Math.abs( element.offsetParent.getBoundingClientRect().left - element.getBoundingClientRect().left )+"px";
						window.offsetLeft = element.offsetLeft;
					}
				}else{
					if(!element.parent){
						element.parent = $L(element).closest('tr')[0];
					}
				}
            	if(!isMultiView){
					element.style.height = height +'px';
            		element.style.width = width +'px';
            		
            	}            		
			},
			onDrag : function( element ,dragElem,event ){
				var x = event.clientX,
            		y = event.clientY,
            		elem_offset = element.getBoundingClientRect();
            			
            	if((view == 'week' ||  view == 'day') && !element.classList.contains('lyteSchedulerAllDayEventTag') && !isMultiView){
            		
            		if( (elem_offset.left + elem_offset.width) <= x  &&(elem_offset.left + elem_offset.width + width) <= (scrollDiv.getBoundingClientRect().left + scrollDiv.getBoundingClientRect().width)){
            			window.offsetLeft = offsetLeft + width ;
            			if(!allDayEvent){
            				element.parent = element.parent.nextElementSibling ? element.parent.nextElementSibling : element.parent;
            			}
            		}
            		if( x < (elem_offset.left) && (elem_offset.left - width) > (scrollDiv.getBoundingClientRect().left + first_tdWidth  ) ){
            			window.offsetLeft = offsetLeft - width ;
            			if(!allDayEvent){
            				element.parent = element.parent.previousElementSibling ? element.parent.previousElementSibling : element.parent;
            			}
            		}

           			if(!allDayEvent){

	            		if( (y - window.startTop) > height && (element.getBoundingClientRect().bottom + height) < ( scrollDiv.getBoundingClientRect().top + scrollDiv.getBoundingClientRect().height )){
	            			window.offsetTop = offsetTop + height+ 1;
	            			window.startTop = y;
	            		}

	            		if( (window.startTop - y) > height && (element.getBoundingClientRect().top - height ) >= ( scrollDiv.getBoundingClientRect().top + header_height )){
	            			window.offsetTop = offsetTop - height-1;
	            			window.startTop = y;
	            		}
	            	}

        			var scrollTop = scrollDiv.scrollTop;
        			if((scrollDiv.getBoundingClientRect().bottom ) <= (element.getBoundingClientRect().bottom + height) &&  (scrollTop < MaxScrollHeight)){
        				scrollDiv.scrollTop += height+1;
        				if((element.getBoundingClientRect().top + element.offsetHeight ) < ( scrollDiv.getBoundingClientRect().top + scrollDiv.getBoundingClientRect().height )){
        					window.offsetTop = offsetTop + height+1;
        				}
        			}
        			if((scrollDiv.getBoundingClientRect().top + header_height ) >= (element.getBoundingClientRect().top - height) &&  (scrollTop > 0)){
        				scrollDiv.scrollTop -= height -1;
        				if((element.getBoundingClientRect().top - height  ) > (scrollDiv.getBoundingClientRect().top + header_height) ){
        				
        					window.offsetTop = offsetTop - height -1;
        				}
        			}
        			element.style.left = window.offsetLeft + 'px';
        			element.style.top = window.offsetTop  + 'px';
        			return false;




				}else if(view === 'day' && !element.classList.contains('lyteSchedulerAllDayEventTag')){
					var scrollLeft = scrollDiv.scrollLeft;
					if( (element.parent.getBoundingClientRect().top + element.parent.getBoundingClientRect().height) <= y  && ( element.getBoundingClientRect().top + element.getBoundingClientRect().height + height) < (scrollDiv.getBoundingClientRect().top + scrollDiv.getBoundingClientRect().height)){
            			window.offsetTop = offsetTop + height ;
            			if(element.parent.nextElementSibling){
            				element.parent = element.parent.nextElementSibling ? element.parent.nextElementSibling : element.parent;
            			}
            		}
            		if( y < (elem_offset.top) && (elem_offset.top - height) > (scrollDiv.getBoundingClientRect().top + element.offsetHeight  ) ){
            			window.offsetTop = offsetTop - height;
            			if(element.parent.previousElementSibling){
            				element.parent = element.parent.previousElementSibling ? element.parent.previousElementSibling : element.parent;
            			}
            		}
					if( (x - window.startLeft) > width && (element.getBoundingClientRect().left + element.offsetWidth  ) < (element.parent.getBoundingClientRect().left + element.parent.getBoundingClientRect().width ) ){
						
	            		window.offsetLeft = offsetLeft + width;
	            		window.startLeft = x;
	            	}
	            	if( (window.startLeft - x) > width   && ( element.getBoundingClientRect().left  - width) > (element.parent.getBoundingClientRect().left + userdata_width) ){

	            		
	            		window.offsetLeft = offsetLeft - width;
	            		window.startLeft = x;
	            	}
	            	
        			if(scrollDiv.getBoundingClientRect().right <= (element.getBoundingClientRect().right) &&  (scrollLeft < MaxScrollWidth)){
        				scrollDiv.scrollLeft += width;
        				if((window.offsetLeft + element.offsetWidth ) < (element.offsetParent.offsetLeft + element.offsetParent.offsetWidth) ){
        					window.offsetLeft = offsetLeft + width;
        				}
        			}
        			if((scrollDiv.getBoundingClientRect().left + userdata_width) >= (element.getBoundingClientRect().left) &&  (scrollLeft > 0)){
        				scrollDiv.scrollLeft -= width;
        				
        				if((element.getBoundingClientRect().left  - width) > (element.parent.getBoundingClientRect().left + userdata_width) ){
        					
        					window.offsetLeft = offsetLeft - width;
        				}
        			}

        			element.style.top = window.offsetTop + 'px';
	            	element.style.left = window.offsetLeft + 'px';
					return false;
        		}
			},
			onStop : function(){
				
				return returnval;
			}
		});
	 	var allDayEvent = this.$node.querySelectorAll('.lyteSchedulerAllDayEvent');

		allDayEvent.length && $L(allDayEvent).droppable({
			onLeave : function () {
				var hoverDiv = _this.$node.querySelectorAll('.hoverDate');
				$L(hoverDiv).removeClass('hoverDate');
			},

			onDrag : function( draggableElem, droppableElem ){
				
				var startDate =  draggableElem.parentElement.dataset.date;
				var id =  draggableElem.dataset.id;
				var view = _this.getData('ltPropSchedulerView');
				if(view == 'week' ){
					var curr_row = droppableElem.parentElement;
					var date_div = curr_row.querySelectorAll('.lyteSchedulerAllDayEvent');
				}else{
					var date_div = _this.$node.querySelectorAll('.lyteSchedulerAllDayEvent');
				}	
				var events = _this.data.ltPropManipulatedEvent;
				var event =  window.$u.findWhere(events,{'id': id});
				var org_start = (event.start.split(' '))[0];
				var dropArea_offset = droppableElem.getBoundingClientRect();
				var dragElem_offset = draggableElem.getBoundingClientRect();
				
				if(event ){
					
					var drop_pos = _this.getEventInterval(date_div[0].children[0].dataset.date,droppableElem.children[0].dataset.date);
					if((org_start !== startDate) && first){
						diff =  _this.getEventInterval((event.start.split(' '))[0] , startDate);
						first = false;
					}
					total_length = _this.getEventInterval(event.start,event.end);	
					for(var index = diff ; index >= 0; index--){
						if(date_div[ drop_pos - index ]){
							date_div[ drop_pos - index ].classList.add('hoverDate');
						}
					}

					for(var index = 0; index < ( ( total_length + 1 ) - diff)  ; index++){
						if(date_div[ drop_pos + index ]){
							date_div[ drop_pos + index ].classList.add('hoverDate');
						}
					}
				}
			},
			onDrop : function( draggedElem, droppableElem ){
				
				var date_div = _this.$node.querySelectorAll('.lyteSchedulerDropPlaceholder');
				$L(date_div).removeClass('lyteSchedulerDropPlaceholder');
				var user = droppableElem.parentElement.dataset.userid;
				var format = (_this.getData('ltPropFormat').split(' '))[0];
				var start_date = $L.moment(droppableElem.children[0].dataset.date,format).subtract((( diff - 1 ) >= 0 ? diff : 0),'date',true);

				var end_date = $L.moment(start_date.format('DD-MM-YYYY'),format).modify(( total_length ),'date',true);
				var events  = _this.getData('ltPropManipulatedEvent');
				var event_data = window.$u.findWhere(events,{id: draggedElem.dataset.id});
				if(_this.getMethods('onDropEvent')){
					window.returnVal = _this.executeMethod('onDropEvent',event_data,start_date,end_date,user);
				}
				return window.returnVal;

			},
			tolerance :"touch"
		});
		
		var timeLineEvent = this.$node.querySelectorAll('.lyteSchedulerTimeLineEvent');
		if( timeLineEvent.length ){

 			$L(timeLineEvent).droppable({

				onDrop : function(draggedElem,droppableElem){
					
					if(draggedElem.classList.contains('all-day-event')){
						return;	
					}
					var start_time ;
					var end_time;
					if(!isMultiView){
						
						var timeLine = _this.getData('ltPropTimeLine');
						var start_date = draggedElem.parent.children[0].dataset.date;	
						start_time = droppableElem.dataset.time;
						if(start_time){
							start_time = $L.moment(start_date + ' ' + start_time,_this.getData('ltPropFormat'));
							var interval = parseInt(draggedElem.offsetHeight / droppableElem.offsetHeight);
							if(( interval ) ){
								var date = $L.moment(start_time.format(_this.getData('ltPropFormat')),_this.getData('ltPropFormat')).add( ( parseInt(interval ) ) * timeLine,'minutes',true);
								end_time = date;
							}
						}
						
						var events  = _this.getData('ltPropManipulatedEvent');
						var event_data = window.$u.findWhere(events,{id: draggedElem.dataset.id});
						
						
					}else{
						var user = draggedElem.parent.dataset.userid;
						var start_date = _this.getData('startDateOfView');
						start_time = droppableElem.children[0].dataset.time;
						var time_division = 60 / _this.getData('ltPropTimeLine');
						if(start_time){

							var interval = Math.round( draggedElem.offsetWidth / ( droppableElem.offsetWidth / time_division ) );
							var date = start_date + ' ' + start_time;
							date = $L.moment(date,_this.getData('ltPropFormat'));
							start_time = $L.moment(start_date + ' ' + start_time,_this.getData('ltPropFormat'));
							
							var start_time_min = parseInt((draggedElem.getBoundingClientRect().left - droppableElem.getBoundingClientRect().left) / (droppableElem.offsetWidth / time_division));
							start_time_min *=  _this.getData('ltPropTimeLine');
							if(start_time_min){
								date.add(start_time_min,'minutes',true);
								start_time = $L.moment(date.format(_this.getData('ltPropFormat')),_this.getData('ltPropFormat'));
							}
							if(interval){

								end_time = date.add( ( parseInt(interval)  ) * _this.getData('ltPropTimeLine') ,'minutes',true);
							}
							var events  = _this.getData('ltPropManipulatedEvent');
							var event_data = window.$u.findWhere(events,{id: draggedElem.dataset.id});
						}


					}
					if(_this.getMethods('onDropEvent')){

						_this.executeMethod('onDropEvent',event_data,start_time,end_time,user);
					}
					return false;
				},
				tolerance :"touch",
				restrict : ".lyteSchedulerEventTimelinetag"
			});
 		}
	}

    isinBetween(start, curr_date, end) {
		var format = this.getData('ltPropFormat');
		format = (format.split(' '))[0];
		return $L.moment(start, format).fromNow($L.moment( curr_date, format )).past  === false && $L.moment(end,format).fromNow($L.moment( curr_date, format )).past  === true;
	}

    getEventInterval(start, end) {
		var start_date = $L.moment(start.split(' ')[0], this.getData('ltPropFormat').split(' ')[0])._dateObj;
		var end_date = $L.moment(end.split(' ')[0] ,this.getData('ltPropFormat').split(' ')[0])._dateObj;
		var difference = end_date.getTime() - start_date.getTime();
    	var TotalDays = Math.ceil(difference / (1000 * 3600 * 24));
		return TotalDays;
	}

    hide(position_elem, event_div) {
		if((position_elem.offsetHeight + event_div.getBoundingClientRect().height) >= position_elem.parentElement.offsetHeight){
			event_div.classList.add('schedulerhide');
			event_div.style.top = 0;
			event_div.style.left = 0; 
			var bottom_event = position_elem.querySelector('.lyteSchedulerEventMoreBtn');

			return true;
		}
	}

    isnavigated() {
		return 
	}

    isDateEqual(date) {
		var curr_date = this.getData( 'ltPropCurrentDate' );
		date = $L.moment( date , 'DD-MM-YYYY' ).getDObj();
		return curr_date.getDate() === date.getDate() && curr_date.getMonth() === date.getMonth() && curr_date.getFullYear() === date.getFullYear();
	}

    hideUsers(hideuserarray) {
		var userList =  this.getData('ltPropSchedulerUser');
		var table_tr = this.$node('.UserCol');
		hideuserarray.forEach(function(index){
			table_tr[index].classList.add('LyteSchdeulerHideUser');
		});
	}

    static actions() {
        return {
            onSchedulerEventHover : function(event,eventTag){
                var eventObj = eventTag.getData('ltPropEvent');
                if(this.getMethods('onEventHover')){
                    this.executeMethod('onEventHover',event,eventObj,eventTag);
                }
            },
            onSchedulerEventClick : function(event,eventTag){
                var eventObj = eventTag.getData('ltPropEvent');
                if(this.getMethods('onEventClick')){
                    this.executeMethod('onEventClick',event,eventObj,eventTag);
                }
            },
            clearSelection : function(){
                this.setData('selectedUserArr',[]);
                var search_popover = $L('#usersreachPopover',this.$node);
                var userlist = $L('.lyteSchedulerUserSearch', search_popover.actualModalDiv);
                for(window.index = 0; window.index < userlist.length; window.index++){
                    var checkbox = $L('lyte-checkbox',userlist[window.index])[0];
                    checkbox.setData('ltPropChecked',false);
                }
                
                var  schedulerUser = $L('[data-userid]');
                schedulerUser.removeClass('lyteSchedulerUserHide');
                schedulerUser.removeClass('lyteSchedulerUserSelected'); 
            },
            cancelUserSelect : function(){
                var popover = $L('#usersreachPopover',this.$node)[0];
                popover.ltProp('show',false);
                this.setData('checkboxArr',[]);
            },
            SelectUserSelect : function(){
                
                var popover = $L('#usersreachPopover',this.$node);
                popover[0].ltProp('show',false);
                var user_tr = $L('[data-userid]');
                var selectedUser = $L('[data-userid]:not(.lyteSchedulerUserSelected)');
                selectedUser.addClass('lyteSchedulerUserHide');	
                this.setData('selectedUserArr',this.getData('checkboxArr'));
            },
            hideandShowCalender : function( event , start ){
                var originElem;
                if(start == 'lyteSchedulerCalenderStart'){
                    originElem = event.target.closest('scheduler-start-date').getAttribute('id');
                }else{
                    originElem = event.target.closest('scheduler-end-date').getAttribute('id');
                }
        
                $L('#'+originElem).addClass('lyteSchNavigatorCalOpened');
                var popover = $L('#calendarPopover')[0];
                popover.setData('ltPropOriginElem','#'+originElem);
                $L('#calendarPopover')[0].setData('ltPropShow',true);
            },
            scrollnav : function(event){
                var scroll_width = this.$node.querySelector('.lyteSchedulerTimeLineEvent').offsetWidth;
                var scrollDiv = this.$node.querySelector('.scrollContainer');
                if(event.target.classList.contains('lyteSchedulerLeftNav')){
                    scrollDiv.scrollLeft -= scroll_width; 
                }else{
                    scrollDiv.scrollLeft += scroll_width;
                }
            },
            HiddenEvent : function(event,date){
                var hiddenObj  = this.data.hiddenObj;
                date = typeof date == 'string' ? $L.moment(date,'DD-MM-YYYY') : date; 
                this.setData('hiddenEvent',hiddenObj[date.format('DD-MM-YYYY')]);
                $L('#schedulerPopover',this.$node)[0] && $L('#schedulerPopover',this.$node)[0].setAttribute('id',0);
                event.target.setAttribute('id','schedulerPopover');
                var popover = this.$node.querySelector('#lyteSchedulerHiddenEvent');
                popover.setData('ltPropShow',true);
                var poptitle = $L('.lyteSchedulerMoreEventsPopTitleMonthVal',popover.component.actualModalDiv);
                date =  date.getDObj();
                var popDay = $L('.lyteSchedulerMoreEventsPopTitleDayVal',popover.component.actualModalDiv);
                this.setDisplayDate(poptitle[0],date,true);
                popDay[0].innerHTML = '';
                popDay[0].appendChild(document.createTextNode(this.data.days[date.getDay()]));
                if(this.getMethods('openHiddenEvent')){
                    this.executeMethod('openHiddenEvent',event.target);
                }
            },
            today : function(event){
                this.$node.today();
            }
        };
    }

    static methods() {
        return {
            onUserSearchClose : function(event){
                var search = $L('.lyteSchedulerFirstColHeader',this.$node)[0];
                if(event.target === search || search.contains(event.target)){
                    return false;
                }else{
                    return true;
                }

            },
            boxUnchecked : function(input, component, event, useraction){
                var arr = this.getData('checkboxArr');
                var val = component.getData('ltPropVal');
                var index =  arr.indexOf(val);
                var schedulerUser = $L('[data-userid]',this.$node);
                schedulerUser[val].classList.add('lyteSchedulerUserSelected')
                if(index > -1){
                    arr.splice( index, 1 );
                }
                this.setData('checkboxArr', arr);
            },
            boxChecked : function(input, component, event, useraction){
                var arr = this.getData('checkboxArr');
                var val = component.getData('ltPropVal');
                var schedulerUser = $L('[data-userid]',this.$node);
                schedulerUser[val].classList.add('lyteSchedulerUserSelected')
                arr.push(val);
                this.setData('checkboxArr', arr);
            },
            openUserSearch : function( event , element ){
                var popover = $L('#usersreachPopover',this.$node);
                if(!popover[0].getData('ltPropShow')){
                    popover[0].ltProp('show',true);
                }
            },
            weekSelected : function(event,week){

                if(this.getData('ltPropSchedulerView') == 'week'){
                    $L('.schedulerToday')[0].ltProp('disabled',false);
                    var popover = $L('#calendarPopover')[0];
                    this._navigated =  true;
                    this.callCurrentView($L.moment(week,'DD-MM-YYYY').getDObj(),false,this.getData('ltPropWeekStart'));
                    this.setData('selectionType','');
                    this.setData('selectionType','week');
                    popover.setData('ltPropShow',false);
                }
            },
            monthSelected : function(event,month,cal){
                if(this.getData('ltPropSchedulerView') == 'month'){
                    $L('.schedulerToday')[0].ltProp('disabled',false);
                    var popover = $L('#calendarPopover')[0];
                    this._navigated =  true;
					this.callCurrentView($L.moment('01-'+month+'-'+cal.getData('ltPropCurrentYear'),'DD-MM-YYYY').getDObj(),false,this.getData('ltPropWeekStart'));
                    this.setData('selectionType','');
                    this.setData('selectionType','month');
                    popover.setData('ltPropShow',false);
                }
            },
            dateselect : function(event,date,component){
                $L('.schedulerToday')[0].ltProp('disabled',false);
                var originElm = $L('.lyteSchNavigatorCalOpened',this.$node);
                var date_obj =  $L.moment(date,'DD-MM-YYYY').getDObj();
                var popover = $L('#calendarPopover')[0];
                popover.setData('ltPropShow',false);
                this._navigated =  true;
                var start_day;
                
                if(this.getData('ltPropSchedulerView') == 'week'){
                    if(originElm.hasClass('lyteSchedulerStartDate')){
                        start_day = date_obj.getDay();
                    }else{
                        start_day = date_obj.getDay() + 1;
                    }
                    var dayLabel = this.getData('ltPropDayLabel');
                    var split = dayLabel.slice(start_day);
                    dayLabel = split.concat( dayLabel.slice(0,start_day));
                    this.setData('label',dayLabel);
                    this.callCurrentView($L.moment(date,'DD-MM-YYYY').getDObj(),false,start_day);
                }else{
                    this.ResetTimeLine();
                    this.callCurrentView($L.moment(date,'DD-MM-YYYY').getDObj());
                }
                
                
            },
            menuonclick : function( value , event , element , menuOriginElem , clickedItemAndSubmenu_detail){
                var date = menuOriginElem.querySelector('.scheduler-event-div').dataset.date;
                if(this.getMethods('onMenuClick')){
                    this.executeMethod('onMenuClick',date,value , event , element , menuOriginElem , clickedItemAndSubmenu_detail);
                }
            },
            menuonbeforeopen : function( menu , event , originElem ){
                var date = originElem.querySelector('.scheduler-event-div').dataset.date;
                if(this.getMethods('onBeforeMenuOpen')){
                    this.executeMethod('onBeforeMenuOpen',date);
                }
            },
            menuonopen : function( menu , event , originElem ){
                var date = originElem.querySelector('.scheduler-event-div').dataset.date;
                if(this.getMethods('onMenuOpen')){
                    this.executeMethod('onMenuOpen',date);
                }
            },
            menuonbeforeclose : function ( menu , event  ) {
                if(this.getMethods('onBeforeMenuClose')){
                    this.executeMethod('onBeforeMenuClose');
                }
            },
            menuonclose: function( menu , event  ){
                if(this.getMethods('onMenuClose')){
                    this.executeMethod('onMenuClose');
                }
            },		
            ChangeSchedulerView: function(value){
				this.setData('DateArray',[]);
                this.setData('ltPropSchedulerView',value);
                if(this.getMethods('onViewChange')){
                    this.executeMethod('onViewChange',$L.moment(this.getData('startDateOfView'),'DD-MM-YYYY'),value);
                }
            },
            closeschedulerpopover : function(){
                var targetElem = this.$node.querySelector('#schedulerPopover');
                targetElem.setAttribute('id','');
            },
            closeCalender : function(event,popover){
                $L(popover.getData('ltPropOriginElem'),this.$node).removeClass('lyteSchNavigatorCalOpened');
            }		
        };
    }

    static observers() {
        return {
            userSortable : function(){
                var view = this.getData('ltPropSchedulerView');
				var sortableCol = $L('.lyteSchedulerViewMainTable tbody',this.$node);
                if( (view == 'week'|| view == 'day') && this.getData('ltPropMultiUserView') ){
                    if(this.getData('ltPropSortUser')){
                        sortableCol.sortable({
                            onDragStart:function(){
                            },helper: function(elem){
                                var table_td = elem.querySelector('.UserCol lyte-scheduler-user');

                                var clone_tr = document.createElement('lyte-tr');
                                var clone_td  = document.createElement('lyte-td');
                                clone_td.appendChild(table_td.cloneNode(true));
                                clone_tr.appendChild(clone_td);
                                clone_tr.appendChild(document.createElement('lyte-td'));
                                return clone_tr;
                            },onBeforeDrop: function( dragElem , bellowElem , placeholder, from, to, soruce ){
                                var table_tr = soruce.querySelectorAll('tr');
                                dragElem.remove();
                                bellowElem.parentNode.insertBefore(table_tr[from],bellowElem.nextSibling);
                            },onDrop : function(dragElem){
                                dragElem.remove();
                            },placeholder : "lyteSchdeulerPlaceholder",
                            threshold: '10'
                        });
                    }else {
                        if(sortableCol[0]){
							sortableCol.sortable("destroy");
						}		
                    }
                }
            }.observes('ltPropSortUser').on('didConnect'),

            ChangeWeekOrder : function(){
                
                var start_day = this.getData('ltPropWeekStart');
                if(start_day){
                    var dayLabel = this.getData('ltPropDayLabel');
                    var split = dayLabel.slice(start_day);
                    dayLabel = split.concat( dayLabel.slice(0,start_day));
                    this.setData('label',dayLabel);
                    var dayfullform = this.getData('days');
                    split = dayfullform.slice(start_day);
                    dayfullform = split.concat( dayfullform.slice(0,start_day));
                    this.setData('labelFF',dayfullform);
                }
                
            }.observes('ltPropWeekStart').on('init'),

            changeEvent : function(){
                var eventManipulator = new window._lyteUiUtils.eventManipulator( this.getData('ltPropFormat') );
                eventManipulator.addEvents( this.data.ltPropEvent );
                this.setData('ltPropManipulatedEvent',eventManipulator.events);
                this.generateEventObjArr();
            }.observes('ltPropEvent.[]').on('init'),

            schedulerView : function(){
                this.callCurrentView(null , !this.$node.rendered ,this.getData('ltPropWeekStart'));
                this.$node.rendered = true;
            }.observes('ltPropSchedulerView','ltPropCurrentDate').on('init'),

            callDragDrop : function(){
                this.addDragAndDrop();
            }.observes('ltPropDraggable').on('didConnect'),

            addSchedulerEvent: function(){
                this.generateEventObjArr();
                this.callCurrentView(undefined,undefined,this.getData('ltPropWeekStart'));
                this.addDragAndDrop();
            }.observes('ltPropManipulatedEvent')
        };
    }
}

LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerBusinessHour",function( businessHour, curr_time ){
	var timeStart = new Date("01/01/2007 " + businessHour[0]);
	var timeEnd = new Date("01/01/2007 " + businessHour[1]);
	curr_time = new Date("01/01/2007 " + curr_time.dataset.time);
	var curr = ((curr_time.getHours() * 60) + curr_time.getMinutes());
	if( ( ( curr - ((timeStart.getHours() * 60) + timeStart.getMinutes())) >= 0 )&& ( (((timeEnd.getHours() * 60) + timeEnd.getMinutes()) - curr) >= 0 ) ){
		return 'lyteSchedulerBusinessHour';
	}
} );
LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerTimeFormat",function( time, min ){
	var hour  = parseInt(time);
	var format = time.split(hour)[1];
	format = format.toUpperCase();
	min = min ? min : '00';
	hour = ('0' + hour).slice(-2);
	time = hour + ':' + min + ' ' + format;
	return time;
});

LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerChecktime",function( time, event ){
	
	var format = this.$node.getData('ltPropFormat');
	var startDate = $L.moment(event.start, format);
	var start_hour  = startDate.get('hours');
	var time_format = start_hour > 12 ? 'pm' : 'am';
	start_hour = time_format === 'am' ? start_hour+'am' : (start_hour-12)+'pm';
	if(start_hour == time){
		return true;
	}
	return false;
});

LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerGetDate",function( date, event ){
	return date.format('DD-MM-YYYY');
});
LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerMonthshortForm",function( monthindex ){
	var month = ['Jan','Feb','Mar','Apr','May','June','July','Aug','Spet','Oct','Nov','Dec'];
	return month[monthindex];
});

if (!window._lyteUiUtils.registeredCustomElements['scheduler-start-date']) {
    window._lyteUiUtils.registeredCustomElements['scheduler-start-date'] = true;

    class SchedulerStartDateCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        constructor() {
            super();
        }

        connectedCallback() {
			
			this.$node.setAttribute('id','SchedulerStartDate_'+_lyteSchedulerStartId++);
		}
    }

    SchedulerStartDateCustomElements.register("scheduler-start-date");
}
if (!window._lyteUiUtils.registeredCustomElements['scheduler-end-date']) {
    window._lyteUiUtils.registeredCustomElements['scheduler-end-date'] = true;

    class SchedulerEndDateCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        constructor() {
            super();
        }

        connectedCallback() {
			
			this.$node.setAttribute('id','SchedulerEndDate_'+_lyteSchedulerEndId++);
		}
    }

    SchedulerEndDateCustomElements.register("scheduler-end-date");
}
export { LyteSchedulerComponent };
