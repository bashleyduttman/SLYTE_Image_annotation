import { prop } from "@slyte/core";
import { Component } from "../component.js";

/**
 * Renders a keyboard-navigator
 * @component lyte-keyboard-navigator
 * @version 3.0.0
 * @utility click, focus, blur
 * @dependencies lyte-shortcut
 * /plugins/lyte-keyboardNavigator.js
 */
class LyteKeyboardNavigatorComponent extends Component {
 constructor() {
  super();
 }

 data() {
     return {
         /**
          * @componentProperty {string} ltPropParent
          * @version 3.0.0
          * @default undefined
          */
         "ltPropParent": prop("string", { "default": undefined }),
         /**
          * @componentProperty {string} ltPropHighlighted
          * @version 3.0.0
          * @default undefined
          */
         "ltPropHighlighted": prop("string", { "default": undefined }),
         /**
          * @componentProperty {string} ltPropSelected
          * @version 3.0.0
          * @default undefined
          */
         "ltPropSelected": prop("string", { "default": undefined }),
         /**
          * @componentProperty {string} ltPropChildren
          * @version 3.0.0
          * @default undefined
          */
         "ltPropChildren": prop("string", { "default": undefined }),
         /**
          * @componentProperty {string} ltPropSkipElements
          * @version 3.0.0
          * @default undefined
          */
         "ltPropSkipElements": prop("string", { "default": undefined }),
         /**
          * @componentProperty {boolean} ltPropIfCycle
          * @version 3.0.0
          * @default false
          */
         "ltPropIfCycle": prop("boolean", { "default": false }),
         /**
          * @componentProperty {array} ltPropOptions
          * @version 3.0.0
          * @default []
          */
         "ltPropOptions": prop("array", {"default": undefined}),
         /**
          * @componentProperty {string} ltPropOrientation
          * @version 3.0.0
          * @default vertical
          */
         "ltPropOrientation": prop("string", { "default": "vertical" }),
         /**
          * @componentProperty {string} ltPropScope
          * @version 3.0.0
          * @default undefined
          */
         "ltPropScope": prop("string", { "default": undefined }),
         /**
          * @componentProperty {boolean} ltPropTriggerClick
          * @version 3.0.0
          * @default false
          */

         "ltPropChangeScope": prop("boolean", { "default": false }),
         /**
          * @componentProperty {boolean} ltPropTriggerClick
          * @version 3.0.0
          * @default false
          */

         "ltPropTriggerClick": prop("boolean", { "default": false }),
         /**
          * @componentProperty {string} customDropdownSel
          * @version 3.0.0
          * @default ""
          */
         "customDropdownSel": prop("string", { "default": "" }),
         /**
          * @componentProperty {string} customDropdownClass
          * @version 3.0.0
          * @default ""
          */
         "customDropdownClass": prop("string", { "default": "" }),
         /**
          * @componentProperty {string} dropdown
          * @version 3.0.0
          * @default ""
          */
         "dropdown":  prop("string", { "default": "" }),
         /**
          * @componentProperty {string} ltPropAriaExpand
          * @version 3.0.0
          * @default ""
          */
         "ltPropAriaExpand":  prop("string", { "default": undefined })
     };		
 }

 didConnect() {
     var parent = this.getData('ltPropParent')
     if(document.activeElement != parent){
         $L(parent).focus();
     }
         $L(parent).keyboardNavigator({
             comp: this,
             focusableElement: this.getData('ltPropParent'),
             highlightValue: this.getData('ltPropHighlighted'),
             child: this.getData('ltPropChildren'),
             selectedClass: this.getData('ltPropSelected'),
             skipElements: this.getData('ltPropSkipElements'),
             ifCycle: this.getData('ltPropIfCycle'),
             options: this.getData('ltPropOptions'),
             orientation: this.getData('ltPropOrientation') ,
             scope: this.getData('ltPropScope'),
             triggerClick: this.getData('ltPropTriggerClick'),
             customDropdownSel: this.getData('customDropdownSel'),
             customDropdownClass: this.getData('customDropdownClass'),
             dropdown : this.getData('dropdown'),
             onBeforeHighlight: this.getMethods('onBeforeHighlight'),
             onAfterHighlight: this.getMethods('onAfterHighlight'),
             changeScope: this.getData('ltPropChangeScope'),
             ariaExpand: this.getData('ltPropAriaExpand')
             }
         );
 }

 didDestroy() {
     var parent = this.getData('ltPropParent');
     $L(parent).keyboardNavigator('destroy');
  }

 static actions() {
  return {
  };
 }

 static methods() {
  return {
  };
 }
}

export { LyteKeyboardNavigatorComponent };
