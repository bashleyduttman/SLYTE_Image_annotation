import { prop } from "@slyte/core";
import { Component, LyteUiComponentComponentRegistry } from "../component.js";

class LyteDatemultiselectComponent extends Component {
	constructor() {
		super();
	}

	data() {
		return {
			'ltPropSelectedDates': prop('array', { 'default': [] }),

			'ltPropBoundary': prop('object', { 'default': {} }),

			'ltPropCalendar': prop('object', { 'default': {} }),

			'ltPropIsOpen': prop('boolean', { 'default': false }),

			'show': prop('boolean', { 'default': false })
		};
	}

	getCalendar() {
		var child = this.childComp,
			calendar = child.querySelector('lyte-calendar');

		return calendar;
	}

	didDestroy() {
		if (this.$node === window._lyteDMS.activeDMS) {
			window._lyteDMS.activeDMS = null;
		}

		if (this.$node === window._lyteDMS.closedDMS) {
			window._lyteDMS.closedDMS = null;
		}
	}

	didConnect() {
		var that = this;

		this.$node.close = function (event) {
			that.close(event);
		}
		window._lyteDMS.activeDMS = null;

		this.$node.open = function (event) {
			that.open(event);
		}
	}

	close(event) {
		var ret = this.fireBeforeCallback('onBeforeHide', event);

		if (ret) {
			return;
		}

		this.childComp.classList.add('lyteDMSHide');

		this.setData('ltPropIsOpen', false);

		if (this.getMethods('onHide')) {
			this.executeMethod('onHide', event);
		}

		window._lyteDMS.activeDMS = null;
	}

	openWormhole() {
		this.setData('show', true);
	}

	fireBeforeCallback() {
		var callbackName = arguments[0], ret;

		if (this.getMethods(callbackName)) {
			ret = this.executeMethod.apply(this, arguments) === false;
		}

		return ret;
	}

    showCalendar() {
		this.childComp.classList.remove('lyteDMSHide');
		window._lyteDMS.activeDMS = this.$node;
		this.getCalendar().revertToToday();
	}

	position() {
		$L(this.childComp).placement({
			append: false,
			originElement: this.$node
		});
	}

	remove(item, event) {
		var dataValue = item.getAttribute('data-value'),
			selectedDates = this.getData('ltPropSelectedDates') || [],
			indexToRemove = selectedDates.indexOf(dataValue),
			ret = this.fireBeforeCallback('onBeforeRemove', event, dataValue);

		if (ret || indexToRemove === -1) {
			return;
		}

		this.$addon.arrayUtils(selectedDates, 'removeAt', indexToRemove);

		this.position();

		if (this.getMethods('onRemove', event)) {
			this.executeMethod('onRemove', event, dataValue);
		}
	}

	exceedsBoundary() {
		var boundary = this.getBoundary(),
			button = this.$node,
			buttonBoundingClients = button.getBoundingClientRect();

		if (buttonBoundingClients.left < boundary.left
			|| buttonBoundingClients.right > boundary.right
			|| buttonBoundingClients.top < boundary.top
			|| buttonBoundingClients.bottom > boundary.bottom) {
			return true;
		}
	}

    getBoundary() {
		var bounds = this.getData('ltPropBoundary');
		return {
			left: bounds.left || 0,
			right: bounds.right || window.innerWidth,
			top: bounds.top || 0,
			bottom: bounds.bottom || window.innerHeight
		};
	}

	open(event) {
		var ret = this.fireBeforeCallback('onBeforeOpen', event);

		if (ret) {
			return;
		}

		this.openWormhole();

		this.showCalendar();
		this.setData('ltPropIsOpen', true);

		if (this.getMethods('onShow')) {
			this.executeMethod('show', event);
		}
	}

	static actions() {
		return {
			openCalendar: function (event) {
				this.open(event);
			}
		};
	}

	static methods() {
		return {
			beforeRemove: function (event, date) {
				var ret = this.fireBeforeCallback('onBeforeRemove', event, date);

				if (ret) {
					return false;
				}
			},

			beforeAdd: function (event, date) {
				var ret = this.fireBeforeCallback('onBeforeAdd', event, date);

				if (ret) {
					return false;
				}
			},
			setFlags: function (wormhole) {
				this.childComp = wormhole;
			},

			handleAddition: function (event, date) {
				this.position();

				if (this.getMethods('onAdd')) {
					this.executeMethod('onAdd', event, date);
				}
			},

			handleRemoval: function (event, date) {
				this.position();

				if (this.getMethods('onRemove')) {
					this.executeMethod('onRemove', event, date);
				}
			},

			reposition: function () {
				this.position();
			}
		};
	}
}

window._lyteDMS = {
	closeDMS: function () {
		if (!_lyteDMS.activeDMS) {
			return;
		}

		_lyteDMS.activeDMS.close();
	},

	isFocusedOpen: function () {
		var focusedDMS = _lyteDMS.getFocusedDMS();

		if (focusedDMS) {
			return focusedDMS.ltProp('isOpen');
		}
	},

	getFocusedDMS: function () {
		var activeElement = document.activeElement;

		if (activeElement.classList.contains('lyteDMSButton')) {
			activeElement = $L(activeElement).closest('lyte-datemultiselect').get(0);

			return activeElement;
		}
	},

	openFocused: function (event) {
		var focusedDMS = _lyteDMS.getFocusedDMS();

		if (focusedDMS) {
			focusedDMS.open(event);
		}
	}
};

if (!window._lyteUiUtils.registeredCustomElements['lyte-dms-remove']) {
	window._lyteUiUtils.registeredCustomElements['lyte-dms-remove'] = true;

	/**
	   * @customElement lyte-dms-remove
	   */

	class LyteDmsRemoveCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
		static options = { clone: { allCallbacks: false } };

		constructor() {
			super();
		}

		static get observedAttributes() {
			return [];
		}

		connectedCallback() {
			this.addEventListener('click', function (event) {
				var dms = $L(this).closest('lyte-datemultiselect').get(0);

				dms.component.remove(this.closest('lyte-dms-item'), event);
			});
		}
	}

	LyteDmsRemoveCustomElements.register("lyte-dms-remove");
}


document.addEventListener('click', function (event) {
	var target = event.target,
		parent = $L(target).closest('.lyteDMSContainer, html, lyte-datemultiselect');

	if (parent.get(0) && parent.get(0).tagName === 'HTML') {
		_lyteDMS.closeDMS();
		
	}
});

window.addEventListener('scroll', function (event) {
	var activeDMS = _lyteDMS.activeDMS, comp,
		closedDMS = _lyteDMS.closedDMS;

	if (activeDMS) {
		comp = activeDMS.component;

		// comp.position();

		if (comp.exceedsBoundary()) {
			activeDMS.close(event);
			_lyteDMS.closedDMS = activeDMS;
		}

		return;
	}

	if (closedDMS) {
		comp = closedDMS.component;

		if (!comp.exceedsBoundary()) {
			closedDMS.open(event);
			_lyteDMS.closedDMS = null;
		}
	}
}, true);

document.addEventListener('keydown', function (event) {
	var key = event.code,
		spaceKey = 'Space',
		escapeKey = 'Escape',
		tabKey = 'Tab';

	if ( key === spaceKey && _lyteDMS.getFocusedDMS() && !_lyteDMS.isFocusedOpen() ) {
		_lyteDMS.openFocused(event);
		event.preventDefault();
	}
	else if ((key === escapeKey || key === tabKey) && _lyteDMS.activeDMS) {
		_lyteDMS.activeDMS.close();
	}
});

window.addEventListener('resize', function () {
	window.clearTimeout(_lyteDMS.debounceId);

	_lyteDMS.debounceId = setTimeout(function () {
		var activeDMS = _lyteDMS.activeDMS, comp;

		if (activeDMS) {
			comp = activeDMS.component;
			comp.position();
		}
	}, 100);
});


export { LyteDatemultiselectComponent };


