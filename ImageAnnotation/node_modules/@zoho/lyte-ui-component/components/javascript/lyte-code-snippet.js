import { prop } from "@slyte/core";
import { Component } from "../component.js";

import $L from "@zoho/lyte-dom";

/* @Slicer.otherframeworkStart */
import "../../plugins/code-snippet/builder.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/code-snippet/registrationClient.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-css-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-html-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-js-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-json-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-xml-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-java-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-python-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../plugins/tokenizer/lyte-lytejs-tokenizer.js";
/*  @Slicer.otherframeworkEnd */

/* @Slicer.otherframeworkStart */
import "../../components/javascript/lyte-messagebox.js";
/*  @Slicer.otherframeworkEnd */

class LyteCodeSnippetComponent extends Component {
	constructor() {
		super();
	}

	data() {
		return {
			'ltPropCode': prop('string', { 'default': '' }),
			'ltPropType': prop('string', { 'default': 'js' }),
			'ltPropInitialLineCount': prop('number', { 'default': 100 }),
			'ltPropLinesPerScroll': prop('number', { 'default': 100 }),
			'ltPropLazyLoading': prop('boolean', { 'default': false }),
			'ltPropCopyMessagePreview': prop('boolean', { 'default': true }),
			'ltPropShowLineNumber': prop('boolean', { 'default': true }),
			'ltPropTitle': prop('string', { 'default': '' }),
			'ltPropCopyMessageOnSuccess': prop('string', { 'default': _lyteUiUtils.i18n('lyte.codesnippet.success.message') }),
			'ltPropCopyMessageOnFailure': prop('string', { 'default': _lyteUiUtils.i18n('lyte.codesnippet.failure.message') }),
			'ltPropCopyButtonAppearance': prop('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-code-snippet', 'copyButtonAppearance', 'text') }),
			'ltPropCopyTooltipText': prop('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-code-snippet', 'copyTooltipText', window._lyteUiUtils.i18n("lyte.codesnippet.copy")) })
		};
	}

	didConnect() {
		this.createMessageBox();
	}

	createMessageBox() {
		if (this.getMessageBox()) {
			return;
		}

		var messageBox = document.createElement('lyte-messagebox');

		messageBox.setAttribute('id', 'lyteCSMessageBox');

		// document.body.appendChild(messageBox);
		if (window._lyteUiUtils.appendLocation === 'first') {
			document.body.insertBefore(messageBox, document.body.children[0]);
		}
		else {
			document.body.appendChild(messageBox);
		}

	}

	buildLineNumbers(totalLines) {
		var docFrag = document.createDocumentFragment(),
			showLineNumber = this.getData('ltPropShowLineNumber');

		if (!showLineNumber) {
			return;
		}

		for (var i = 1; i <= totalLines; i++) {
			var line = document.createElement('span');

			line.setAttribute('class', 'lyteCSLineNumber');
			line.textContent = i;
			docFrag.appendChild(line);
		}

		this.getLineNumberContainer().appendChild( docFrag );
	}

    isContainerEmpty() {
		var children = this.getChildren();

		return children.length === 0;
	}

    getChildren() {
		var container = this.getSnippetContainer();

		return container.children;
	}

    removeBuiltCode() {
		var container = this.getSnippetContainer(),
			lineNumberContainer = this.getLineNumberContainer();

		container.innerHTML = '';

		if (lineNumberContainer) {
			lineNumberContainer.innerHTML = '';
		}
	}

    fixDimensionsAndAppend(snippet, highlighterObj) {
		var lazyLoading = this.getData( 'ltPropLazyLoading' ),
		container = this.getSnippetContainer(),
		lineCount = ( highlighterObj || {} ).lineCount;

		if( lazyLoading ) {
			window.totalHeight = window.height * lineCount;
			container.style.height = totalHeight + 'px';
		}

		container.appendChild( snippet );
	}

    getSnippetContainer() {
		return this.$node.querySelector( '.lyteCSCodeContainer' );
	}

    getLineNumberContainer() {
		return this.$node.querySelector( '.lyteCSLineNumberContainer' );
	}

    isEmpty(element) {
		return !element.querySelector( '*' );
	}

    displaySuccessMessage() {
		var messageBox = this.getMessageBox();

		messageBox.ltProp( 'message', this.getData( 'ltPropCopyMessageOnSuccess' ) );
		messageBox.ltProp( 'type', 'success' );
		messageBox.ltProp( 'show', true );
	}

    getMessageBox() {
		return document.getElementById( 'lyteCSMessageBox' );
	}

    displayFailureMessage() {
		var messageBox = this.getMessageBox();

		messageBox.ltProp( 'message', this.getData( 'ltPropCopyMessageOnFailure' ) );
		messageBox.ltProp( 'type', 'error' );
		messageBox.ltProp( 'show', true );
	}

    static actions() {
        return {
            alignCodeAndLineContainer: function( event ) {
                var codeContainer = event.target,
                scrollPosition = codeContainer.scrollTop,
                showLineNumber = this.getData( 'ltPropShowLineNumber' );

                if( !showLineNumber ) {
                    return ;
                }

                this.getLineNumberContainer().scrollTop = scrollPosition;
            },

			copyCode: function () {
				if (this.getMethods('onBeforeCopy')) {
					this.executeMethod('onBeforeCopy', this);
				}
				var messagePreview = this.getData('ltPropCopyMessagePreview');
                var text = this.getData( 'ltPropCode' ) || '', that = this;

                if( window._lyteUiUtils.copy2clip ) {
					window._lyteUiUtils.copy2clip(text.replace(/&/g, '&amp;').replace(/\"/g, "&quot;").replace(/\'/g, "&#39;").replace(/</g, '&lt;').replace(/>/g, '&gt;'),
						function () {
							if (messagePreview) {
								var messageBox = document.getElementById('lyteCSMessageBox');
								messageBox.ltProp('message', that.getData('ltPropCopyMessageOnSuccess'));
								messageBox.ltProp('type', 'success');
								messageBox.ltProp('show', true);
							}
						}, function () {
							if (messagePreview) {
								var messageBox = document.getElementById('lyteCSMessageBox');
								messageBox.ltProp('message', that.getData('ltPropCopyMessageOnFailure'));
								messageBox.ltProp('type', 'error');
								messageBox.ltProp('show', true);
							}
                    } )
                }
                else {
					if (messagePreview) {
						window.navigator.clipboard.writeText(text).then(function () {
							that.displaySuccessMessage();
						}, function (err) {
							that.displayFailureMessage();
						});
					}
                }
            }
        };
    }

    static observers() {
        return {
            tokenizeAndBuild: function() {
                var type = this.getData( 'ltPropType' ) || 'js',
                code = this.getData( 'ltPropCode' );

                if( !this.isContainerEmpty() ) {
                    this.removeBuiltCode();
                }

                if( code ) {
                    var builder = $L.snippets.getBuilder( type, code ),
                    result = builder.build();
                    this.fixDimensionsAndAppend( result.snippet );
                    this.buildLineNumbers(result.lineCount);

                }

            }.observes(
                'ltPropCode'
            )
            .on( 'didConnect' )
        };
    }
}

export { LyteCodeSnippetComponent };