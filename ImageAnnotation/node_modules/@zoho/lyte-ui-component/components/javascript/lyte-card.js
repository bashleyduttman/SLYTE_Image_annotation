import { prop } from "@slyte/core";
import { Component } from "../component.js";

/**
 * Renders a card
 * @component lyte-card
 * @version  3.12.0
 */
class LyteCardComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			
			/**
			 * @componentProperty {small | medium | large} ltPropSize=medium
			 */

			'ltPropSize': prop( 'string', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-card', 'size', 'medium' ) } ),

			/**
			 * @componentProperty {colorString} ltPropBackgroundColor
			 */

			'ltPropBackgroundColor': prop( 'string', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-card', 'backgroundColor', '' ) } ),

			/**
			 * @componentProperty {horizontal | vertical} ltPropAlignment=vertical
			 */

			'ltPropAlignment': prop( 'string', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-card', 'alignment', 'vertical' ) } ),

			/**
			 * @componentProperty {string} ltPropBoxShadow
			 */

			'ltPropBoxShadow': prop( 'string', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-card', 'boxShadow', '' ) } ),
			'lyteViewPort' : prop( 'boolean', { 'default': false } ),

			/**
			 * @componentProperty {boolean} ltPropViewPort=false
			 */

			'ltPropViewPort': prop( 'boolean', { 'default': false } ),

			'ltPropLoadingYield' : prop( 'boolean',{
				'default' : true
			}),

			'finalClass': prop( 'string', { 'default': '' } ),
			'finalStyle': prop( 'string', { 'default': '' } )
		};
	}

    init() {
		var useViewPortFeature = this.getData( 'ltPropViewPort' );

		if( useViewPortFeature ) {
			this.setData( 'lyteViewPort', true );
		}
	}

    didConnect() {
		var isInViewPort = !this.getData( 'lyteViewPort' );

		if( isInViewPort ) {
			this.setup();
		}
	}

    setup() {
		this.setYieldClass();
		this.setStyle();
		this.align();
		this.size();
	}

    setYieldClass() {
		this.$node.querySelector( 'lyte-yield' ).classList.add( 'lyteCardYield' );
	}

    setStyle() {
		var boxShadow = this.getData( 'ltPropBoxShadow' ),
		bg = this.getData( 'ltPropBackgroundColor' ), res = '';

		if( boxShadow ) {
			res += 'box-shadow:' + boxShadow + ';';
		}

		if( bg ) {
			res += 'background-color:' + bg + ';';
		}

		this.setData( 'finalStyle', res );
	}

    align(old) {
		var align = this.getData( 'ltPropAlignment' );

		align = align ? align : 'vertical';
		this.setClass( old, align );
	}

    size(old) {
		var size = this.getData( 'ltPropSize' );

		size = size ? size : 'medium';
		this.setClass( old, size );
	}

    setClass(oldValue, newValue) {
		var newCls, oldCls, cur = this.getData( 'finalClass' ), ind;

		newCls = 'lyteCard' + newValue[ 0 ].toUpperCase() + newValue.substring( 1 );
		cur = cur ? cur.split( ' ' ) : [];

		if( oldValue ) {
			oldCls = 'lyteCard' + oldValue[ 0 ].toUpperCase() + oldValue.substring( 1 );
			ind = cur.indexOf( oldCls );

			if( ind !== -1 ) {
				cur.splice( ind, 1 );
			}
			
		}

		cur.push( newCls );
		this.setData( 'finalClass', cur.join( ' ' ) );
	}

    box() {
		return this.$node.querySelector( 'lyte-card-box' );
	}

    static observers() {
        return {
            styleObserver: function() {
                this.setStyle();
            }.observes( 'ltPropBackgroundColor', 'ltPropBoxShadow' ),

            alignmentObserver: function( change ) {
                this.align( change.oldValue );
            }.observes( 'ltPropAlignment' ),

            sizeObserver: function( change ) {
                this.size( change.oldValue );
            }.observes( 'ltPropSize' ),

            viewPortObserver: function() {
                this.setup();
            }.observes( 'lyteViewPort' )
        };
    }
}

/** 
 *
 * @syntax yielded
 * <lyte-card>
 * 		<template is="registerYield" yield-name="yield">
 *			<lyte-card-header>
 *				Header
 *			</lyte-card-header>
 *			<lyte-card-body>
 *				Body
 *			</lyte-card-body>
 *			<lyte-card-footer>
 *				Footer
 *			</lyte-card-footer>
 *		</template>
 * </lyte-card>
 *
 *
 */

export { LyteCardComponent };
