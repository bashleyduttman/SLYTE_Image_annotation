import { prop } from "@slyte/core";
import { Component } from "../../component.js";
import $L from "@zoho/lyte-dom";

class LyteNoteEditorComponent extends Component {
    constructor() {
        super();
    }

    class(add, remove, _this) {
		var editor = $L( this.$node ).find( '.lyteNoteEditorWrapper' ).eq( 0 ),
		cls_name = 'lyteEditorHide';

		editor[ remove + 'Class' ]( cls_name );
		$L( _this )[ add + 'Class' ]( cls_name );
	}

    get_editor() {
		return $L( this.$node ).find( 'lyte-texteditor.lyteNoteMainEditor' ).get( 0 );
	}

    data() {
		return {
			ltPropEditMode : prop( "boolean", { default : false } ),
			ltPropValue : prop( "string", { default : '' } ),

			ltPropButtons : prop( "array", { default : [] } ),

			ltPropTextEditor : prop( "object", { default : {} } ),

			ltPropBackground : prop( "string", { default : '' } ),

			ltPropBorder : prop( "string", { default : '' } ),

			ltPropEditorPanel : prop( "object", { default : {} } ),

			ltPropFileUpload : prop( "object", { default : {} } ),

			ltPropAttachments : prop( "array", { default : [] } ),

			ltPropEditorAnimation : prop( "string", { default : 'slide' } ),

			ltPropResize : prop( "object", { default : { horizontal : false, vertical : true } } ),

			ltPropTooltipConfig : prop( "string", { default : '{}' } ),

			ltPropText : prop( "object", { default : {
				fileUpload : window._lyteUiUtils.i18n( "upload.file", "note", "File upload" ),
				storage : window._lyteUiUtils.i18n( "storage", "note", "Storage" ),
				failureMessage : window._lyteUiUtils.i18n( 'Attachment failed', 'fileupload', "Attachment failed" ), 
				retryText : window._lyteUiUtils.i18n( 'retry', "fileupload", "Retry" )
			} } ),

			ltPropVoiceNote : prop( "object" ),

			ltPropFooterYield : prop( "boolean", { default : false } ),

			ltPropEditorProps : prop( "object", { default : {} } ),

			ltPropTitleYield : prop( "boolean", { default : false } ),

			// system

			render : prop( "boolean", { default : false } ),
			randomId : prop( "string", { default : 'LyteNoteEditor' + parseInt( Math.random() * 100000 ) } ),

			uploadedWidth : prop( "string", { default : '0' } ),
			showStatus : prop( "boolean", { default : false } ),
			uploadedCount : prop( "string" ),
			totalCount : prop( "string" ),
			uploadedSize : prop( "string" ),
			totalSize : prop( "string" ),
			dashoffset : prop( "number" ),
			dashoffsetStorage : prop( "number" ),
			showElement : prop( "string", { default : 'lyteEditorHide' } ),
			disabled : prop( "boolean", { default : false } ),
			sanitizer : prop( "object", {}),

			animationHeight : prop( "number", { default : 0 } ),
			isEmpty : prop( "boolean" ),
			fromMain : prop( "boolean" ),
			draftMode : prop( "boolean" ),
			draftText : prop( "string" ),
			dataIndex : prop( "string", { default : "" } ),
			dataId : prop( "string", { default : "" } )
		};
	}

    disable_button() {
        var lyteSelf = this;
        var data = this.data;

        if( data.ltPropEditorProps.attachment ){
			clearTimeout( this._disable );
			this._disable = setTimeout( function(){
				var button = data.ltPropButtons.filter( function( item ){
					return item.method == "save";
				})[ 0 ];
				if( button ){
					var file_data = $L( "lyte-fileupload", this.$node ).get( 0 ).component.data,
					queueList = file_data.queueList,
					predefined = file_data.predefinedList;

					lyteSelf.$addon.objectUtils( button.properties, 'add', 'disabled', data.isEmpty && !queueList.length && !predefined.length );
				}
			}.bind( this ), 10 );
		}
    }

    didDestroy() {
		clearTimeout( this._disable );
		clearTimeout( this._timeout );
	}

    toggle_icon(_this) {
		var panel = $L( this.$node ).find( 'lyte-editorpanel' ),
		cls_name = 'lyteEditorHide',
		hid_class = 'lyteEditorPanelHidden',
		animation = this.data.ltPropEditorAnimation,
		old_animation = panel.data( 'animation' ),
		$this = $L( _this ),
		_add = 'addClass',
		_remove = 'removeClass',
		evt_name = 'transitionend',
		start_cls = 'lyteNoteEditorPanelTransStart',
		end_cls = 'lyteNoteEditorPanelTransEnd',
		__key = ( animation || {} ).key; 

		if( panel.hasClass( cls_name ) ){
			if( old_animation == 'open' ){
				return;
			} else if( old_animation == 'close' ){
				panel.trigger( evt_name );
			}

			if( animation ){ 
				panel[ _add ]( start_cls );
				$this[ _remove ]( hid_class );
				window.requestAnimationFrame( function(){ // animation is not happening in FF without this RAF
					panel[ _remove ]( cls_name ).data( 'animation', 'open' );
					window.requestAnimationFrame( function(){
						panel.on( evt_name, function(){
							panel.off( evt_name ).data( 'animation', '' )[_remove ]( end_cls );
						})[_remove ]( start_cls )[ _add ]( end_cls );
					});
				});
			} else {
				panel[ _remove ]( cls_name );
				$this[ _remove ]( hid_class );
			}

		} else{

			if( old_animation == 'open' ){
				panel.trigger( evt_name );
			} else if( old_animation == 'close' ){
				return;
			} 

			if( animation ){
				panel[ _add ]( end_cls ).data( 'animation', 'close' );
				window.requestAnimationFrame( function(){
					panel.on( evt_name, function(){
						panel.off( evt_name )[ _add ]( cls_name ).data( 'animation', '' )[_remove ]( start_cls );
						$this[ _add ]( hid_class );
					})[_remove ]( end_cls )[ _add ]( start_cls );
				});
			} else{
				panel[ _add ]( cls_name );
				$this[ _add ]( hid_class );
			}
		}
	}

    static actions() {
        return {
            renderEditor : function( _this ){

                if( !this.data.render ){
                    this.setData( 'render', true );		
                    this.class( 'remove', 'add' );
                }

                if( this.data.fromMain && this.executeMethod( 'closeComment' ) ){
                    return;
                }
                this.setData( 'ltPropEditMode', true );
            },
            common_action : function( name, evt ){
                if( name == 'cancel' ){
                    this.setData( 'draftMode', false );
                }
                this.throwEvent( name, this.get_editor(), evt );

                if( name == 'bg_switch' ){
                    this.get_editor().focus();
                }
            },

            toggle_icon : function( _this ){
                this.toggle_icon( _this );
            },

            trigger_upload : function( evt ){
                evt.preventDefault();
                evt.stopPropagation();

                $L( this.$node ).find( '.fileuploadInput ' ).click();

                return false;
            }
        };
    }

    focus_blur(fn) {
		$L( this.$node )[ fn + 'Class' ]( 'lyteNoteEditorFocused' );
	}

    static methods() {
        return {

            common : function( __name ){
                var __args = Array.from( arguments );
                this.file_execute( __args.shift(), arguments );
            },

            selection : function(){
                var range = arguments[ 1 ],
                editor_panel = $L( this.$node ).find( 'lyte-editorpanel' ),
                has_class = editor_panel.hasClass( 'lyteEditorHide' );

                if( range.isRange ){	
                    if( has_class ){
                        this.toggle_icon( $L( '.lyteNoteEditorIcon', this.$node ) );
                    }
                } 
            },

            trigger : function( value, position, editor ){
                if( this.getMethods( 'onTrigger' ) ){
                    return this.executeMethod( 'onTrigger', value, position, editor );
                }
            },

            focus : function(){
                this.focus_blur( 'add' );
            },

            blur : function(){
                this.focus_blur( 'remove' );
            },

            paste : function( pasteDiv, clipboard, editor ){
                this.file_execute( 'on_editor_paste', arguments );
            },

            beforeSend : function(){
                this.file_execute( 'file_before_send', arguments );
            },

            success : function(){
                var args = arguments;
                this.modify_display( args[ 1 ] );
                this.file_execute( 'file_success', args );
            },

            failure : function(){
                var args = arguments;
                this.modify_display( args[ 1 ] );
                this.file_execute( 'file_failure', arguments );
            },

            removeFile : function(){
                var args = arguments;
                this.modify_display( args[ 2 ] );
                this.file_execute( 'file_remove', args );
            },

            beforeRemove : function(){
                this.file_execute( 'file_before_remove', arguments );
            },

            addFile : function( _file, _fileupload ){
                this.modify_display( _fileupload );
            }
        };
    }

    modify_display(_file) {
		if( _file ){
			clearTimeout( this._timeout );
			this._timeout = setTimeout( this._modify_display.bind( this, _file ), 0 );
		}
	}

    _modify_display(_file) {
        var lyteSelf = this;
        var _this = _file.component,
		queueList = _this.data.queueList.slice().concat( _this.data.predefinedList || [] ),
		total_size = 0,
		success_size = 0,
		success = queueList.filter( function( item ){
			var is_success = item.status == 'success' || item.status == void 0;
			if( is_success ){
				success_size += item.size;
			}

			total_size += item.size;
			return is_success;
		}),
		fn = function( value ){
			if( value == 0 ){
				return '0 Bytes';
			}
			return lyteSelf.$component.registeredHelpers.lyteUiFileSize( value, void 0, 2 );
		}.bind( this ),
		elem_name = 'showElement',
		fileSize = this.data.ltPropFileUpload.totalFilesSize;

        this.setData( 'uploadedCount', success.length );
        this.setData( 'totalCount', queueList.length );

        this.setData( "dashoffset", 314.16 * ( 1 - success.length / queueList.length ) );

        if( fileSize ){
			this.setData( 'uploadedSize', fn( success_size ) );
			this.setData( "totalSize", fileSize );
			this.setData( 'uploadedWidth', ( success_size / _file.getData( 'totalFilesSize' ) * 100 ) + '%' );

			this.setData( 'dashoffsetStorage', 125.66 * ( 1 - success_size / _file.getData( 'totalFilesSize' ) ) );
		}
        if( queueList.length ){
			this.setData( elem_name, '' );
			this.setData( 'showStatus', true );
		} else{
			this.setData( elem_name, 'lyteEditorHide' );
		}

        this.disable_button();
    }

    file_execute(name, args) {
		args = Array.from( args );
		args.unshift( name );

		this.throwEvent.apply( this, args );
	}

    static observers() {
        return {
            border_obs : function( arg ){
                var editor = $L( this.$node ).find( '.lyteNoteEditorWrapper' ),
                fn = 'addClass';
                if( arg.newValue ){
                    fn = 'removeClass';
                }

                editor[ fn ]( 'lyteNoteEditorWhiteBg' );

            }.observes( 'ltPropBorder' ),

            draft_obs : function(){
                var data = this.data;
                if( data.draftMode && !data.ltPropEditMode ){
                    this.setData( 'draftText', this.get_editor().getHTML() );
                } 
            }.observes( 'draftMode', 'ltPropEditMode' ),

            empty_obs : function(){
                this.disable_button();
            }.observes( "isEmpty" ),

            obs : function(){

                var __mode = this.data.ltPropEditMode,
                __rendered = this.data.render;

                if( __mode && !__rendered ){
                    this.setData( 'render', __rendered = true );
                }

                var editor = this.get_editor(),
                _this = $L( this.$node ).children( '.lyteNoteFakeElement' ),
                $this = this,
                evt_name = 'transitionend',
                wrapper = $L( this.$node ).find( '.lyteNoteEditorWrapper' ).eq( 0 ),
                fn = function( bool ){
                    if( $this.getMethods( "onSwitch" ) ){
                        $this.executeMethod( "onSwitch", bool, $this.$node );
                    }
                },
                height,
                initial_height,
                hide_cls = "lyteEditorHide",

                common_fn1 = function(){
                    wrapper.off( evt_name ).css( {
                        height : "auto",
                        overflow : ""
                    });

                    $this.modify_display( $L( "lyte-fileupload", $this.$node ).get( 0 ) );
                },

                common_fn2 = function( height, initial_height ){
                    if( Math.abs( height - initial_height ) < 10 ){
                        wrapper.trigger( evt_name );
                    }
                };

                if( __mode ){
                    initial_height = this.data.animationHeight || _this.get( 0 ).offsetHeight;

                    this.class( 'add', 'remove', _this );

                    var value = this.data.ltPropValue,
                    __fn = "HTML",
                    __arg = value;

                    try{
                        if( /^[0-9]+$/.test( value ) ){
                            __fn = 'HTML';
                        } else if( !value.indexOf( '[' ) ) {
                            var json = JSON.parse( value );
                            __fn = 'JSON';
                            __arg = json;
                        }
                    }catch( e ){
                        __fn = 'HTML';
                    }

                    editor[ 'insert' + __fn ]( __arg );

                    window.requestAnimationFrame( function(){
                        height = wrapper.height();
                        
                        wrapper.css( {
                            height : initial_height,
                            overflow : "hidden"
                        });
                        window.requestAnimationFrame( function(){
                            wrapper.css( {
                                height : height,
                                overflow : "hidden"
                            }).on( evt_name, function(){
                                editor.focus();
                                $this.setData( "disabled", false );
                                common_fn1();
                                fn( !0 );
                            });

                            common_fn2( height, initial_height );
                        });
                    });

                } else if( __rendered ) {

                    var height = wrapper.height(),
                    initial_height = this.data.animationHeight,
                    anim = function(){
                        wrapper.css( {
                            height : height,
                            overflow : "hidden"
                        } );

                        window.requestAnimationFrame( function(){
                            wrapper.on( evt_name, function(){

                                $this.setData( "disabled", false );

                                common_fn1();

                                if( !$this.data.draftMode ){
                                    editor.clear();
                                    editor.resetQueue();
                                }

                                $L( editor ).css( {
                                    width : "",
                                    height : ""
                                });

                                var panel = $L( 'lyte-editorpanel', $this.$node );

                                if( panel.data( "animation" ) ){
                                    panel.trigger( evt_name );
                                }

                                fn( !1 );
                                $this.class( 'remove', 'add', _this );

                                if( $this.data.fromMain ){

                                    $this.$node.ltProp( {
                                        background : "",
                                        border : ""
                                    });
                                } else if( $this.data.ltPropVoiceNote ){
                                    var audio = $L( "audio", $this.$node ).get( 0 );
                                    audio.pause();
                                    audio.currentTime = 0;

                                }

                            }).css( {
                                height : initial_height || _this.get( 0 ).offsetHeight
                            });

                            !initial_height && _this.addClass( hide_cls );

                            common_fn2( height, initial_height );
                        });
                    };

                    if( !initial_height ){
                        _this.removeClass( hide_cls );
                        anim();
                    } else {
                        // if it doesn't wait for a frame in edit case animation is not happening in firefox
                        window.requestAnimationFrame( anim );
                    }
                }

                this.setData( 'disabled', true );
            }.observes( 'ltPropEditMode' ).on( 'didConnect' )
        };
    }
}

export { LyteNoteEditorComponent };