import { prop } from "@slyte/core";
import { Component } from "../../component.js";

class LyteReactionViewComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropComment : prop( "object" ),
			
			ltPropMethod : prop( "string", { default : "indexOf" }),
			ltPropCaseSensitive : prop( "boolean", { default : true }),
			ltPropTrim : prop( "boolean", { default : true } ),

			ltPropShow : prop( "boolean", { default : false } ),

			ltPropTooltipConfig : prop( "string", { default : '{}' } ),

			ltPropText : prop( "object", { 
				all : window._lyteUiUtils.i18n( "all", "note", "All" ),
				noResult : window._lyteUiUtils.i18n( "no.results.found", void 0, "No results found" )
			}),

			ltPropPlaceholder : prop( "string", { default : window._lyteUiUtils.i18n( "placeholder", "note", "Search by name or email address" ) } ),

			// system data

			emojiArray : prop( "array", { default : [] } ),
			renderArray  : prop( "array", { default : [] } ),
			show : prop( "boolean", { default : false } ),
			selected : prop( "string" ),
			inputValue : prop( "string", { default : '' } )
		};
	}

    setup() {
		var _this = this,
		data = _this.data,
		comment = data.ltPropComment,
		emoji = comment.emoji;


		_this.setData( 'emojiArray', this.merge_reactions( emoji ) );
	}

    merge_reactions(emoji) {
		var arr = [],
		utils = this.$addon.arrayUtils,
		final = [],
		all = this.data.ltPropText.all;

		emoji.forEach( function( item ){
			var formatted = this.format_reactions( item.reacted || [], item.value );

			arr.push({
				reacted : formatted,
				value : item.value,
				class : item.class
			});

			utils( final, 'push', formatted );
		}.bind( this ));

		final = final.sort( function( a, b ){
			return b.timeStamp - a.timeStamp;
		});

		arr.unshift({
			reacted : final,
			value : all
		});

		this.setData( 'selected', all );
		this.setData( 'renderArray', final );

		return arr;
	}

    format_reactions(array, value) {	

		var _this = this,
		span = $L( '<span></span>' ).get( 0 );

		return array.map( function( item ){
			var callback = 'onTimeConversion',
			str = {},
			time = item.createdTime;

			if( time && _this.getMethods( callback ) ){
				str = _this.executeMethod( callback, time, 'reaction' );
			}

			span.innerHTML = value;

			return {
				value : span.innerText,
				item : item,
				createdTime : str,
				timeStamp : time ? $L.moment( time ).format( 'x' ) : 0
			}
		});
	}

    reset_scroll(modal) {

		modal = modal || $L( 'lyte-modal', this.$node ).get( 0 );

		var element = $L( modal.component.actualModalDiv ).find( 'lyte-table' );

		element.get( 0 ).scrollTop = 0;
		element.resetScrollbar();

		this.setData( 'inputValue', '' );
	}

    static actions() {
        return {

            rowclick : function( _this, evt, item ){
                this.throwEvent( 'common_action', "onReactionClick", evt, _this, $L( this.$node ).parent().find( '#' + this.data.ltPropComment.id ).get( 0 ), item.body );
            },

            reaction : function( index ){

                var _this = this,
                data = _this.data,
                emoji = data.emojiArray,
                utils = this.$addon.objectUtils,
                to_be = emoji[ index ];

                if( data.selected == to_be.value && to_be.reacted.length == data.renderArray.length ){
                    return;
                }

                _this.setData( 'selected', to_be.value ); 

                _this.reset_scroll();
                _this.setData( 'renderArray', to_be.reacted );
            },

            searchInTable : function( input ){
                var value = input.value,
                _this = this,
                selected = _this.data.selected;

                clearTimeout( _this._timeout );
                _this._timeout = setTimeout( function(){
                    var current = _this.data.emojiArray.filter( function( item ){
                        return item.value == selected;
                    })[ 0 ], 
                    arr = current.reacted,
                    final = arr.filter( function( item ){
                        return _this.is_contains( item, value );
                    });

                    _this.reset_scroll();
                    _this.setData( 'renderArray', final );

                }, 250 );
            }
        };
    }

    is_contains(item, value) {
		var _this = this,
		data = _this.data,
		_case = function( str ){
			if( !data.ltPropCaseSensitive ){
				return str.toLowerCase();
			}
			return str;
		},
		_trim = function( str ){
			if( data.ltPropTrim ){
				return str.trim();
			}
			return str;
		},
		is_present = function( str ){
			var index = _trim( _case( str ) ).indexOf( _case( value ) );

			switch( data.ltPropMethod ){
				case 'startsWith' : {
					return index == 0;
				}
				break;
				case 'endsWith' : {
					return index + value.length == _trim( str ).length;
				}
				break;
				default : {
					return index != -1;
				}
			} 
		};

		return is_present( item.item.name || '' ) || is_present( item.item.email || '' );
	}

    static observers() {
        return {
            obs : function( arg ){
                if( arg.newValue ){
                    this.setup();
                    this.setData( 'show', true );
                }
            }.observes( 'ltPropShow' ),

            modal_close : function( arg ){
                if( !arg.newValue ){
                    this.setData( 'ltPropShow', false );
                    this.reset_scroll();
                    this.setData( 'ltPropComment', void 0 );
                }
            }.observes( 'show' )
        };
    }
}

export { LyteReactionViewComponent };
