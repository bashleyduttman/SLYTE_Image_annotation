import {LyteAdvancedBreadcrumbMixin} from "/mixins/lyte-advanced-breadcrumb.js"
import { prop } from "@slyte/core";
import { Component } from "../component.js";
import $L from "@zoho/lyte-dom";

/**
 * This is used to indicate the current position in a page
 * @component lyte-breadcrumb
 * @version 1.0.0
 * @methods onClick
 * @utility modifyCrumbItems
 */


class LyteBreadcrumbComponent extends Component {
    constructor() {
        super();
    }

    init() {
	   /**
        * @method beforeRender
        * @version 1.0.1
        */
		this.getMethods('beforeRender') && this.executeMethod('beforeRender', this.$node);
	}

    didDestroy() {
		clearTimeout( this._timeout );
		delete this.$node.modifyCrumbItems;
	}

    didConnect() {
        var lyteSelf = this;
        if( this.data.ltPropType == "default" ){
			this.ArrayContentChange();
			this.$node.modifyCrumbItems = function( property, arg1, arg2 ){
				if( !this.data.ltPropYield ){
					lyteSelf.$addon.arrayUtils( this.data.ltPropData, property, arg1, arg2 );
				} else {
					this.ArrayContentChange();
				}
			}.bind( this );

			this.breadcrumbClass();

			$L.fastdom.measure( function(){
				var is_rtl = window._lyteUiUtils.getRTL();
				$L.fastdom.mutate( function(){
					if( is_rtl ){
						$L( this.$node ).addClass( 'lyteRTL' );
					}
				}.bind( this ));
			}.bind( this ));
			var cb = "afterRender";
			/**
	        * @method afterRender
	        * @version 1.0.1
	        */
	       if( this.getMethods( cb ) ){
	       		this.executeMethod( cb, this.$node );
	       }
	   }
    }

    ArrayContentChange() {
		var data = this.data,
		active = data.ltPropActiveClass,
		completed = data.ltPropCompletedClass,
		aria = data.ltPropAria,
		innerElements = $L( 'lyte-breadcrumb-item', this.$node ),
		__length = innerElements.length - 1,
		last = innerElements.eq( -1 );

		for( var i = 0; i < __length; i++ ){
			var cur = innerElements.eq( i );
			cur.addClass( completed ).removeClass( active );
			if( aria ){
				cur.find( 'a' ).removeAttr( 'aria-current' );
			}
		}

		last.removeClass( completed ).addClass( active );
		if( aria ){
			last.find( 'a' ).attr( 'aria-current', data.ltPropAriaValue );
		}
	}

    breadcrumbClass() {
		if( this.data.ltPropYield ) {
			$L( 'lyte-breadcrumb-structure', this.$node ).addClass( this.data.ltPropClass );
		}
	}

    data() {
		var default_values = window._lyteUiUtils.getDefault( 'lyte-breadcrumb' );

        return {
			//  user data
		   /**
			* @componentProperty {string} ltPropClass=lyteBreadcrumbSlash
			* @version 1.0.0
			*/
			ltPropClass : prop("string",{"default": default_values.class || 'lyteBreadcrumbSlash'}),
		   /**
			* @componentProperty {string[] | object[]} ltPropData
			* @version 1.0.0
			* @default []
			*/
			ltPropData : prop("array",{"default":[]}),
		   /**
			* @componentProperty {string} ltPropActiveClass=lyteActive
			* @version 1.0.0
			*/
			ltPropActiveClass : prop("string",{"default": default_values.activeClass || 'lyteActive'}),
		   /**
			* @componentProperty {string} ltPropCompletedClass=lyteCompleted
			* @version 1.0.0
			*/
			ltPropCompletedClass : prop("string",{"default": default_values.completedClass || 'lyteCompleted'}),
		   /**
			* @componentProperty {boolean} ltPropYield=false
			* @version 1.0.0
			*/
			ltPropYield : prop("boolean",{"default": default_values.yield || false}),
		   /**
			* @componentProperty {string} ltPropLabel=''
			* @version 1.0.0
			*/
			ltPropLabel : prop('string', {'default': default_values.label || ''}),
		   /**
			* @componentProperty {string} ltPropOption=''
			* @version 1.0.0
			*/			
            ltPropOption : prop('string', {'default': default_values.option || ''}),

            // aria
		   /**
			* @componentProperty {boolean} ltPropAria=false
			* @version 3.1.0
			*/
            ltPropAria : prop( 'boolean', { default : default_values.aria || false } ),
           /**
			* @componentProperty {string} ltPropAriaValue=page
			* @version 3.1.0
			*/
            ltPropAriaValue : prop( 'string', { default : default_values.ariaValue || "page" } ),

            ltPropType : prop( 'string', { default : default_values.type || "default" } ),

            ltPropButtonDisplay : prop( 'string', { default : default_values.buttonDisplay || "..." } ),

            ltPropDropdown : prop( 'string', { default : default_values.dropdown || '{}' } ),

            backwardItems : prop( 'array', { default : [] } ),
            middleSelected : prop( 'string', { default : "" } )
		};
	}

    static actions() {
        return {
           'onclick' : function ( event, Component, data ){
                var target = event.target,
                cb = 'onClick';

                if( ( event.ctrlKey == true || event.metaKey == true || event.which == 2 ) && event.target.href != undefined && target.href.indexOf( 'javascript:' ) != -1 && target.target == '_blank' ){
                    return false;
                }

                if( this.getMethods( cb ) ){
                    this.executeMethod( cb, Component, this.$node, event, data );
                    event.stopPropagation();	
                }
            },
            divClick : function( event, div ){
                var target = event.target,
                cb = "onClick";

                if( ( event.ctrlKey == true || event.metaKey == true || event.which == 2 ) && target.href != undefined && target.href.indexOf( 'javascript:' ) != -1 && target.target == '_blank' ){
                    return false;
                }
                if( this.getMethods( cb ) && this.data.ltPropYield ) {

                    var node = $L( target.correspondingElement || target ).closest( 'lyte-breadcrumb-item', div );

                    if( node.length ){
                        this.executeMethod( cb, node.get( 0 ), this.$node, event, node.attr( 'data-value' ) );
                    }
                }
            }
        };
    }

    static observers() {
        return {
            ArrayContentChangeObs : function(){
                clearTimeout( this._timeout );
                this._timeout = setTimeout( this.ArrayContentChange.bind( this ), 0 );
            }.observes( 'ltPropData.[]', 'ltPropData' ),

            aria_obs : function(){
                 $L( 'lyte-breadcrumb-item', this.$node ).eq( -1 ).find( "a" ).attr( "aria-current", this.data.ltPropAriaValue );
            }.observes( 'ltPropAriaValue' ),

            breadcrumbClassObs : function(){
                this.breadcrumbClass();
            }.observes('ltPropClass')
        };
    }

    includes() {
        return [LyteAdvancedBreadcrumbMixin];
    }
}

/**
 * @syntax Yielded
 *  <lyte-breadcrumb lt-prop-yield="true">
 *		<template is="registerYield" yield-name="yield">
 *			<lyte-breadcrumb-structure>
 *				<lyte-breadcrumb-item>
 *					<lyte-breadcrumb-body>
 *						Home 
 *					</lyte-breadcrumb-body>
 *				</lyte-breadcrumb-item>
 *				<lyte-breadcrumb-item>
 *					<lyte-breadcrumb-body>
 *						Menu 
 *					</lyte-breadcrumb-body>
 *				</lyte-breadcrumb-item>
 *				<lyte-breadcrumb-item>
 *					<lyte-breadcrumb-body>
 *						Edit 
 *					</lyte-breadcrumb-body>
 *				</lyte-breadcrumb-item>
 *				<lyte-breadcrumb-item>
 *					<lyte-breadcrumb-body>
 *						Save 
 *					</lyte-breadcrumb-body>
 *				</lyte-breadcrumb-item>
 *			</lyte-breadcrumb-structure>
 *		</template>
 *	</lyte-breadcrumb>
 */

/**
 * @syntax Non Yielded
 * <lyte-breadcrumb lt-prop-data='["home","works",{"name": "Leads"},{"name": "Contacts"},{"name": "Services"}]' lt-prop-label="name">
 * </lyte-breadcrumb>
 */

export { LyteBreadcrumbComponent };