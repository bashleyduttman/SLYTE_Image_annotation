import { prop } from "@slyte/core";
import { Component } from "../component.js";

class LyteCheckboxGroupComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {

			/**
			 * @componentProperty {default | primary | switch | slider} ltPropType=default
			 */

			'ltPropType': prop( 'string', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox-group', 'type', 'default' )
			} ),

			/**
			 * @componentProperty {string} ltPropName
			 */

			'ltPropName': prop( 'string', { 
				'default': undefined 
			} ),

			/**
			 * @componentProperty {string} ltPropUserValue=name
			 * 
			 */

			'ltPropUserValue': prop( 'string', { 
				'default': 'name' 
			} ),

			/**
			 * @componentProperty {string} ltPropSystemValue=value
			 * 
			 */

			'ltPropSystemValue': prop( 'string', { 
				'default': 'value' 
			} ),

			/**
			 * @componentProperty {boolean} ltPropFireOnInit=false
			 */

			'ltPropFireOnInit': prop( 'boolean', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox-group', 'fireOnInit', false ) 
			} ),

			/**
			 * @componentProperty {string} ltPropClass
			 */

			'ltPropClass': prop( 'string', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox-group', 'class', '' ) 
			} ),

			/**
			 * @componentProperty {array} ltPropOptions=[]
			 */

			'ltPropOptions': prop( 'array', { 'default': [] } ),

			/**
			 * @componentProperty {array} ltPropSelected=[]
			 */

			'ltPropSelected': prop( 'array', { 
				'default': [] 
			} ),

			/**
			 * @componentProperty {horizontal | vertical} ltPropAlignment=horizontal
			 */

			'ltPropAlignment': prop( 'string', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox-group', 'alignment', 'horizontal' )  
			} ),

			/**
			 * @componentProperty {boolean} ltPropFocus=false
			 * 
			 */

			'ltPropFocus': prop( 'boolean', { 
				'default': false 
			} ),

			/**
			 * @componentProperty {array} ltPropDisabledList=[]
			 * 
			 */

			'ltPropDisabledList': prop( 'array', { 
				'default': [] 
			} ),

			/**
			 * @componentProperty {boolean} ltPropYield=false
			 * 
			 */

			'ltPropYield': prop( 'boolean', { 
				'default': false 
			} )
		};
	}

    init() {
		var alignment = this.getData( 'ltPropAlignment' );

		this.setData( 'alignmentClass', 'lyteCBoxGroup' + alignment[ 0 ].toUpperCase() + alignment.substring( 1 ) );
	}

    static methods() {
        return {
            fireCallback: function( callbackName, item ) {

                if(!this.preventMutation) {

                    if( callbackName === 'onChecked' ) {
                        this.add( item );
                    }
                    else if( callbackName === 'onUnchecked' ) {
                        this.remove( item );
                    }
                }

                if( this.getMethods( callbackName ) ) {
                    return this.executeMethod.apply( this, this.constructArgs(callbackName, item, arguments ) );
                }
            }
        };
    }

    add(item) {
		this.preventObserver = true;
		this.$addon.arrayUtils( this.getData( 'ltPropSelected' ), 'push', item );
		this.preventObserver = false;
	}

    getIndex(array, item) {
		var sysValue = this.getData( 'ltPropSystemValue' );
		for(var index=0; index < array.length; index++) {
			if(array[index][sysValue] ===  item[sysValue]) {
				return index;
			}
		}
	}

    remove(item) {
		this.preventObserver = true;

		var sel = this.getData( 'ltPropSelected' ) || [],
		ind = this.getIndex(sel, item);

		if( ind !== -1 ) {
			this.$addon.arrayUtils( sel, 'removeAt', ind, 1 );
		}

		this.preventObserver = false;
	}

    getAddedValues(oldValue, newValue) {
		return this.setSubtract( newValue, oldValue );
	}

    getRemovedValues(oldValue, newValue) {
		return this.setSubtract( oldValue, newValue );
	}

    setSubtract(arrA, arrB) {
		var sysValue = this.getData( 'ltPropSystemValue' );

		arrA = arrA || [];
		arrB = arrB || [];

		return arrA.filter( function( obj ) {
			for( var i = 0; i < arrB.length; i++ ) {
				if( obj[ sysValue ] === arrB[ i ][ sysValue ] ) {
					return false;
				}
			}

			return true;
		} );
	}

    constructArgs(methodName, item, args) {
		var arr = [].slice.call( args );

		arr.shift();
		arr.shift();
		arr.unshift( methodName );
		arr.push(item);

		return arr; 
	}

    check(item) {
		this.changeToState( item, true );
	}

    uncheck(item) {
		this.changeToState( item, false );
	}

    changeToState(item, newState) {
		var sysValue = this.getData( 'ltPropSystemValue' ),
		dataValue = item[ sysValue ],
		checkbox = this.$node.querySelector( '[data-value="' + dataValue + '"]' );

		if( checkbox ) {
			checkbox.ltProp( 'checked', newState );
		}
	}

    focusCBox() {
		var cbox;

		this.setData( 'ltPropFocus', false );
		cbox = this.getFirstEnabledCheckbox();

		if( cbox ) {
			cbox.ltProp( 'focus', true );
		}
	}

    getFirstEnabledCheckbox() {
		var cboxes = this.$node.querySelectorAll( 'lyte-checkbox' );

		for( var i = 0; i < cboxes.length; i++ ) {
			if( !cboxes[ i ].ltProp( 'disabled' ) ) {
				return cboxes[ i ];
			}
		}
	}

    static observers() {
        return {
            selectedObserver: function( changeObj ) {

                if( this.preventObserver ) {
                    return ;
                }

                var oldValue = changeObj.oldValue,
                newValue = changeObj.newValue,
                addedValues = this.getAddedValues( oldValue, newValue ),
                removedValues = this.getRemovedValues( oldValue, newValue ),
                that = this;
                
                this.preventMutation = true;

                addedValues.forEach( function( cbox ) {
                    that.check( cbox );
                } );

                removedValues.forEach( function( cbox ) {
                    that.uncheck( cbox );
                } );

                this.preventMutation = false;

            }.observes( 'ltPropSelected.[]' ),

            focusObserver: function() {
                var focus = this.getData( 'ltPropFocus' );

                if( focus ) {
                    this.focusCBox();
                }
            }.observes( 'ltPropFocus' ).on( 'didConnect' )
        };
    }
}

/**
 * @syntax nonYielded
 * <lyte-checkbox-group lt-prop-options='[{"name": "Option 1", "value": "1"}, {"name": "Option 2", "value": "2"}]' lt-prop-user-value="name" lt-prop-system-value="value"></lyte-checkbox-group>
 */

export { LyteCheckboxGroupComponent };