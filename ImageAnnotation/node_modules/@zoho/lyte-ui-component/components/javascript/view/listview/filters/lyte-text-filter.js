import { prop } from "@slyte/core";
import { Component, objectUtils } from "@slyte/component";
import $L from "@zoho/lyte-dom";

class LyteTextFilterComponent extends Component {
    constructor() {
        super();
    }

    init() {
		var __data = this.data;
		__data.isSearch = Object.keys( __data.ltPropOptions ).length >= __data.ltPropSearchCount;

		if( window._lyteUiUtils.lyteUiIsEmpty( __data.ltPropCondition ) ){
			this.setData( 'ltPropCondition', { input : "", isNeg : false, isValid : false, value : "", label : "", type : "text" } );
		}else{
			this.updateInitialConditions();
		}

		this.setData( 'ltPropCondition', { input : "", isNeg : false, isValid : false, value : "", label : "", type : "text" } );
	}

    data() {
		var __string = "string",
		__array = "array",
		__object = "object",
		__boolean = "boolean",
		__number = 'number';

		return {
			ltPropCondition : prop( __object ),
			ltPropPlaceholder : prop( __string, { default : "None" } ),
			ltPropOptions : prop( __object, { default : {
					set : window._lyteUiUtils.i18n( 'set', 'listview.filter', "Set" ),
					not_set : window._lyteUiUtils.i18n( 'not.set', 'listview.filter', "Not set" ),
					equal : window._lyteUiUtils.i18n( "equal", "listview.filter", "Equal" ),
					not_equal : window._lyteUiUtils.i18n( "not.equal", "listview.filter", "Not equal" ),
					begins_with : window._lyteUiUtils.i18n( 'bigins', 'listview.filter', "Starts with" ),
					contains : window._lyteUiUtils.i18n( "contains", 'listview.filter', "Contains" ),
					does_not_contains : window._lyteUiUtils.i18n( "not.contains", "listview.filter", "Does not contains" )
				} 
			} ),

			ltPropNoMatch : prop( __string, { default : window._lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),

			ltPropSearchCount : prop( __number, { default : 8 } ),

			ltPropReset : prop( __boolean, { default : false } ),

			ltPropTempCondition : prop( __object ),

			selected : prop( __string, { default : "" } ),
			renderFirst : prop( __boolean ),
			noResult : prop( __boolean ),

			isSearch : prop( __boolean ),
			hideFirst : prop( __string, { default : "lyteSearchHidden" } )
		};		
	}

    updateInitialConditions() {
		this.setData('ltPropTempCondition', this.data.ltPropCondition);
		this.setData( 'selected', this.data.ltPropCondition.value );

		let condition = this.data.ltPropCondition;
		let selected = this.data.selected;
		let isValid = condition.isValid;

		let renderFirst = false, second = '', match;

		switch( selected ){
			case 'equal':
			case 'not_equal':
			case 'starts_with':
			case 'contains':
			case 'does_not_contains':
				renderFirst = true;
				break;
		}

		this.setData( 'renderFirst', renderFirst );
	}

    static methods() {
        return {
            search : function( arg ){
                this.setData( 'noResult', arg.length == 0 );
            }
        };
    }

    static observers() {
        return {
            reset_obs : function( arg ){
                if( arg.newValue ){
                    this.setData( arg.item, false );
                    this.setData( 'selected', "" );
                }
            }.observes( 'ltPropReset' ),

            condn_obs : function( arg ){
                this.setData( 'selected', arg.newValue.value || "" );
            }.observes( 'ltPropCondition' ),

            selected_obs : function( arg ){
                var selected = arg.newValue,
                renderFirst = true,
                isNeg = false,
                __data = this.data,
                hiddenclass = 'lyteSearchHidden',
                condition = __data.ltPropTempCondition,
                Lc = objectUtils,
                ns = "lyteTextFilter_";

                $L( this.$node ).addClass( ns + selected ).removeClass( ns + arg.oldValue );

                switch( selected ){
                    case 'set' : {
                        renderFirst = false; 
                    }
                    break;
                    case 'not_set' : {
                        renderFirst = false;
                        isNeg = true;
                    }
                    break;
                    case 'does_not_contains' : 
                    case 'not_equal' : {
                        isNeg = true;
                    }
                    break;
                    case '' : {
                        renderFirst  = false;
                    }
                    break;
                }

                this.setData({
                    renderFirst : __data.renderFirst || renderFirst,
                    hideFirst : renderFirst ? '' : hiddenclass
                });

                Lc( condition, 'add', 'isNeg', isNeg );
                Lc( condition, 'add', 'input', '' );
                Lc( condition, 'add', 'type', 'text' );

                if( !renderFirst ){
                    Lc( condition, 'add', 'isValid', !!selected );
                }

                Lc( condition, 'add', 'value', selected );
                Lc( condition, 'add', 'label', __data.ltPropOptions[ selected ] || "" );

            }.observes( 'selected' ),

            obs : function(){
                var __data = this.data,
                condition = __data.ltPropTempCondition,
                value = condition.input,
                isValid = true;

                if( !value && !__data.hideFirst ){
                    isValid = false;
                } 

                objectUtils( condition, 'add', 'isValid', isValid );
                objectUtils( condition, 'add', 'class', ( condition.isValid && value  ) ? 'lyteListFilterSelected' : '' );


            }.observes( 'hideFirst', 'ltPropTempCondition.input' )
        };
    }
}

export { LyteTextFilterComponent };
