import { prop } from "@slyte/core";
import { Component, objectUtils, arrayUtils } from "@slyte/component";
import $L from "@zoho/lyte-dom";

class LyteMultiselectFilterComponent extends Component {
    constructor() {
        super();
    }

    init() {
		if( this.data.ltPropCondition ){
			this.setData( 'ltPropCondition', { type : "multiselect", value : [], isValid : false, selected : [] } );
		}else{
			this.updateInitialConditions();
		}
	}

    updateInitialConditions() {
		this.setData( 'ltPropTempCondition', { type : "multiselect", value : [], isValid : false, selected : [] } );
	}

    data() {
		var __string = "string",
		__array = "array",
		__object = "object",
		__boolean = "boolean",
		__number = 'number';

		return {
			ltPropCondition : prop( __object ),
			ltPropTempCondition : prop( __object ),
			ltPropSearchCount : prop( __number, { default : 8 } ),
			ltPropReset : prop( __boolean, { default : false } ),
			ltPropNoMatch : prop( __string, { default : window._lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),

			ltPropData : prop( __object, { default : {} } ),

			ltPropPicklistOptions : prop( __array, { default : [] } ),
			ltPropRenderContent : prop( __array , { default : [] } ),
			ltPropDynamic : prop( __boolean, { default : true } ),

			picklistOptions : prop( __array ),
			noResult : prop( __boolean ),
			isSearch : prop( __boolean ),
			first : prop( __string, { default : "" } )

		};		
	}

    call_valueobs() {
		var __data = this.data,
		value = __data.first.toLowerCase(),
		picklistOptions = __data.ltPropPicklistOptions,
		fn = function( __arr ){
			var table = this.$node.getElementsByTagName( "lyte-table" )[ 0 ];

			table && table.scrollTable( 0, 0 );

			this.setData({
				isSearch : __data.isSearch || __arr.length >= __data.ltPropSearchCount,
				noResult : __arr.length == 0,
				picklistOptions : __arr
			});
		}.bind( this );

		if( __data.ltPropDynamic ){
			var cb = "onPicklistConstruct";

			if( this.getMethods( cb ) ){
				var ret = this.executeMethod( cb, __data.first, __data.ltPropData, __data.picklistOptions );

				if( ret == false ){
					return;
				} else if( ret ){
					if( ret.then ){
					 	return ret.then( fn );
					}
					return fn( ret );
				}
			}
		}
		
		fn( value ? picklistOptions.filter( function( item ){
			var __name = ( item.name || '' ).toLowerCase(),
			__email = ( item.email || '' ).toLowerCase();

			return __name.indexOf( value ) != -1 || __email.indexOf( value ) != -1;

		}) : picklistOptions );
	}

    uncheck(value, to_value) {
		var __data = this.data,
		picklistOptions = __data.picklistOptions,
		index = picklistOptions.findIndex( function( item ){
			return item.value == value;
		});

		if( index != -1 ){
			var cur = picklistOptions[ index ];

			if( cur.checked != to_value ){
				objectUtils( cur, 'add', 'checked', to_value );
			}
		}
	}

    static methods() {
        return {
            change : function( item, input ){
                var condition = this.data.ltPropTempCondition,
                arr = condition.value,
                selected = condition.selected
                /*,
                args = [ arr ],
                args1 = [ selected ]*/;

                if( input.checked ){
                    // args.push( 'push', item.value );
                    // args1.push( 'push', item );
                    arrayUtils( arr, 'push', item.value );
                    arrayUtils( selected, 'push', item );
                } else {
                    var __index = arr.indexOf( item.value );
                    // args.push( 'removeAt', __index );
                    // args1.push( 'removeAt', __index );
                    arrayUtils( arr, 'removeAt', __index );
                    arrayUtils( selected, 'removeAt', __index );

                }

                // Lyte.arrayUtils.apply( __Lyte, args );
                // Lyte.arrayUtils.apply( __Lyte, args1 );
                
                objectUtils( condition, 'add', 'isValid', !!arr.length );
                objectUtils( condition, 'add', 'class', condition.isValid ? 'lyteListFilterSelected' : '' );

            },

            scrollEnd : function(){
                var cb = 'fetchMoreData',
                __data = this.data;

                return this.getMethods( cb ) && this.executeMethod( cb, __data.first, __data.ltPropData, __data.picklistOptions );
            }
        };
    }

    static observers() {
        return {
            init_obs : function(){
                var __data = this.data,
                picklistOptions = __data.ltPropPicklistOptions || [];

                this.setData({
                    isSearch : picklistOptions.length >= __data.ltPropSearchCount,
                    picklistOptions : picklistOptions,
                    noResult : picklistOptions.length == 0
                });

                if( window._lyteUiUtils.lyteUiIsEmpty(__data.ltPropCondition) ){
                    this.setData('ltPropCondition', { type : "multiselect", value : [], isValid : false, selected : [] } );
                }else{
                    window.updateInitialConditions();
                }

                if( __data.ltPropDynamic ){
                    this.call_valueobs();
                }

            }.observes( 'ltPropPicklistOptions' ).on( 'init' ),

            value_obs : function(){
                this.call_valueobs();
            }.observes( 'first' ),

            cond_obs : function( arg ){
                var new_arr = ( ( arg.newValue || {} ).value || [] ).slice(),
                old_arr = ( ( arg.oldValue || {} ).value || [] ),
                __this = this;

                ( ( arg.oldValue || {} ).value || [] ).forEach( function( item ){
                    if( new_arr.indexOf( item ) == -1 ){
                        __this.uncheck( item, false );
                    }
                });

                new_arr.forEach( function( item ){
                    if( old_arr.indexOf( item ) == -1 ){
                        __this.uncheck( item, true );
                    }
                });
            }.observes( 'ltPropCondition' ),

            content_obs : function(){
                this.call_valueobs();
            }.observes('ltPropRenderContent'),

            reset_obs : function( arg ){
                if( arg.newValue ){

                    var __data = this.data,
                    Lc = objectUtils,
                    ns = 'checked',
                    value = __data.ltPropTempCondition.value,
                    __length = value.length - 1;

                    this.setData( arg.item, false );
                    this.setData( 'first', "" );
                    
                    for( var i = __length; i >= 0; i-- ){
                        var __cur = value[ i ];
                        this.uncheck( __cur, false );
                    }

                    this.call_valueobs();
                }
            }.observes( 'ltPropReset' )
        };
    }
}

export { LyteMultiselectFilterComponent };
