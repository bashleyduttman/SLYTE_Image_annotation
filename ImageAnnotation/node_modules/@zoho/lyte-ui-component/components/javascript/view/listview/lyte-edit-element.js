import { prop } from "@slyte/core";
import $L from "@zoho/lyte-dom";
import { Component } from "@slyte/component";

class LyteEditElementComponent extends Component {
    constructor() {
        super();
    }

    data() {

		var __string = "string",
		__boolean = "boolean",
		__object = "object",
		__number = "number",
		__array = "array";

		return {
			ltPropCellData : prop( __object, { default : {} } ),
			ltPropRowData : prop( __object, { default : {} } ),
			ltPropFormat : prop( __string, { default : "MM-DD-YYYY" } ),
			ltPropTimeFormat : prop( __string, { default : "" } ),

			ltPropEditYield : prop( __boolean, { default : false } ),
			ltPropEditMode : prop( __boolean, { default : false } ),

			ltPropCellIndex : prop( __number ),
			ltPropRowIndex : prop( __number ),

			ltPropValue : prop( __string, { default : "" } ),
			ltPropOptions : prop( __array, { default : [] } ),

			ltPropNoResult : prop( __string, { default : window._lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),

			isOpen : prop( __boolean, { default : false } ),

			styleValue:  prop( __string, { default : "display:none" } ),
			displayValue : prop( __string, { default : "" } ),
			noResult : prop( __string, { default : "lyteSearchHidden" } ),

			properties : prop( __string, { default : '{}' } ),
			button : prop( 'array', { default : [{text:"ok",purpose:"ok",properties:{ariaButton:{}}}] } )
		};		
	}

    didDestroy() {
		clearTimeout( this.__raf );
		clearTimeout( this.__timeout );
	}

    call_blur(evt) {
		var __this = this,
		$node = __this.$node,
		__data = __this.data;

		if( __data.isOpen || ( evt.type && !__data.ltPropEditMode ) ){
			return;
		}

		var cellData = __data.ltPropCellData,
		rowData = __data.ltPropRowData,
		cellIndex = __data.ltPropCellIndex,
		rowIndex = __data.ltPropRowIndex,
		__value = __data.ltPropValue,
		cb = "onBlur";

		__this.getMethods( cb ) && __this.executeMethod( cb, evt, __value, cellData, rowData, cellIndex, rowIndex, $node );
	}

    static actions() {
        return {
            editBlur : function( evt ){

                var r_target = evt.relatedTarget,
                doc = document;

                if( r_target && ( !this.$node.parentNode.contains( r_target ) || r_target == this.$node || this.$node.contains( r_target ) ) ){
                    this.__timeout = setTimeout( function(){
                        if( this.$node.contains( doc.activeElement ) ){
                            return;
                        }
                        this.call_blur( evt );
                    }.bind( this ), 500 );
                } else if( !this.$node.contains( doc.activeElement ) ) {
                    this.call_blur( evt );
                }
            }
        };
    }

    static methods() {
        return {
            dropSelected : function(){
                this.setData( 'displayValue', arguments[ 3 ].getAttribute( 'data-label' ) );
            },

            search : function( arr ){
                this.setData( 'noResult', arr.length ? 'lyteSearchHidden' : "" );
            }
        };
    }

    static observers() {
        return {
            cell_obs : function(){
                clearTimeout( this.__datachange );

                this.__datachange = setTimeout( function(){
                    var __data = this.data,
                    cellData = __data.ltPropCellData || {},
                    rowData = __data.ltPropRowData || {},
                    cb = "onValueConstruct",
                    newValue = rowData[ cellData.prop ],
                    is_not_editable = cellData.editable == false,
                    __class = "lyteFilterDisablePointer",
                    $node = $L( this.$node );

                    if( this.getMethods( cb ) ){
                        newValue = this.executeMethod( cb ) || newValue;
                    }

                    this.setData({
                        isOpen : false,
                        properties : JSON.stringify( cellData.properties || {} ),
                        ltPropValue : newValue
                    });
                }.bind( this ), 0 );	

            }.observes( 'ltPropCellData', 'ltPropRowData' ).on( 'init' ),

            edit_obs : function( arg ){
                var final = "display:none";

                if( arg.newValue ){
                    var __data = this.data,
                    cellData = ( __data.ltPropCellData || {} );

                    this.setData( arg.item, ( __data.ltPropRowData || {} )[ cellData.prop ] || "" )

                    if( cellData.dataType == "multiselect" ){
                        var cb = "onPicklistConstruct",
                        fn = function( arr ){
                            this.setData( 'ltPropOptions', arr );

                            if( arr.length == 0 ){
                                this.setData( 'noResult', '' );
                            }

                            switch( cellData.dataType ){
                                case 'multiselect' : {
                                    var __filter = arr.filter( function( item ){
                                        return item.value == __data.ltPropValue;
                                    })[ 0 ];

                                    if( __filter ){
                                        this.setData( 'displayValue', __filter.label || '' );
                                    }
                                }
                                break;
                            }
                        }.bind( this );

                        if( this.getMethods( cb ) ){
                            var ret = this.executeMethod( cb, "", __data.ltPropCellData, __data.ltPropOptions );

                            if( ret == false ){
                                return fn( [] );
                            } else if( ret ){
                                if( ret.then ){
                                  ret.then( fn );
                                } else {
                                  fn( ret );
                                }
                            }
                        }
                    }

                    var __elem = this.$node.getElementsByClassName( 'lyteListviewEditElement' )[ 0 ];

                    if( __elem ){
                        window.requestAnimationFrame( function(){
                            __elem.focus({ preventScroll : true });
                        });
                    }

                    final = "";
                } else {
                    this.call_blur( {} );
                }

                this.setData( 'styleValue', final );

            }.observes( 'ltPropEditMode' )
        };
    }
}

export { LyteEditElementComponent };