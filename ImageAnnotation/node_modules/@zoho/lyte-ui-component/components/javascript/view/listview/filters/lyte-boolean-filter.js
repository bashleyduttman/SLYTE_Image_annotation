import { prop } from "@slyte/core";
import $L from "@zoho/lyte-dom";
import { Component, objectUtils } from "@slyte/component";

class LyteBooleanFilterComponent extends Component {
    constructor() {
        super();
    }

    init() {
		var __data = this.data;
		__data.isSearch = Object.keys( __data.ltPropOptions ).length >= __data.ltPropSearchCount;
		this.setData( 'ltPropCondition', { isValid : false, isNeg : false, value : "", label : "", type : "boolean" } );
	}

    data() {
		var __string = "string",
		__array = "array",
		__object = "object",
		__boolean = "boolean",
		__number = 'number';

		return {
			ltPropCondition : prop( __object ),
			ltPropPlaceholder : prop( __string, { default : window._lyteUiUtils.i18n( 'none', "listview.filter", "None" ) } ),
			ltPropOptions : prop( __object, { default : {
					is : window._lyteUiUtils.i18n( "selected", void 0, "Selected" ),
					is_not : window._lyteUiUtils.i18n( "not.selected", "listview.filter", "Not selected" )
				} 
			} ),

			ltPropNoMatch : prop( __string, { default : window._lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),

			ltPropSearchCount : prop( __number, { default : 8 } ),

			ltPropReset : prop( __boolean, { default : false } ),

			selected : prop( __string, { default : "" } ),
			noResult : prop( __boolean ),

			isSearch : prop( __boolean )
		};		
	}

    static methods() {
        return {
            search : function( arg ){
                this.setData( 'noResult', arg.length == 0 );
            }
        };
    }

    static observers() {
        return {
            condn_obs : function( arg ){
                this.setData( 'selected', arg.newValue.value || "" );
            }.observes( 'ltPropCondition' ),

            reset_obs : function( arg ){
                if( arg.newValue ){
                    this.setData( arg.item, false );
                    this.setData( 'selected', "" );
                }
            }.observes( 'ltPropReset' ),

            selected_obs : function( arg ){
                var selected = arg.newValue,
                __data = this.data,
                condition = __data.ltPropTempCondition,
                Lc = objectUtils,
                ns = "lyteTextFilter_";

                $L( this.$node ).addClass( ns + selected ).removeClass( ns + arg.oldValue );

                Lc( condition, 'add', 'isNeg', selected == "is_not" );
                Lc( condition, 'add', 'isValid', !!selected );
                Lc( condition, 'add', 'value', selected );
                Lc( condition, 'add', 'label', __data.ltPropOptions[ selected ] || "" );
                Lc( condition, 'add', 'class', condition.isValid ? 'lyteListFilterSelected' : '' );

            }.observes( 'selected' )
        };
    }
}

export { LyteBooleanFilterComponent };
