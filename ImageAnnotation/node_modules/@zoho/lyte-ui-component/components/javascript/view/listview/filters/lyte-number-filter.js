import { prop } from "@slyte/core";
import { Component, objectUtils } from "@slyte/component";
import $L from "@zoho/lyte-dom";

class LyteNumberFilterComponent extends Component {
    constructor() {
        super();
    }

    init() {
		var __data = this.data;
		__data.isSearch = Object.keys( __data.ltPropOptions ).length >= __data.ltPropSearchCount;
		__data.hideFirst = __data.hideSecond = 'lyteSearchHidden';

		if( window._lyteUiUtils.lyteUiIsEmpty( __data.ltPropCondition ) ){
			this.setData( 'ltPropCondition', { input : "", start_diff : 0, end_diff : 0, start : -Infinity, end : Infinity, isNeg : false, isValid : false, value : "", label : "", type : "number" } );
		}else{
			this.updateInitialConditions( );
		}
	}

    updateInitialConditions() {
		this.setData( 'ltPropTempCondition', this.data.ltPropCondition );
		this.setData( 'selected', this.data.ltPropCondition.value  );

		let condition = this.data.ltPropCondition;
		let selected = this.data.selected;
		let isValid = condition.isValid;

		let first = '', second = '', match;

		switch( selected ){
			case 'is':
			case 'is_not':
				first = condition.input;
			break;
			case 'greater_than':
				first = condition.input.match(/> (.*)/)[1]
			break;
			case 'greater_than_or_equal':
				first = condition.input.match(/>= (.*)/)[1];
			break;
			case 'less_than':
				first = condition.input.match(/< (.*)/)[1];
			break;
			case 'less_than_or_equal':
				first = condition.input.match(/<= (.*)/)[1];
			break;
			case 'between':
			case 'not_between':
				match = condition.input.match(/(\d*) <= && (\d*) >=/)
				first = match[1];
				second = match[2];
			break;
			case 'is_empty':
			case 'is_not_empty':
			break;
		}

		first && this.setData( {
			'first' : first,
			'renderFirst' : true,
			'hideFirst' : ''
		} ) ;

		second && this.setData( {
			'second' : second,
			'renderSecond' : true,
			'hideSecond' : ''
		} );
		
	}

    data() {
		var __string = "string",
		__array = "array",
		__object = "object",
		__boolean = "boolean",
		__number = 'number';

		return {
			ltPropCondition : prop( __object ),
			ltPropPlaceholder : prop( __string, { default : "None" } ),
			ltPropOptions : prop( __object, { default : {
				is : window._lyteUiUtils.i18n( 'equal', 'listview.filter', "Equals to" ),
				is_not : window._lyteUiUtils.i18n( 'not.equal', 'listview.filter', "Not equals to" ),
				between : window._lyteUiUtils.i18n( "between", "listview.filter", "Between" ),
				less_than : window._lyteUiUtils.i18n( "less.than", "listview.filter", "Less than" ),
				greater_than : window._lyteUiUtils.i18n( "greater.than", "listview.filter", "Greater than" ),
				less_than_or_equal : window._lyteUiUtils.i18n( "less.than.or.equal", "listview.filter", "Less than or equal" ),
				greater_than_or_equal : window._lyteUiUtils.i18n( "greater.than.or.equal", "listview.filter", "Greater than or equal" ),
				not_between : window._lyteUiUtils.i18n( "not.between", "listview.filter", "Not between" ),
				is_empty : window._lyteUiUtils.i18n( 'is.empty', 'listview.filter', "Is empty" ),
				is_not_empty : window._lyteUiUtils.i18n( 'is.not.empty', 'listview.filter', "Is not empty" )
			} } ),

			ltPropNoMatch : prop( __string, { default : window._lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),
			ltPropMin : prop( __number ),
			ltPropMax : prop( __number ),

			ltPropSearchCount : prop( __number, { default : 8 } ),

			ltPropReset : prop( __boolean, { default : false } ),
			ltPropTempCondition : prop( __object ),

			selected : prop( __string, { default : "" } ),
			renderFirst : prop( __boolean ),
			renderSecond : prop( __boolean ),
			noResult : prop( __boolean ),

			isSearch : prop( __boolean ),

			first : prop( __string, { default : "" } ),
			second : prop( __string, { default : "" } ),
			isNeg : prop( __boolean, { default : false } ),
			hideFirst : prop( __string ),
			hideSecond : prop( __string )
		};		
	}

    update_value(__first, __second) {
		var __data = this.data,
		condition = __data.ltPropTempCondition,
		hideFirst = __data.hideFirst,
		hideSecond = __data.hideSecond,
		isValid = false,
		inf = Infinity,
		startValue = "",
		endValue = "",
		Lc = objectUtils,
		start_diff = 0,
		end_diff = 0,
		input = "";

		if( hideFirst && hideSecond ){
			isValid = __first != "";
		} else if( hideSecond ){
			isValid = !!__first;
		} else {
			isValid = !!__first && !!__second;
		}

		if( isValid ){
			switch( __data.selected ){
				case 'is' : 
				case 'is_not' : {
					input = startValue = endValue = __first;
				}
				break;
				case 'greater_than' : {
					startValue = __first;
					endValue = inf;
					start_diff = -1;

					input = "> " + __first;
				}
				break;
				case 'greater_than_or_equal' : {
					startValue = __first;
					endValue = inf;

					input = ">= " + __first;
				}
				break;
				case 'less_than' : {
					endValue = __first;
					startValue = -inf;
					end_diff = -1;

					input = "< " + __first;
				}
				break;
				case 'less_than_or_equal' : {
					endValue = __first;
					startValue = -inf;

					input = "<= " + __first;
				}
				break;
				case 'between' : 
				case 'not_between' : {
					startValue = __first;
					endValue = __second;

					input = __first + " <= && " + __second + " >=" 
				}
				break;
				case 'is_empty' : 
				case 'is_not_empty' : {
					startValue = -inf;
					endValue = inf;
				}
				break;
			}
		} else {
			startValue = endValue = '';
		}

		Lc( condition, 'add', 'start', startValue );
		Lc( condition, 'add', 'end', endValue );
		Lc( condition, 'add', 'isValid', isValid );
		// condition['isValid']=isValid;
		Lc( condition, 'add', 'start_diff', start_diff );
		Lc( condition, 'add', 'end_diff', end_diff );
		Lc( condition, 'add', 'input', input );
		Lc( condition, 'add', 'type', "number" );
		Lc( condition, 'add', 'class', condition.isValid ? 'lyteListFilterSelected' : '' );
	}

    static methods() {
        return {
            search : function( arg ){
                this.setData( 'noResult', arg.length == 0 );
            }
        };
    }

    static observers() {
        return {
            condn_obs : function( arg ){
                this.setData( 'selected', (arg.newValue && arg.newValue.value) || "" );
            }.observes( 'ltPropCondition'),

            reset_obs : function( arg ){
                if( arg.newValue ){
                    this.setData( arg.item, false );
                    this.setData( 'selected', "" );
                }
            }.observes( 'ltPropReset' ),

            selected_obs : function( arg ){
                var selected = (arg && arg.newValue) || this.data.selected,
                renderFirst = false,
                renderSecond = false,
                isNeg = false,
                __data = this.data,
                hiddenclass = 'lyteSearchHidden',
                condition = __data.ltPropTempCondition,
                Lc = objectUtils,
                inf = Infinity,
                ns = "lyteNumberFilter_";

                $L( this.$node ).addClass( ns + selected ).removeClass( ns + ( (arg && arg.oldValue) || "" ) );

                switch( selected ){
                    case 'is' : {
                        renderFirst = true;
                    }
                    break;
                    case 'is_not' : {
                        renderFirst = true;
                        isNeg = true;
                    }
                    break;
                    case 'is_empty' : {
                        isNeg = true;
                    }
                    break;
                    case 'between' : {
                        renderFirst = renderSecond = true;
                    }
                    break;
                    case 'not_between' : {
                        isNeg = renderFirst = renderSecond = true;
                    }
                    break;
                    case 'less_than' :
                    case 'greater_than' :
                    case 'less_than_or_equal' :
                    case 'greater_than_or_equal' : {
                        renderFirst = true;
                    }
                    break;
                    case 'in_the_last' : {
                        window.render_drop = true;
                    }
                    break;
                }

                this.setData({
                    renderFirst : __data.renderFirst || renderFirst,
                    renderSecond : __data.renderSecond || renderSecond,
                    first : "",
                    second : "",
                    hideFirst : renderFirst ? '' : hiddenclass,
                    hideSecond : renderSecond ? '' : hiddenclass
                });

                Lc( condition, 'add', 'isNeg', isNeg );

                Lc( condition, 'add', 'value', selected );
                Lc( condition, 'add', 'label', __data.ltPropOptions[ selected ] || "" );

                this.update_value( '', '' );
            }.observes( 'selected' ),

            start_end_obs : function( arg ){
                var __data = this.data;

                this.update_value(__data.first, __data.second );
            }.observes( 'first', 'second' )
        };
    }
}

export { LyteNumberFilterComponent };
