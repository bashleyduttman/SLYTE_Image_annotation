import { objectUtils, arrayUtils } from "@slyte/component";
import { prop } from "@slyte/core";
import { Component, LyteUiComponentComponentRegistry } from "../component.js";

class LyteTimelineViewComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropCurrentDate : prop('object',{default: new Date()}),
			ltPropView : prop('string' ,{default : 'month'} ),
			ltPropArrowKey : prop('string',{default : ''}),
			ltPropWorkingDay : prop('boolean',{default : false}),
			ltPropDateWidth : prop('object',{default : { 'day' :  160 , 'month' : 30 , 'week' : 20 , 'quarter' : 160 }}),
			ltPropFormat : prop('string',{default : 'DD-MM-YYYY hh:mm A'}),
			ltPropResizeEvent : prop('boolean',{default:false }),
			ltPropGroupby : prop('array',{default : undefined}),
			ltPropGroup : prop('boolean',{default : false}),
			ltPropEvent : prop('array',{default:[]}),
			ltPropSortKey: prop('string',{default:'start'}),
			groupByData : prop('array',{default:[]}),
			ltPropManipulatedEvent : prop('array',{default:[]}),
			timeline : prop('array',{default : []}),
			populateObject : prop('object',{default:{}}),
			EventIndex : prop('number',{default:0}),
			populateIndex : prop('number',{default:0}),
			DisplayEvent : prop('array'),
			rightIntersectionObserver : prop('object',{default : {}}),
			leftIntersectionObserver : prop('object',{default : {}}),
			monthDays: prop("array", {default: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]}),
			leftpoint : prop('object',{default: new Date()}),
			headerArray : prop('array',{default : []}),
			subheader : prop('array',{default : []}),
			DateArray : prop('array',{default : []}),
			'months' :  prop( 'array', { default : [ 'January', 'February', 'March', 'April', 'May','June' ,'July','August','September','October','November','December' ] } ),
			prevScroll: prop('number',{default:0})
		};		
	}

    init() {
        var lyteSelf = this;
        var _this = this;
        this.$node.removeEvent = function( evtId ){
			var _this = this.component;
			var timelineDiv = _this.$node.querySelector('div.timelineViewContentElem');
			var events = _this.getData('ltPropEvent');
			var delIdx = events.findIndex(function( elem ){
				return elem.id === evtId ? true : false;
			});
			if( delIdx !== -1 ){
				events.splice( delIdx, 1 );
			}
			_this.updatePopulateObj( timelineDiv.scrollTop );
		}
        this.$node.updateEvent = function( evtId  , key , value){
			var timelineDiv = _this.$node.querySelector('div.timelineViewContentElem');
			var events = _this.getData('ltPropEvent');
			var delIdx = events.findIndex(function( elem ){
				return elem.id === evtId ? true : false;
			});
			objectUtils(events[delIdx],'add',key,value);
			_this.updatePopulateObj( timelineDiv.scrollTop );
		}
        this.$node.addEvent = function( evt ){
			var _this = this.component;
			var timelineDiv = _this.$node.querySelector('div.timelineViewContentElem');
			var events = _this.getData('ltPropManipulatedEvent');
			if(Array.isArray(evt)){
				events = events.concat(evt);
			}else{
				events.push(evt);
			}	
			_this.setData('ltPropEvent',events);
			_this.setIndex(  _this.getData('ltPropManipulatedEvent') );
			_this.updatePopulateObj( timelineDiv.scrollTop );

		}

        this.$node.addGroupEvent = function( groupHead , events , isloadmore){
			var groupArr = _this.getData('ltPropGroupby');
			var index = _this.groupIndex( groupHead );
			var group = groupArr[index];
			if(group.children){
				
				arrayUtils(group.children,'push',events);
			}else{
				objectUtils(group,'add','children',[]);
				arrayUtils(group.children,'push',events);
			}
			_this.setIndex(group.children);
			objectUtils(group,'add','rowCount',group.children.length+1);
			objectUtils(group,'add','loadmore',isloadmore);
			$L.fastdom.mutate(function(){
				_this.setleftTopPosition();
				_this.setArrow();
			});
		}
        this.$node.deleteGroupEvent = function( groupHead , eventid ){
			var groupArr = _this.getData('ltPropGroupby');
			var index = _this.groupIndex( groupHead );
			var group = groupArr[index];
			if(group.children){
				var event = window.$u.findWhere(group.children,{'id':eventid});
				arrayUtils(group.children,'removeAt',event.index-1,1);
			}
			objectUtils(group,'add','rowCount',group.children.length+1);
			$L.fastdom.mutate(function(){
				_this.setleftTopPosition();
				_this.setArrow();
			});
		}
        this.$node.updateGroupEvent = function( groupHead , eventid , key , value){
			var groupArr = _this.getData('ltPropGroupby');
			var index = _this.groupIndex( groupHead );
			var group = groupArr[index];
			if(group.children){
				var event = window.$u.findWhere(group.children,{'id':eventid});
				objectUtils(group.children[index],'add',key,value);
			}
			$L.fastdom.mutate(function(){
				_this.setleftTopPosition();
				_this.setArrow();
			});
		}
        this.$node.today = function(){
			
			var current_date = $L.moment(new Date());
			while(!_this.isWorkingDayOnly(current_date.getDObj())){
				current_date.add(1, 'date', true);
			}
			var date = current_date.format('DD-MM-YYYY');	
			var Date_div = $L('[data-date="'+ date +'"]',_this.$node)[0];
			var scroll = $L('.lyteSchedulerTimeLineWrapper',_this.$node)[0];
			_this.setTimeline(new Date());
			$L.fastdom.mutate(function(){
				scroll.scrollLeft = 0;
				date = current_date.format('DD-MM-YYYY');
				Date_div = $L('[data-date="'+ date +'"]',_this.$node)[0];
				scroll.scrollLeft = Date_div.getBoundingClientRect().left - scroll.getBoundingClientRect().left - scroll.offsetWidth/2;;
				_this.intializeInfinteScroll(current_date,_this.getData('ltPropView'));
			});
		}
        this.$node.navLeft = function(){
			var scroll = $L('.lyteSchedulerTimeLineWrapper',_this.$node)[0];
			var view = _this.getData('ltPropView');
			var maxNoOfDate = _this.findNoOfDate(scroll,_this.getData('ltPropDateWidth')[view]);
			scroll.scrollLeft -=  (maxNoOfDate-2) * $L('.lyteSchedulerDate')[0].offsetWidth;
		}
        this.$node.navRight = function(){
			var scroll = $L('.lyteSchedulerTimeLineWrapper',_this.$node)[0];
			var view = _this.getData('ltPropView');
			var maxNoOfDate = _this.findNoOfDate(scroll,_this.getData('ltPropDateWidth')[view]);
			scroll.scrollLeft +=  (maxNoOfDate-2) * $L('.lyteSchedulerDate')[0].offsetWidth;
		}
    }

    generateEvent() {
		var view = this.getData('ltPropView');
		var events = window.$u.clone(this.getData('ltPropEvent'));
		var group = this.getData('ltPropGroup');	
		if(!group){	
			this.setIndex( events );
			this.setData('ltPropManipulatedEvent',events);
			this.intializeVerticalScroll();
			this.setleftTopPosition();
			this.addEventForVerticalScroll();
		}
	}

    groupIndex(event) {
		var groupArr = this.getData('ltPropGroupby');
		var returnVal = -1;
		groupArr.forEach(function(group, index){
			if( event ===  group.systemValue ){
				returnVal = index;
			}
		});
		return returnVal;
	}

    removerIntersectionObserver() {
		var leftObserver = this.getData('leftIntersectionObserver');
		if( leftObserver ){
			leftObserver.observer.unobserve(leftObserver.target);
		}
		var rightObserver = this.getData('leftIntersectionObserver');
		if( rightObserver ){
			rightObserver.observer.unobserve(rightObserver.target);
		}
	}

    sortEvents(events) {
		var key = this.getData('ltPropSortKey');
		
		if( this.getMethods('sortFn') ){	//user should return a fn inside their callback fn
			var _this = this;
			events.sort( function(eventA, eventB){
				return _this.executeMethod('sortFn',eventA,eventB); 
			});
		}
		else if( key === 'start' || key === 'end' ){
			events.sort( this.sortFnBasedOnTime.bind(this) );
		}
		else{
			events.sort( this.sortFnBasedOnNumbers.bind(this) );
		}
		return events;
	}

    sortFnBasedOnTime(evtA, evtB) {
		var key = this.getData('ltPropSortKey');
		var format = this.getData('ltPropFormat');
		
		var objA = $L.moment( evtA[key], format );
		var objB = $L.moment( evtB[key], format );
		
		if( objA && objB ){
			if( objA.isSame( objB ) ){ 
				return 0;
			}
			if( !objA.fromNow( objB ).past ) {
				return -1;
			}
			else{
				return 1;
			}
		  
		}
		
		return 0;
	}

    sortFnBasedOnNumbers(evtA, evtB) {
		var key = this.getData('ltPropSortKey');
		
		var objA = evtA[key];
		var objB = evtB[key];
		
		if( objA && objB ){
			if( objA === objB ){ 
				return 0;
			}
			if( objA < objB ) {
				return -1;
			}
			else{
				return 1;
			}
		  
		}
		
		return 0;
	}

    setIndex(events) {
		var value = 3;
		if( this.getData('ltPropView') === 'quarter'){	
			value = 4;
		}
		if( this.getData('ltPropGroupby') ){
			value = 1;
		}
		for( var ind=0;ind<events.length;ind++ ){
			objectUtils( events[ind], 'add', 'index', value++);
		}
	}

    setTimeline(date) {
		var view = this.getData('ltPropView');
		var currentDate = date ? new Date(date.toString()) : new Date(this.getData('ltPropCurrentDate').toString());
		var outerDiv = $L('.lyteSchedulerTimeLineWrapper')[0];
		var maxNoOfDate = this.findNoOfDate(outerDiv,this.getData('ltPropDateWidth')[view]);
		var isweek = false;
		var isQuarterView = false;
		if( view == 'month' || view == 'day' ){
			maxNoOfDate *= 6;
			currentDate.setDate( currentDate.getDate() - ( maxNoOfDate / 2 ) );
			var startDate = new Date( currentDate.toString() );
			currentDate.setMonth(currentDate.getMonth()-1);
			currentDate = $L.moment(currentDate).startOf('month').getDObj();
			maxNoOfDate += this.daysInBetween(startDate,currentDate);
		}else if( view == 'week' ){
			maxNoOfDate *= 6;
			currentDate.setDate( currentDate.getDate() - ( maxNoOfDate / 2 ) );
			var startDate = new Date( currentDate.toString() );
			isweek = true;
			currentDate = this.startOfWeek(currentDate);
			maxNoOfDate += this.daysInBetween(startDate,currentDate);
		}else if(view == 'quarter'){
			maxNoOfDate *= 6;
			currentDate.setMonth( currentDate.getMonth() - ( maxNoOfDate / 2  ) );
			var startDate = new Date( currentDate.toString() );
			isQuarterView = true;
			currentDate = new Date(currentDate.getFullYear(),0,1);
			maxNoOfDate += startDate.getMonth() - currentDate.getMonth();
		}
		var timelineHeader = this.generateTimeline( currentDate , maxNoOfDate , view , isweek  , isQuarterView);
		this.setData('headerArray',timelineHeader.headerArray);
		this.setData('timeline',timelineHeader.timeline);
		this.setData('subheader',timelineHeader.subheader);
	}

    intializeVerticalScroll() {
		var event =  this.getData('ltPropManipulatedEvent');
		var populateObject = {};
		var eventShowed = Math.round(( $L('.timelineViewContentElem')[0].offsetHeight - $L('.timelineHeaderMonthElem')[0].offsetHeight - $L('.timelineHeaderElem')[0].offsetHeight)/ 40) + 3;
		for(var index = 0; index < eventShowed ;index++){
			populateObject['elemt'+index] = event[index]; 
		}
		this.setData('populateObject',populateObject);
		this.setData('EventIndex',index);
		this.setData('TotalRow',index);
	}

    intializeInfinteScroll(date, view) {
		var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
		var currentDate = $L.moment( date );
		if(view == 'quarter'){
			currentDate = currentDate.startOf('month').format('DD-MM-YYYY');
		}else{
			currentDate = currentDate.format('DD-MM-YYYY');
		}
		var _this = this;
		var timeline = this.getData('timeline');
		scroll.addEventListener('scroll',function(){
			var maxScrollHeight = scroll.scrollHeight - scroll.offsetHeight;
			var scrollTop = scroll.scrollTop;
			if( _this.getMethods('onEventScrollEnd')  && (maxScrollHeight - 50) < scrollTop){
				_this.executeMethod('onEventScrollEnd',_this.$node,_this.getData('ltPropGroup'));
			}
			_this.setArrow();
		})
		setTimeout(function(){
			var leftHead  = $L('[data-date="'+ timeline[ 0 ].format('DD-MM-YYYY') +'"]')[0];
			var rightHead  = $L('[data-date="'+ timeline[ timeline.length - 1 ].format('DD-MM-YYYY') +'"]')[0];
			_this.rightIntersectionObserver(rightHead,view);
			_this.leftIntersectionObserver(leftHead,view);
		});
	}

    leftIntersectionObserver(leftHead, view) {
		let options = {
			root: this.$node,
			thershold : 1.0
		  };
		var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
		var observer = new window.IntersectionObserver(handleIntersect, options);
		observer.observe(leftHead);
		this.setData('leftIntersectionObserver',{'observer': observer,'target': leftHead});
		var _this = this;
		function handleIntersect(entries, observer) {
			var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
			var entry = entries[0];
			if(entry.intersectionRatio > 0 || entry.isIntersecting){
				observer.unobserve(entry.target);
				_this.UpdateOnLeft(scroll,view,entry.target);
				_this.setleftTopPosition();
			}
		}
		return observer;
	}

    UpdateOnRight(scroll, view) {
        var lyteSelf = this;
        var view = this.getData('ltPropView');
        var timeline = this.getData('timeline');
        var headerArray = this.getData('headerArray');
        var subheader = this.getData('subheader');
        var date = new Date( timeline[ timeline.length - 1  ].getDObj().toString() );
        var maxNoOfDate = this.findNoOfDate(scroll,this.getData('ltPropDateWidth')[view]);
        var isWeek = false;
        var isQuarterView = false;
        if( view == 'month'){
			date.setDate(date.getDate() +1);
		}else if(view == 'day' ){
			date.setDate(date.getDate() +1);
		}else if(view == 'week'){
			date.setDate(date.getDate() +1);
			isWeek = true;
		}else{
			date.setMonth(date.getMonth() +1);
			isQuarterView = true;
		}
        var startIndex = parseInt(headerArray[ headerArray.length - 1  ].startColumn) + parseInt(headerArray[ headerArray.length - 1  ].endColumn) - 1;
        var timelineHeader = this.generateTimeline( date , maxNoOfDate , view, isWeek, isQuarterView , startIndex );
        arrayUtils(timeline,'insertAt',timeline.length  ,timelineHeader.timeline);
        arrayUtils(headerArray,'insertAt',headerArray.length ,timelineHeader.headerArray);
        timelineHeader.subheader.forEach(function(item){
			var flag = false;
			subheader.forEach(function(header){
				if(header.year == item.year ){
					objectUtils( header,'add','endColumn', header.endColumn + item.endColumn );
					flag = true;
					return;
				}
			})
			if(!flag){
				arrayUtils(subheader,'insertAt',subheader.length,item);
			}

		});
        var count = this.removeDateSection( 0 , view , maxNoOfDate );
        scroll.scrollLeft -= count * $L('.lyteSchedulerDate')[0].offsetWidth;
        var _this = this;
        $L.fastdom.mutate(function(){
			var leftHead  = $L('[data-date="'+ timeline[ 0 ].format('DD-MM-YYYY') +'"]')[0];
			var rightHead  = $L('[data-date="'+ timeline[ timeline.length - 1 ].format('DD-MM-YYYY') +'"]')[0];
			_this.rightIntersectionObserver(rightHead,view);
			_this.leftIntersectionObserver(leftHead,view);
		});
    }

    rightIntersectionObserver(rightHead, view) {
		var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
		
		let options = {
			root: this.$node,
			thershold : 1.0
		};
		var observer = new window.IntersectionObserver(handleIntersect, options);
		observer.observe(rightHead);
		this.setData('rightIntersectionObserver',{'observer': observer,'target': rightHead});
		var _this = this;
		function handleIntersect(entries, observer) {
			var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
			var entry = entries[0];
			if(entry.isIntersecting){
				observer.unobserve(entry.target);
				_this.UpdateOnRight(scroll);
				_this.setleftTopPosition();
			}
			
		}
		return observer;
	}

    UpdateOnLeft(scroll, view, target) {
        var lyteSelf = this;
        var view = this.getData('ltPropView');
        var timeline = this.getData('timeline');
        var headerArray = this.getData('headerArray');
        var subheader = this.getData('subheader');
        var date = new Date( timeline[ 0 ].getDObj().toString() );
        var maxNoOfDate = this.findNoOfDate(scroll,this.getData('ltPropDateWidth')[view]);
        var isWeek = false;
        var isQuarterView = false;
        if( view == 'month' ){
			date.setDate( date.getDate() - maxNoOfDate );
		}else if(view == 'day'){
			date.setDate( date.getDate() - maxNoOfDate );
			var startDate = new Date( date.toString() );
			date =  new Date(date.getFullYear(), date.getMonth(), 1);
			maxNoOfDate +=  this.daysInBetween(startDate,date);
		}else if(view == 'week'){
			date.setDate( date.getDate() - maxNoOfDate );
			var startDate = new Date( date.toString() );
			date = this.startOfWeek(date);
			maxNoOfDate +=  this.daysInBetween(startDate,date);
			isWeek = true;
		}else{
			date.setMonth( date.getMonth() - maxNoOfDate );
			isQuarterView = true;
		}
        var timelineHeader = this.generateTimeline( date , maxNoOfDate , view, isWeek, isQuarterView );
        var headerEndColumn = timelineHeader.headerArray;
        headerEndColumn = headerEndColumn[headerEndColumn.length - 1];
        headerArray.forEach(function(item ,index){
			objectUtils( item,'add','startColumn', item.startColumn + timelineHeader.timeline.length );
		});
        subheader.forEach(function(item ,index){
			objectUtils( item,'add','startColumn', item.startColumn + timelineHeader.timeline.length  );
		})
        arrayUtils(headerArray,'insertAt',0,timelineHeader.headerArray);
        arrayUtils(timeline,'insertAt',0,timelineHeader.timeline);
        arrayUtils(subheader,'insertAt',0,timelineHeader.subheader);
        this.removeDateSection( isQuarterView ? subheader.length - 1 : headerArray.length - 1  , view , maxNoOfDate);
        var _this = this;
        $L.fastdom.mutate(function(){
			if(_this.getData('ltPropGroup')){
				scroll.scrollLeft += timelineHeader.timeline.length * $L('.lyteSchedulerDate')[0].offsetWidth;
			}else{
				scroll.scrollLeft += timelineHeader.timeline.length * $L('.lyteSchedulerDate')[0].offsetWidth;
			}
			var leftHead  = $L('[data-date="'+ timeline[ 0 ].format('DD-MM-YYYY') +'"]')[0];
			var rightHead  = $L('[data-date="'+ timeline[ timeline.length - 1 ].format('DD-MM-YYYY') +'"]')[0];
			_this.rightIntersectionObserver(rightHead,view);
			_this.leftIntersectionObserver(leftHead,view);
		});
    }

    updatesubHeader(subheader, index) {
        var lyteSelf = this;
        subheader.forEach(function(item ){
			objectUtils( item ,'add','startColumn', item.startColumn - index );
		})
        return subheader;
    }

    removeDateSection(removePos, view, count) {
        var lyteSelf = this;
        var timeline = this.getData('timeline');
        var headerArray = this.getData('headerArray');
        var subheader = this.getData('subheader');
        var postionHeader =  headerArray[removePos];
        if(removePos == 0){
			var index = 0;
			while(index < count){
				if(view == 'quarter'){
					var firstHeader = subheader[0];
					arrayUtils(timeline,'removeAt',0,firstHeader.endColumn);
					arrayUtils(headerArray,'removeAt',0,(firstHeader.endColumn/3) );
					index  += firstHeader.endColumn;
					arrayUtils(subheader,'removeAt',0,1);
					firstHeader = subheader[0];
					subheader = this.updatesubHeader(subheader,index);
				}else{

					var firstHeader = headerArray[0];
					arrayUtils(timeline,'removeAt',0,firstHeader.endColumn);
					index  += firstHeader.endColumn;
					arrayUtils(headerArray,'removeAt',0,1);
					firstHeader = headerArray[0];
				}
 			}
			headerArray.forEach(function(item ){
				objectUtils( item ,'add','startColumn', item.startColumn - index );
			})
		}else{
			var index = 0 ;
			while(index < count){
				if(view == "quarter"){
					var lastHeader = subheader[removePos];
					arrayUtils(timeline,'removeAt', timeline.length - lastHeader.endColumn , lastHeader.endColumn );
					arrayUtils(headerArray,'removeAt',headerArray.length -  (lastHeader.endColumn/3) , lastHeader.endColumn/3);
					index += lastHeader.endColumn;
					arrayUtils(subheader,'removeAt',removePos,1);
					index++;
					removePos = subheader.length - 1;
				}else{
					var lastHeader = headerArray[removePos];
					arrayUtils(timeline,'removeAt', timeline.length - lastHeader.endColumn , lastHeader.endColumn );
					index += lastHeader.endColumn;
					arrayUtils(headerArray,'removeAt',removePos,1);
					index++;
					removePos = headerArray.length - 1;
				}
				
			}
		}
        return index ;
    }

    daysInBetween(startdate, endDate) {
		return Math.round((startdate.getTime() - endDate.getTime()) / (1000 * 3600 * 24))
	}

    startOfWeek(date) {
		var diff = date.getDate() - date.getDay();
		return new Date(date.setDate(diff));
  	}

    getDateSection(timeline, date, condition, view) {
		while( condition == this.getSectionMargin( date , view )  ){
			if(this.isWorkingDayOnly(date)){
				timeline.push($L.moment(new Date( date.toString() )));	
			}
			if(view == 'quarter'){
				date.setMonth(date.getMonth()+1);
			}else{
				date.setDate(date.getDate()+1);
			}
		}
		return timeline;
	}

    isWorkingDayOnly(date) {
		if(this.getData('ltPropWorkingDay')){
			return !(date.getDay() == 0 || date.getDay() == 6);
		}else{
			return	true;
		}
	}

    getSectionMargin(date, view) {
		if(view == 'month' || view == 'day'){
			return date.getMonth();
		}else if (view == 'week'){
			return this.findWeekoftheYear(date);
		}else if (view == 'quarter'){
			return this.findWhichQuarter(date);
		}
	}

    generateTimeline(date, maxNoOfDate, view, isweek, isQuarterView, startIndex) {
		var timeline = [];
		startIndex =  startIndex ? startIndex : 0;
		var index = startIndex;
		maxNoOfDate += startIndex;
		var headerArray = [];
		var headerIndex = 0;
		var condition ;
		condition = this.getSectionMargin( date , view );
		var subheader = [];
		var subheaderIndex = 0;
		var year = date.getFullYear();
		subheader[subheaderIndex++] = { year : date.getFullYear(), startColumn : (index+1) };
		while( index < maxNoOfDate  ){
			headerArray[headerIndex] = { month : date.getMonth(), year : date.getFullYear(), startColumn : ( index + 1 )}
			if(isweek){
				headerArray[headerIndex].week = this.findWeekoftheYear(date);
			}else if(isQuarterView){
				if(year !== date.getFullYear() ){
					subheader[subheaderIndex - 1 ].endColumn = (index + 1) - subheader[subheaderIndex - 1].startColumn;
					subheader[subheaderIndex++] = { year : date.getFullYear(), startColumn : (index+1) };
					year = date.getFullYear();
				}
				headerArray[headerIndex].quarter = this.findWhichQuarter(date);
			}
			timeline = this.getDateSection( timeline, date , condition , view );
			index  = startIndex + timeline.length;
			var endColumn = (index + 1) - (headerArray[headerIndex].startColumn );
			endColumn = endColumn == 0   ? 1 : endColumn;
			headerArray[headerIndex].endColumn = endColumn ;
			condition = this.getSectionMargin( date , view );
			headerIndex++;
			if( this.data.timeline[0] && $L.moment(date).format('DD-MM-YYYY') == this.data.timeline[0].format('DD-MM-YYYY')){
				break;
			}
		}	
		subheader[subheaderIndex - 1 ].endColumn = (index + 1) - (subheader[subheaderIndex - 1].startColumn );
		headerArray[ headerIndex - 1 ].endColumn = ( index + 1 ) - (headerArray[ headerIndex - 1 ].startColumn);
		return {'timeline' : timeline , 'headerArray' : headerArray , 'subheader' : subheader};
	}

    findWhichQuarter(date) {
		return 'Q' + $L.moment(date).format('Q');
	}

    findWeekoftheYear(now) {
		const onejan = new Date(now.getFullYear(), 0, 1);
		const week = Math.ceil((((now.getTime() - onejan.getTime()) / 86400000) + onejan.getDay() ) / 7);
		return 'W'+week;
	}

    findNoOfDate(outerDiv, ColWidth) {
		return  Math.ceil(outerDiv.offsetWidth/ColWidth);
	}

    addEventForVerticalScroll() {
		var timelineDiv = this.$node.querySelector('div.timelineViewContentElem');
		
        timelineDiv.addEventListener('scroll', this.verticalScrollHandler.bind(this), {passive:true});
	}

    verticalScrollHandler(event) {
		this.updatePopulateObj( event.target.scrollTop );
	}

    updatePopulateObj(scrollTop) {
		if(this.getData('prevScroll') == scrollTop){
			return;
		}
		if( !scrollTop ){
			return;
		}
		var eventIndex = Math.floor(scrollTop/40);
		var populateObject = this.getData('populateObject');
		var eventEvent = this.getData('ltPropManipulatedEvent');
		var objLen = this.getData('TotalRow');
		var ind = 0;
		if(eventEvent.length < (eventIndex + objLen+1) ){
			eventIndex = eventEvent.length - objLen ;
		}
		while( ind < objLen && eventEvent.length > eventIndex){
			objectUtils(populateObject, 'add', 'elemt'+ind, eventEvent[eventIndex++]);
			ind++;
		}	
		this.setData('prevScroll',scrollTop)

	}

    findMonthAndYear(curr_month, year, which) {
		curr_month = parseInt(curr_month);
		year = parseInt(year);
		if(which == 'next'){
			if(curr_month == 12){
				return {'month' : 1, 'year' : year+1};
			}else{
				return {'month' : curr_month + 1, 'year' : year};	
			}
		}else if(which == 'prev'){
			if(curr_month == 1){
				return {'month' : 12, 'year' : year-1};
			}else{
				return  {'month' : curr_month - 1, 'year' : year}; 				
			}
		}
	}

    getCurrentMonthDays(month, year) {
		return new Date(year, month, 0).getDate();
	}

    setEventPosition(event) {
		var timeline = this.getData('timeline').length;
		var view = this.getData('ltPropView');
		var format = this.getData('ltPropFormat');
		var start = $L.moment(event.start,format);
		var end = $L.moment(event.end,format);
		var due = $L.moment(event.dueDate,format);
		var startOfView = this.getData('timeline')[ 0 ];
		var endOfView = this.getData('timeline')[ timeline - 1 ];
		while(!this.isWorkingDayOnly(start.getDObj())){
			start.add(1, 'date', true)
		}
		while( end && !this.isWorkingDayOnly(end.getDObj())){
			end.subtract(1, 'date', true)
		}
		var startDate = this.findEventPosition(start.format(format),this.data.ltPropView);
		var endDate = this.findEventPosition(end.format(format),this.data.ltPropView);
		var scroll = $L('.timelineViewContentElem',this.$node)[0];
		var prevScroll = scroll.scrollTop;
		if(event.dueDate){
			var dueDate = this.findEventPosition(event.dueDate,this.data.ltPropView);
			if(!endOfView.fromNow(due).past){
				dueDate = timeline;
			}
		}
		var dateWidth = this.getData('ltPropDateWidth')[view];
		var eventDiv = $L('#'+event.id,this.$node)[0];

		if(!eventDiv){
			return;
		}
		if(eventDiv == this.resizeEvent){
			return;
		}
		eventDiv.style.setProperty('--timeline-row-number', event.index);
		if(!startDate){
			if(startOfView.fromNow(start).past){
				startDate = 1;
			}
		}
		if( event.end ){
			if(!endDate){
				if(!endOfView.fromNow(end).past){
					endDate = timeline;
				}
			}
			eventDiv.style.setProperty('--timeline-column-end', endDate + 1);
		}else{
			eventDiv.style.setProperty('--timeline-column-end', startDate + 1 );
		}
		eventDiv.style.setProperty('--timeline-column-start', startDate);
		eventDiv.style.setProperty('--timeline-column-start', startDate);
		
			
		eventDiv.style.setProperty('--timeline-column-start', startDate);	
		
			
		if(!startDate && !endDate){
			eventDiv.style.width = '0px';
			eventDiv.style.display = 'none';
		}else{
			eventDiv.style.width = 'auto';
			eventDiv.style.display = 'block';
			if(view == 'quarter'){
				$L('.event',eventDiv)[0].style.width = 'auto';
				var startDate = parseInt(start.format('DD'));
				var startMonthDay = parseInt(start.endOf('month').format('DD'));
				var endDate = parseInt(end.format('DD'));	
				var endMonthDay = parseInt(end.endOf('month').format('DD'));
				if(startDate){
					$L('.event',eventDiv)[0].style.left = (dateWidth / startMonthDay) * ( startDate - 1 ) + 'px';
				}
				if(event.end && endDate){
					var width = eventDiv.offsetWidth - $L('.event',eventDiv)[0].offsetLeft -  (dateWidth / endMonthDay) * ( endMonthDay - endDate);
					$L('.event',eventDiv)[0].style.width = Math.abs(width) + 'px';
				}else{
					$L('.event',eventDiv)[0].style.width = '100%';
				}
			}
				
		}
		if(dueDate){
			var dueElem = $L('.event .due',eventDiv)[0];
			dueElem.innerHTML = '';
			if(view == 'quarter'){
				var original_dueDate = due.getDObj().getDate();
				var dueDiv = $L("[data-date='"+due.startOf('month').format('DD-MM-YYYY')+"']")[0];
				var diff_width = (dueDiv.offsetWidth / due.endOf('month').getDObj().getDate()) * original_dueDate; 
				dueElem.style.width = dueDiv.getBoundingClientRect().left - $L('.event',eventDiv)[0].getBoundingClientRect().right  + 20 + diff_width+ 'px';
			}else{
				dueElem.style.width = ((dueDate - endDate) + 1) * this.getData('ltPropDateWidth')[view] + 20 + 'px';
			}
			
			var createNode = document.createElement('span');
			var textNode = document.createTextNode((dueDate - endDate));
			createNode.appendChild(textNode);
			dueElem.appendChild(createNode);
		}
		if($L('.event',eventDiv)[0].offsetWidth  < $L('.event lyte-yield',eventDiv)[0].offsetWidth){
			$L('.event lyte-yield',eventDiv)[0].style.position = 'absolute';
			$L('.event lyte-yield',eventDiv)[0].style.left = '100%';
		}else{
			if(this.getData('ltPropGroup')){
				$L('.event lyte-yield',eventDiv)[0].style.left = $L('.timelineViewGroupbySubgroup')[0].offsetWidth + 'px';
			}else{
				$L('.event lyte-yield',eventDiv)[0].style.left = '0';
			}
			
		}
		scroll.scrollTop = prevScroll;
	}

    setleftTopPosition() {
		var timeline =this.getData('timeline').length;
		var _this = this;
		var group = this.getData('ltPropGroup');
		if(group){
			var events = this.getData('ltPropGroupby');
			events.forEach(function(event,index){
				var child_events = event.children || [];
				for(var index = 0;index < child_events.length; index++){
					_this.setEventPosition(child_events[index]);
				}
			});
		}else{
			var populateObject = this.getData('populateObject');
			for (const key in populateObject) {
				if (Object.hasOwnProperty.call(populateObject, key)) {

					_this.setEventPosition(populateObject[key])
				}
			}
		}
	}

    setarrowPosition(event) {
		var eventid = event.id;
		var eventDiv = $L('#'+event.id,this.$node)[0];
		var timeline =  this.getData('timeline');
		var view = this.getData('ltPropView');
		var format = this.getData('ltPropFormat');
		var startOfView = timeline[ 0 ];
		var endOfView =  timeline[ timeline.length - 1 ];
		var start = $L.moment( event.start ,format);
		var end = $L.moment( event.end ,format);

		if(view == 'quarter'){
			var startDate = $L('[data-date="'+	$L.moment( event.start ,format).startOf('month').format('DD-MM-YYYY') +'"]')[0];
			var endDate = $L('[data-date="'+ $L.moment( event.end ,format).startOf('month').format('DD-MM-YYYY') +'"]')[0];
		}else{
			var startDate = $L('[data-date="'+	$L.moment( event.start ,format).format('DD-MM-YYYY') +'"]')[0];
			var endDate = $L('[data-date="'+ $L.moment( event.end ,format).format('DD-MM-YYYY') +'"]')[0];
		}
		var arrowDiv = $L('[data-id="'+eventid +'"]',this.$node)[0];
		
		var containmentOffset =  this.$node.getBoundingClientRect() ;
		var arrowOffset = $L('.event lyte-yield',eventDiv)[0].getBoundingClientRect();
		var arrowOffsetRight = arrowOffset.right;
		window.arrowOffsetLeft = eventDiv.getBoundingClientRect().left;
		arrowOffsetRight = event.dueDate ? $L('.due',eventDiv)[0].getBoundingClientRect().right : arrowOffsetRight;
		var isVisible = window.getComputedStyle(eventDiv).display == 'none' ? false : true;
		var containmentLeft = containmentOffset.left;
		containmentLeft +=  $L('.timelineViewGroupbySubgroup',this.$node)[0] ?  $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth : 0;
		if( isVisible &&  arrowOffsetLeft > containmentOffset.right){
			arrowDiv.classList.remove('hideArrow');
			arrowDiv.classList.remove('leftArrow');
			arrowDiv.classList.add('rightArrow');
			var offsetLeft = arrowDiv.offsetParent.getBoundingClientRect().left;
			arrowDiv.style.left = (containmentOffset.right - offsetLeft - arrowDiv.offsetWidth - 10 ) + 'px';
		}else if( isVisible && arrowOffsetRight < ( containmentLeft )){
			arrowDiv.classList.remove('hideArrow');
			arrowDiv.classList.add('leftArrow');
			arrowDiv.classList.remove('rightArrow');
			var offsetLeft = arrowDiv.offsetParent.getBoundingClientRect().left;
			if(this.getData('ltPropGroup')){
				arrowDiv.style.left = containmentOffset.left - offsetLeft + $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth + 10  + 'px';
			}else{
				arrowDiv.style.left = containmentOffset.left - offsetLeft + 10 + 'px';
			}
		}
		// else if(isVisible &&   arrowOffsetLeft < ( containmentLeft ) && arrowOffsetRight > ( containmentLeft )){
		// 	var hoverarrow = $L('.hoverarrow',eventDiv)[0];
		// 	var user_div = $L('lyte-yield',eventDiv)[0];
		// 	var isabsolute = window.getComputedStyle(user_div).position == 'absolute' ? true : false;
		// 	var containmentOffset =  this.$node.getBoundingClientRect() ;
		// 	var containmentLeft = containmentOffset.left;
		// 	if(!isabsolute){
		// 		user_div.style.left = containmentLeft + 'px';
		// 	}
		// 	hoverarrow.classList.add('hideArrow');

		// }
		else if(!startDate && !endDate ){
			if(startOfView.fromNow(end).past){
				arrowDiv.classList.remove('hideArrow');
				arrowDiv.classList.add('leftArrow');
				arrowDiv.classList.remove('rightArrow');
				var offsetLeft = arrowDiv.offsetParent.getBoundingClientRect().left;
				if(this.getData('ltPropGroup')){
					arrowDiv.style.left = containmentOffset.left - offsetLeft + $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth + 10 + 'px';
				}else{
					arrowDiv.style.left = containmentOffset.left - offsetLeft + 10 + 'px';
				}
			}else if(!endOfView.fromNow(start).past){
				arrowDiv.classList.remove('hideArrow');
				arrowDiv.classList.remove('leftArrow');
				arrowDiv.classList.add('rightArrow');
				var offsetLeft = arrowDiv.offsetParent.getBoundingClientRect().left;
				arrowDiv.style.left = (containmentOffset.right - offsetLeft - 30) + 'px';
			}
		}else if(isVisible ){
			arrowDiv.classList.add('hideArrow');
		}
	}

    setArrow(eventid, eventDiv) {
		var group = this.getData('ltPropGroup');
		var _this = this;
		if(!group){
			var populateObject = this.getData('populateObject');
			for (const key in populateObject) {
				if (Object.hasOwnProperty.call(populateObject, key)) {
					const event = populateObject[key];
					_this.setarrowPosition(event);
				}
			}
		}else{
			var events = this.getData('ltPropGroupby');
			events.forEach(function(event,index){
				var child_events = event.children || [];
				for(var index = 0;index < child_events.length; index++){
					_this.setarrowPosition(child_events[index]);
				}
			});
		}
	}

    findEventPosition(date, view) {
		var format = this.getData('ltPropFormat');
		if(view == 'quarter'){
			var date =  $L.moment(date ,format).startOf('month').format('DD-MM-YYYY');
		}else{
			var date =  $L.moment(date ,format).format('DD-MM-YYYY');
		}
		var div = $L('[data-date="'+date+'"]')[0];
		if(!div){
			return 0;
		}
		return parseInt(window.getComputedStyle(div).gridColumnStart);
	}

    mouseMoveEvent(event, direction, eventDiv, dateWidth) {
		event.preventDefault();
		var timelineDateDivWidth = $L('.timelineHeaderElem',this.$node)[0].offsetWidth;
		var scroll = $L('.lyteSchedulerTimeLineWrapper',this.$node)[0];
		var scrollLeft = this.getData('ltPropGroup') == true ? ($L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth + scroll.getBoundingClientRect().left) : (scroll.getBoundingClientRect().left);
		
		if(this.getData('ltPropView') == 'quarter'){
			var currentDiv = this.$node.currentDiv;
			var date= $L.moment(currentDiv.dataset.date,'DD-MM-YYYY');
			var noOfDays = this.getCurrentMonthDays(date.get('month')+1,date.get('year'));
			var dateWidth = currentDiv.offsetWidth/noOfDays;
			var E = $L('.event',eventDiv)[0]; 
			if(direction == 'left'){

				if(currentDiv.getBoundingClientRect().left > E.getBoundingClientRect().left){
					this.$node.currentDiv = currentDiv.previousElementSibling;
				}else if(currentDiv.getBoundingClientRect().right < E.getBoundingClientRect().left){
					this.$node.currentDiv = currentDiv.nextElementSibling;
				}
				if( event.clientX < (E.getBoundingClientRect().left - dateWidth)){
					E.style.left = E.offsetLeft - dateWidth + 'px'; 
					E.style.width = E.offsetWidth + dateWidth + 'px'; 
				}else if( event.clientX > (E.getBoundingClientRect().left - dateWidth) && E.offsetWidth > dateWidth ){
					E.style.left = E.offsetLeft + dateWidth + 'px'; 
					E.style.width = E.offsetWidth - dateWidth + 'px'; 
				}		
			}else{
				if(currentDiv.getBoundingClientRect().left > E.getBoundingClientRect().right){
					this.$node.currentDiv = currentDiv.previousElementSibling;
				}else if(currentDiv.getBoundingClientRect().right < E.getBoundingClientRect().right){
					this.$node.currentDiv = currentDiv.nextElementSibling;
				}
				if( event.clientX > (E.getBoundingClientRect().right + dateWidth)){
					E.style.width = E.offsetWidth + dateWidth + 'px'; 
				}else if( event.clientX < (E.getBoundingClientRect().right + dateWidth) && E.offsetWidth > dateWidth ){
					E.style.width = E.offsetWidth - dateWidth + 'px'; 
				}
			}
		}else{
			if(direction == 'right'){
				if(event.clientX > (eventDiv.getBoundingClientRect().right + timelineDateDivWidth/2)){
					var end = parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
					eventDiv.style.setProperty('--timeline-column-end',end+1);
					this.$node.currentEnd.add(1,'date',true);
				}else if(event.clientX < (eventDiv.getBoundingClientRect().right - timelineDateDivWidth/2 ) && ( (eventDiv.getBoundingClientRect().left + timelineDateDivWidth/2) < event.clientX )){
					var end = parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
					eventDiv.style.setProperty('--timeline-column-end',end-1);
					this.$node.currentEnd.subtract(1,'date');
				}
			}else{
				if(event.clientX < (eventDiv.getBoundingClientRect().left - timelineDateDivWidth/2)){
					var id = eventDiv.getAttribute('id');
					var start = parseInt(window.getComputedStyle(eventDiv).gridColumnStart);
					var end  =  parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
					eventDiv.style.setProperty('--timeline-column-start',start-1);
					this.$node.currentStart.subtract(1,'date');
				}else if(event.clientX > (eventDiv.getBoundingClientRect().left + timelineDateDivWidth/2 ) && ( (eventDiv.getBoundingClientRect().right - timelineDateDivWidth/2) > event.clientX )){
					var end = parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
					var start = parseInt(window.getComputedStyle(eventDiv).gridColumnStart);
					eventDiv.style.setProperty('--timeline-column-start',start+1);
					this.$node.currentStart.add(1,'date',true);
				}
			}
		}
		if(event.clientX > (scroll.getBoundingClientRect().right - 50)){
			scroll.scrollLeft += 10;
		} 
		if( event.clientX < ( scrollLeft + 50 )){
			scroll.scrollLeft -= 10;
		}
	}

    static actions() {
        return {
            toggleAccordion : function(event,accordionHead,group){
                
                var accordion = accordionHead.closest('.timelineViewGroupbyAccordion');
                var accordionBody = $L('.timelineViewGroupbyAccordionBody',accordion)[0];
                if(!accordion.classList.contains('hideAccordion')){
                    accordionBody.style.height = accordionBody.getBoundingClientRect().height + 'px';
                    accordionBody.style.contain = 'paint';
                    group.isclosed = true;
                    if(this.getMethods('onGroupClose')){
                        this.executeMethod('onGroupClose',group,this.$node);
                    }
                    setTimeout(function(){
                        accordion.classList.add('hideAccordion');
                    },10);
                }else{
                    group.isclosed = false;
                    if(this.getMethods('onGroupOpen')){
                        this.executeMethod('onGroupOpen',group,this.$node);
                    }
                    accordion.classList.remove('hideAccordion');
                    accordionBody.style.contain = '';
                }
            },
            loadmore : function(event,key,loadIcon){
                var promise;
                var parent = loadIcon.closest('.timelineViewGroupbyAccordionBody');
                var loading_icon = $L('.loading',parent)[0];
                loading_icon.classList.remove('hideLoadmore');
                loadIcon.style.display = 'none';
                if(this.getMethods('onLoadMore')){
                    promise = this.executeMethod('onLoadMore',key,this.$node);
                }
                if(promise && promise.then){
                    promise.then(function(value){
                        if(value == true){
                            loadIcon.style.display = "block";
                        }else{
                            loadIcon.remove();
                        }
                        loading_icon.classList.add('hideLoadmore');
                    })
                }else if(promise !== false){
                    loadIcon.style.display = "block";
                    loading_icon.classList.add('hideLoadmore');
                }else{
                    loadIcon.remove();
                    loading_icon.classList.add('hideLoadmore');
                }
            },
            onarrowclick : function(event,id,group){
                var arrow = event.target.classList.contains('.eventArrow') ? event.target : event.target.closest('.eventArrow');
                if(group){
                    var groupArr = this.getData('ltPropGroupby');
                    var index = this.groupIndex(group);
                    var events = groupArr[index].children;
                }else{
                    var events = this.getData('ltPropManipulatedEvent');
                }
                var curr_event = window.$u.findWhere(events,{'id':id});
                var scroll = $L('.timelineViewContentElem',this.$node)[0];
                var view = this.getData('ltPropView');
                var outerDiv = $L('.lyteSchedulerTimeLineWrapper')[0];
                var format = this.getData('ltPropFormat')
                var containmentOffset =  this.$node.getBoundingClientRect() ;
                var containmentLeft = containmentOffset.left;
                containmentLeft +=  $L('.timelineViewGroupbySubgroup',this.$node)[0] ?  $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth : 0;
                var scrolloffsetLeft =  scroll.getBoundingClientRect().left;
                if(this.getData('ltPropGroup')){
                    scrolloffsetLeft +=  $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth;
                }
                var maxNoOfDate = this.findNoOfDate(outerDiv,this.getData('ltPropDateWidth')[this.getData('ltPropView')]);
                if(view == 'quarter'){
                    var eventDiv = $L('[data-date="'+$L.moment(curr_event.start,format).startOf('month').format('DD-MM-YYYY')+'"]');
                }else{
                    var eventDiv = $L('[data-date="'+$L.moment(curr_event.start,format).format('DD-MM-YYYY')+'"]');
                }
                if(eventDiv.length){
                    scroll.scrollLeft = 0;
                    var event = $L('#'+id,this.$node);
                    var user_div = $L('lyte-yield',event[0])[0];
                    var isabsolute = window.getComputedStyle(user_div).position == 'absolute' ? true : false;
                    if(arrow.classList.contains('leftArrow')){
                        scroll.scrollLeft = eventDiv[0].getBoundingClientRect().left - scrolloffsetLeft;
                    }else{
                        scroll.scrollLeft = event[0].getBoundingClientRect().right - scroll.getBoundingClientRect().left - scroll.offsetWidth + event.find('.event lyte-yield')[0].offsetWidth ;
                    }
                    if(!isabsolute){
                        user_div.style.left = containmentLeft + 'px';
                    }
                    arrow.classList.add('hideArrow');
                }else{
                    scroll.scrollLeft = 0;
                    this.setTimeline($L.moment(curr_event.start,format).getDObj());
                    var currentDate = $L('[data-date="'+$L.moment(curr_event.start,format).format('DD-MM-YYYY')+'"]',this.$node)[0];
                    var event = $L('#'+id,this.$node);
                    this.setleftTopPosition();
                    if(arrow.classList.contains('leftArrow')){
                        scroll.scrollLeft =  currentDate.getBoundingClientRect().left - scrolloffsetLeft;
                    }else{
                        scroll.scrollLeft = Math.abs(scroll.getBoundingClientRect().left - currentDate.getBoundingClientRect().right) - scroll.offsetWidth + event.find('.event lyte-yield')[0].offsetWidth  ;
                    }
                    this.intializeInfinteScroll( new Date($L.moment(curr_event.start,format).getDObj().toString())  ,this.getData('ltPropView'));
                }	
                    
            },
            onhoverEvent : function(event,eventDiv){
                var hoverarrow = $L('.hoverarrow',eventDiv)[0];
                var user_div = $L('lyte-yield',eventDiv)[0];
                var isabsolute = window.getComputedStyle(user_div).position == 'absolute' ? true : false;
                var containmentOffset =  this.$node.getBoundingClientRect() ;
                var containmentLeft = containmentOffset.left;
                containmentLeft +=  $L('.timelineViewGroupbySubgroup',this.$node)[0] ?  $L('.timelineViewGroupbySubgroup',this.$node)[0].offsetWidth : 0;
                if( event.type == 'mouseleave'){
                    if(!isabsolute){
                        user_div.style.left = containmentLeft + 'px';
                    }
                    hoverarrow.classList.add('hideArrow');
                }
                if(event.type == 'mouseenter'){
                    if( containmentLeft > eventDiv.getBoundingClientRect().left ){
                        hoverarrow.classList.remove('hideArrow');
                        if(!isabsolute){
                            user_div.style.left = user_div.getBoundingClientRect().left + hoverarrow.offsetWidth + 'px';
                        }
                        
                    }
                }
            },
            onmousedownEvent : function(event,direction,eventDiv,events){
                event.preventDefault();
                eventDiv = eventDiv.closest('.timelineEvent');
                this.$node.resize  = true;
                this.$node.resizeEvent = eventDiv;
                var headerElem = $L('.timelineHeaderElem',this.$node);
                if(this.getData('ltPropView') == 'quarter'){
                    if(direction == 'left'){
                        var startDate = parseInt(window.getComputedStyle(eventDiv).gridColumnStart);
                        this.$node.currentDiv = headerElem[startDate - 1];
                    }else{
                        var endDate = parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
                        this.$node.currentDiv = headerElem[endDate - 2];
                    }
                }
                this.$node.currentEnd =  $L.moment(events.end,this.getData('ltPropFormat'));
                this.$node.currentStart =  $L.moment(events.start,this.getData('ltPropFormat'));
                var _this = this;
                var currentDiv = this.$node.currentDiv;
                var mouseMoveEvent = function(event){
                    _this.mouseMoveEvent(event,direction,eventDiv)
                };
                this.$node.addEventListener("mousemove",mouseMoveEvent);
                this.$node.addEventListener("mouseup",function(){
                    _this.$node.resize  = false;
                    _this.$node.resizeEvent = null;
                    var currentDiv = _this.$node.currentDiv;
                    var E = $L('.event',eventDiv)[0];
                    var headerElem = $L('.timelineHeaderElem',this.$node);
                    
                    if(_this.getData('ltPropView') == 'quarter'){
                        if(direction == 'left'){
                            var endDate = $L.moment(events.end,this.getData('ltPropFormat'));
                            var startDate = $L.moment(currentDiv.dataset.date,'DD-MM-YYYY');
                            var noOfDays = _this.getCurrentMonthDays(startDate.get('month')+1,startDate.get('year'));
                            var dateWidth = currentDiv.offsetWidth / noOfDays;
                            var width_diff = parseInt((currentDiv.getBoundingClientRect().right - E.getBoundingClientRect().left)/dateWidth);
                            width_diff = noOfDays - width_diff;
                            if(width_diff){
                                startDate.set('date',width_diff);
                            }						
                        }else{
                            var startDate = $L.moment(events.start,this.getData('ltPropFormat'));
                            var endDate = $L.moment(currentDiv.dataset.date,'DD-MM-YYYY');
                            var noOfDays = _this.getCurrentMonthDays(endDate.get('month')+1,endDate.get('year'));
                            var dateWidth = currentDiv.offsetWidth / noOfDays;
                            var width_diff = parseInt(( E.getBoundingClientRect().right - currentDiv.getBoundingClientRect().left)/dateWidth);
                            if(width_diff){
                                endDate.add(width_diff,'date',true);
                            }
                        }
                    }else{
                        var endDate = parseInt(window.getComputedStyle(eventDiv).gridColumnEnd);
                        if(endDate){	
                            endDate = $L.moment(headerElem[endDate-2].dataset.date,this.getData('ltPropFormat'));
                        }else{
                            endDate = _this.$node.currentEnd;
                        }
                        var startDate = parseInt(window.getComputedStyle(eventDiv).gridColumnStart);
                        if(startDate){
                            startDate = $L.moment(headerElem[startDate-1].dataset.date,this.getData('ltPropFormat'));
                        }else{
                            startDate = _this.$node.currentStart;
                        }
                    }
                    if(_this.getMethods('onResizeStop')){
                        _this.executeMethod('onResizeStop',startDate,endDate);
                    }
                    _this.$node.removeEventListener("mousemove",mouseMoveEvent);
                    _this.$node.removeEventListener("mouseup",this);
                });
            }
        };
    }

    static methods() {
        return {
            // Functions which can be used as callback in the component.
        };
    }

    static observers() {
        return {
            intializeEvent : function(){
                this.generateEvent();
            }.observes('ltPropEvent','ltPropEvent.[]'),

            intializeTimeline : function(){
                var view = this.getData('ltPropView');
                this.setTimeline();
                var _this = this;
                var scroll = $L('.lyteSchedulerTimeLineWrapper',this.$node)[0];
                var currentDate = $L.moment( this.getData('ltPropCurrentDate') );
                if(view == 'quarter'){
                    currentDate = currentDate.startOf('month');
                }	
                while(!this.isWorkingDayOnly(currentDate.getDObj())){
                    currentDate.add(1, 'date', true)
                }	
                currentDate = currentDate.format('DD-MM-YYYY');
                setTimeout(function(){
                    var intersectionMonth =  $L('[data-date="'+ currentDate +'"]',_this.$node)[0];
                    scroll.scrollLeft =  intersectionMonth.getBoundingClientRect().left - scroll.getBoundingClientRect().left - scroll.offsetWidth / 2  ;
                    _this.intializeInfinteScroll(_this.getData('ltPropCurrentDate'),view);
                })
                var _this = this;
                this.generateEvent();
            }.observes('ltPropGroup').on('didConnect'),

            onViewChange : function(){
                var timeline = this.getData('timeline');
                var view = this.getData('view');
                var center = timeline[parseInt(timeline.length/2)];
                this.setData('timeline',[]);
                this.setTimeline(center.getDObj());
                var scroll = $L('.lyteSchedulerTimeLineWrapper')[0];
                scroll.scrollLeft = 0;
                var _this= this;
                var startDate = timeline[0];
                this.removerIntersectionObserver();
                setTimeout(function(){
                    var intersectionMonth =  $L('[data-date="'+ center.format('DD-MM-YYYY') +'"]')[0];
                    scroll.scrollLeft =  intersectionMonth.getBoundingClientRect().left - scroll.getBoundingClientRect().left - scroll.offsetWidth / 2  ;	
                    _this.intializeInfinteScroll(_this.getData('ltPropCurrentDate'),view);
                })
                if(this.getMethods('onViewChange')){
                    this.executeMethod('onViewChange',this.$node);
                }
            }.observes('ltPropView','ltPropDateWidth')
        };
    }
}

LyteUiComponentComponentRegistry.registerHelper( "indexIncrement" , function( index, incrementValue ){
    if(!incrementValue) {
        incrementValue = 1;
    }
    return (index + incrementValue);
});
LyteUiComponentComponentRegistry.registerHelper("findCurrentDay", function(date){
	date = date.getDObj();
	return 1 == date.getDate();
})
LyteUiComponentComponentRegistry.registerHelper("lytegetMonth", function(date,months){
	return months[date.getDObj().getMonth()];
})
LyteUiComponentComponentRegistry.registerHelper("lyteUiSchedulerGetDay",function( date ){
	return date.getDObj().getDate();
});
LyteUiComponentComponentRegistry.registerHelper("lyteUiTimelineCss",function(event,eventDiv,timeline,view){
	var timeline = eventDiv.closest('lyte-timeline-view');
	var timeline = eventDiv.closest('lyte-timeline-view');
	
	var timeline = eventDiv.closest('lyte-timeline-view');	
	
	if(timeline){
		$L.fastdom.mutate(function(){
			timeline.component.setEventPosition(event);
		})	
		
	}	
})
LyteUiComponentComponentRegistry.registerHelper("lyteUiTimelineViewAccordionClosed",function(group,accordion){
	if(group.isclosed){
		$L('.timelineViewGroupbyAccordionBody',accordion)[0].style.height = '30px';
		return 'hideAccordion';
	}
})

if( !window._lyteUiUtils.registeredCustomElements[ 'lyte-timeline-view-accordion' ] ) {
    window._lyteUiUtils.registeredCustomElements[ 'lyte-timeline-view-accordion' ] = true;

    class LyteTimelineViewAccordionCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        connectedCallback() {
            var lyteNode = this.$node;
            var timelineView = lyteNode.closest('lyte-timeline-view');
            var index = timelineView.component.groupIndex(lyteNode.getAttribute('group'));
            var groupArr = timelineView.getData('ltPropGroupby');
            if(timelineView.getMethods('onGroupRender')){
				timelineView.component.executeMethod('onGroupRender',groupArr[index],timelineView);
			}
        }
    }

    LyteTimelineViewAccordionCustomElements.register("lyte-timeline-view-accordion");
}
export { LyteTimelineViewComponent };