import { prop } from "@slyte/core";
import { Component } from "../../component.js";
import $L from "@zoho/lyte-dom";


class LyteAvatarNavigatorItemComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			'ltPropImage': prop( 'object', {} ),
			'ltPropLoadingIconYield': prop( 'boolean', { 'default': false } ),
			'ltPropLoadingIconClass': prop( 'string', { 'default': 'lyteAvatarLoading' } ),
			'ltPropSelectedClass': prop( 'string', { 'default': '' } )
		};
	}

    init() {
		this.setParentComponent();
		this.setImageAttributes();
		this.setMetaInfo();
	}

    setMetaInfo() {
		var imageObject = this.getData( 'ltPropImage' );
		this.$node._imageIndex = imageObject._imageIndex
	}

    didConnect() {
		this.setSelected();
		this.setARIAProps();
	}

    setARIAProps() {
		var imageObj = this.getData( 'ltPropImage' ),
		parent = this.parent.component,
		ariaValue = parent.getData( 'ltPropAriaLabelValue' );

		if( ariaValue ) {
			this.$node.setAttribute( 'aria-label', this.getData( 'ltPropImage' )[ ariaValue ] );
		}

		this.$node.setAttribute( 'role', 'button' );
	}

    setParentComponent() {
		var parent = $L( this.$node ).closest( 'lyte-avatar-navigator' );

		this.parent = parent.get( 0 );
	}

    getLoadingIcon() {

		return this.$node.querySelector( '.lyteAvatarLoadingCont' );
	}

    setSelected() {
		var parent = this.parent.component,
		cls = parent.getData( 'ltPropSelectedClass' ),
		imageObj = this.getData( 'ltPropImage' );

		if( imageObj.isSelected ) {
			this.setData( 'ltPropSelectedClass', cls );
		}
	}

    setImageAttributes() {
		var parent = this.parent.component, 
		urlValue = parent.getData( 'ltPropUrlValue' ),
		tooltipValue = parent.getData( 'ltPropTooltipValue' ),
		imageObj = this.getData( 'ltPropImage' ) || {},
		isString = parent.getData( 'isString' ),
		id = ( imageObj || {} ).id,
		altValue = parent.getAltValue(),
		disabled = ( imageObj || {} ).disabled,
		config = parent.getData( 'ltPropTooltip' );

		if( imageObj[ urlValue ] ) {
			this.setData( 'src', imageObj[ urlValue ] );
		}

		if( !isNaN( id ) ) {
			this.$node.setAttribute( 'data-image-id', id );
		}

		this.setData( 'alt', imageObj[ altValue ] );

		if( imageObj.disabled ) {
			this.$node.setAttribute( 'aria-disabled', 'true' );
			this.$node.setAttribute( 'disabled', 'true' );
		}

		if( tooltipValue && ( imageObj || {} )[ tooltipValue ] ) {
			this.setData( 'title', imageObj[ tooltipValue ] );
		}

		this.setData( 'config', config ); 
	}

    static actions() {
        return {
            hideIcon: function( event ) {
                if( !this.$node ) {
                    return ;
                }

                var loadingIcon = this.getLoadingIcon();

                loadingIcon.style.display = 'none';
            }
        };
    }

    static observers() {
        return {
            imageObserver: function() {
                this.setSelected();
                this.setImageAttributes();
            }.observes( 'ltPropImage' ),

            addSelectedClass: function() {
                var sel = this.getData( 'ltPropSelectedClass' ),
                imageObj = this.getData( 'ltPropImage' );

                if( sel ) {
                    this.$node.classList.add( sel );
                    this.selClass = sel;
                    imageObj.isSelected = true;
                    this.$node.setAttribute( 'aria-current', 'true' );
                }
                else {
                    this.$node.classList.remove( this.selClass );
                    this.selClass = '';
                    imageObj.isSelected = false;
                    this.$node.removeAttribute( 'aria-current' );
                }

            }.observes( 'ltPropSelectedClass' )
        };
    }
}

export { LyteAvatarNavigatorItemComponent };