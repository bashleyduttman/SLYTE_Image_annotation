import { prop } from "@slyte/core";
import { Component, LyteUiComponentComponentRegistry } from "../component.js";
import $L from "@zoho/lyte-dom";

/**
 * Renders a resizeable rows and columns
 * @component lyte-splitter
 * @version 2.2.0
 * @methods onResizeEnd
 */


class LyteSplitterComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {

			/**
			 * @componentProperty {boolean} ltPropResize
			 * @default true
			 *
			 */

			ltPropResize : prop('boolean' , {
				default : true
			}),

			/**
			 * @componentProperty {boolean} ltPropCollapsible
			 * @default true
			 *
			 */

			ltPropCollapsible : prop('boolean' , {
				default : true
			}),
			columnElementCount : prop('number' , {
				default : 0
			}),
			rowElementCount : prop('number' , {
				default : 0
			})
		};
	}
}

/**
 * @customElement lyte-row-splitter
 */

if(!window._lyteUiUtils.registeredCustomElements['lyte-row-splitter']){
    window._lyteUiUtils.registeredCustomElements['lyte-row-splitter'] = true

    class LyteRowSplitterCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteRowSplitterCustomElements.register('lyte-row-splitter');
}

/**
 * @customElement lyte-column-splitter
 */

if(!window._lyteUiUtils.registeredCustomElements['lyte-column-splitter']){
    window._lyteUiUtils.registeredCustomElements['lyte-column-splitter'] = true

    class LyteColumnSplitterCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteColumnSplitterCustomElements.register('lyte-column-splitter');
}

/**
 * @customElement lyte-row-element
 */

if(!window._lyteUiUtils.registeredCustomElements['lyte-row-element']){
    window._lyteUiUtils.registeredCustomElements['lyte-row-element'] = true

    class LyteRowElementCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        constructor(node) {
            super();
            var lyteNode = node;
            var splitterComponent = $L(lyteNode).closest('lyte-splitter').get(0);
            var splitterRow = $L(lyteNode).closest('lyte-row-splitter').get(0);

            var currentParent = lyteNode.parentElement;
            var lyteRowElements = currentParent.querySelectorAll('lyte-row-element');
            var lastRowElement = currentParent.children[currentParent.children.length-1];

            // var lyteRowElementsAr = Object.values(lyteRowElements);
            var lyteRowElementsAr = Object.keys(lyteRowElements).map(function(e) {
                return lyteRowElements[e]
            })

            var currentIndex = lyteRowElementsAr.indexOf(lyteNode);

            var rowElements = $L(splitterRow).find('lyte-row-element');

            if((!(lastRowElement == lyteNode))&&(lyteNode.getAttribute('lt-prop-resize')!=="false")){
                if(lyteRowElementsAr[currentIndex+1]){
                    if(lyteRowElementsAr[currentIndex+1].getAttribute('lt-prop-resize')!=="false"){
                        var rowHandle  = document.createElement("LYTE-ROW-HANDLE");
                        currentParent.insertBefore(rowHandle, lyteNode.nextSibling);
                    }
                }
            }
            if(lastRowElement == lyteNode){
                var remainingWidthPercent = 0;
                var filteredRowElements = $L(splitterRow).children( 'lyte-row-element' ).filter( function( index, item ) {

                    if( item.hasAttribute('lt-prop-size') ) {
                        var ltSize = item.getAttribute('lt-prop-size')
                        var sizeValue = parseInt(item.getAttribute('lt-prop-size').match(/\d+/g));
                        if(ltSize.indexOf('%') !== -1){
                            item.style.flexBasis = ltSize;
                            remainingWidthPercent = remainingWidthPercent + sizeValue;
                            return false;
                        }
                    }
                    return true;
                })
                var handleCount = $L(lyteNode).parent().children('lyte-row-handle').length;
                var elementCount = filteredRowElements.length;

                var rowSplitterSpace = (currentParent.getBoundingClientRect().height - (handleCount*8));
                var remainingWidth = rowSplitterSpace - ((remainingWidthPercent/100) * rowSplitterSpace);
                var percent = remainingWidth/elementCount;
                var flexBasis = ((percent / (rowSplitterSpace)) * 100)+"%";
                filteredRowElements.css('flexBasis' , flexBasis)
            }
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteRowElementCustomElements.register('lyte-row-element');
}


/**
 * @customElement lyte-column-element
 */



if(!window._lyteUiUtils.registeredCustomElements['lyte-column-element']){
    window._lyteUiUtils.registeredCustomElements['lyte-column-element'] = true

    class LyteColumnElementCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        constructor(node) {
            super();
            var lyteNode = node;
            var splitterComponent = $L(lyteNode).closest('lyte-splitter').get(0);
            var splitterColumn = $L(lyteNode).closest('lyte-column-splitter').get(0);

            var currentParent = lyteNode.parentElement;
            var lyteColumnElements = currentParent.querySelectorAll('lyte-column-element');
            var lastColumnElement = currentParent.children[currentParent.children.length-1];

            // var lyteColumnElementsAr = Object.values(lyteColumnElements);
            var lyteColumnElementsAr = Object.keys(lyteColumnElements).map(function(e) {
                return lyteColumnElements[e]
            })

            var currentIndex = lyteColumnElementsAr.indexOf(lyteNode);

            // var columnElements = $L(splitterColumn).find('lyte-column-element');
            var columnElements = $L(lyteNode).parent().children('lyte-column-element');

            if((!(lastColumnElement == lyteNode))&&(lyteNode.getAttribute('lt-prop-resize')!=="false")){

                if(lyteColumnElementsAr[currentIndex+1]){
                    if(lyteColumnElementsAr[currentIndex+1].getAttribute('lt-prop-resize')!=="false"){
                        var columnHandle  = document.createElement("LYTE-COLUMN-HANDLE");
                        currentParent.insertBefore(columnHandle, lyteNode.nextSibling);
                    }
                }
            }
            if(lastColumnElement == lyteNode){
                var remainingWidthPercent = 0;
                var filteredColumnElements = $L(splitterColumn).children( 'lyte-column-element' ).filter( function( index, item ) {

                    if( item.hasAttribute('lt-prop-size') ) {
                        var ltSize = item.getAttribute('lt-prop-size')
                        var sizeValue = parseInt(item.getAttribute('lt-prop-size').match(/\d+/g));
                        if(ltSize.indexOf('%') !== -1){
                            item.style.flexBasis = ltSize;
                            remainingWidthPercent = remainingWidthPercent + sizeValue;
                            return false;
                        }
                    }
                    return true;
                })
                var handleCount = $L(lyteNode).parent().children('lyte-column-handle').length;
                var elementCount = filteredColumnElements.length;
                var columnSplitterSpace = (currentParent.getBoundingClientRect().width - (handleCount*8));
                var remainingWidth = columnSplitterSpace - ((remainingWidthPercent/100) * columnSplitterSpace);
                var percent = remainingWidth/elementCount;
                var flexBasis = ((percent / (columnSplitterSpace)) * 100)+"%";
                filteredColumnElements.css('flexBasis' , flexBasis)

            }
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteColumnElementCustomElements.register('lyte-column-element');
}

/**
 * @customElement lyte-row-handle
 */



if(!window._lyteUiUtils.registeredCustomElements['lyte-row-handle']){
    window._lyteUiUtils.registeredCustomElements['lyte-row-handle'] = true


    class LyteRowHandleCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        connectedCallback() {
            var lyteNode = this.$node;
            if(!$L(lyteNode).find('.rowHandleIcon')[0]){
                var rowHandleIcon = document.createElement('DIV');
                rowHandleIcon.setAttribute('class' , 'rowHandleIcon');
                lyteNode.appendChild(rowHandleIcon);
            }
        }

        constructor(node) {
            super();
            var lyteNode = node;

            var lyteRowRe = lyteNode;
            var currentParent,currentIndex,prevSplitterRow,nextSplitterRow,currentIndex;
            var oldClientY;
            var prevSplitterRowBasis;
            var nextSplitterRowBasis;
            var splitterComponent;
            var prevEleMinSize = 0;
            var nextEleMinSize = 0;
            var prevEleMaxSize = 100;
            var nextEleMaxSize = 100;
            lyteRowRe.addEventListener('mousedown' , resizeFun);
            function resizeFun(event){
                // lyteRowRe.style.background = "red";
                lyteRowRe.classList.add('splitResizing');
                splitterComponent = $L(lyteNode).closest('lyte-splitter').get(0);

                if(splitterComponent.getMethods('onResizeStart')){
                    splitterComponent.component.executeMethod('onResizeStart');
                }

                window.splitterComponentRow = $L(lyteNode).closest('lyte-row-splitter').get(0);
                currentParent = lyteRowRe.parentElement;
                // childArray = Object.values(currentParent.children);
                window.childArray = Object.keys(currentParent.children).map(function(e){
                    return currentParent.children[e]
                })
                currentIndex = window.childArray.indexOf(lyteRowRe);
                prevSplitterRow = window.childArray[currentIndex-1];
                nextSplitterRow = window.childArray[currentIndex+1];
                oldClientY = event.clientY;
                $L(lyteNode).parent().children('lyte-row-element').css('flexGrow',0);
                if(!window.getComputedStyle(prevSplitterRow).flexBasis){
                    prevSplitterRow.style.flexBasis = (((100/currentParent.querySelectorAll('lyte-row-element').length)-1)/2) + "%";
                }
                if((!window.getComputedStyle(nextSplitterRow).flexBasis)||(window.getComputedStyle(nextSplitterRow).flexBasis === "auto")){
                    nextSplitterRow.style.flexBasis = (((100/currentParent.querySelectorAll('lyte-row-element').length))/($L('lyte-row-element').length - 2)) + "%";
                }
                prevSplitterRow.style.flexGrow = nextSplitterRow.style.flexGrow = 0;
                oldClientY = event.clientY;
                prevSplitterRowBasis = parseFloat(window.getComputedStyle(prevSplitterRow).flexBasis);
                nextSplitterRowBasis = parseFloat(window.getComputedStyle(nextSplitterRow).flexBasis)
                if(prevSplitterRow.hasAttribute('lt-prop-min-size')){
                    prevEleMinSize = parseFloat(prevSplitterRow.getAttribute('lt-prop-min-size'));
                }
                if(nextSplitterRow.hasAttribute('lt-prop-min-size')){
                    nextEleMinSize = parseFloat(nextSplitterRow.getAttribute('lt-prop-min-size'));
                }
                if(prevSplitterRow.hasAttribute('lt-prop-max-size')){
                    prevEleMaxSize = parseFloat(prevSplitterRow.getAttribute('lt-prop-max-size'));
                }
                if(nextSplitterRow.hasAttribute('lt-prop-max-size')){
                    nextEleMaxSize = parseFloat(nextSplitterRow.getAttribute('lt-prop-max-size'));
                }
                splitterComponent.addEventListener('mousemove' , adjustFun);
                splitterComponent.addEventListener('mouseup' , removeFun);
            }
            function adjustFun(event){
                var clientYchange = oldClientY - event.clientY;
                var availableSpace = (currentParent.getBoundingClientRect().height - ($L(lyteRowRe).parent().children('lyte-row-handle').length * 8));
                var percentDiff = ((clientYchange / availableSpace)*100);
                if(
                    ((prevSplitterRowBasis - percentDiff) >= prevEleMinSize) || ((nextSplitterRowBasis + percentDiff) <= nextEleMinSize) &&
                    ((prevSplitterRowBasis - percentDiff) <= prevEleMaxSize) || ((nextSplitterRowBasis + percentDiff) >= nextEleMaxSize)
                ){
                    prevSplitterRow.style.flexBasis = (prevSplitterRowBasis - percentDiff) + "%";
                    prevSplitterRow.setAttribute('lt-prop-size' , ((prevSplitterRowBasis - percentDiff) + "%"));
                    nextSplitterRow.style.flexBasis = (nextSplitterRowBasis + percentDiff) + "%";
                    nextSplitterRow.setAttribute('lt-prop-size' , ((nextSplitterRowBasis + percentDiff) + "%"))
                }

                if(((prevSplitterRowBasis - percentDiff) < prevEleMinSize) || ((nextSplitterRowBasis + percentDiff) < nextEleMinSize)){
                    if(((prevSplitterRowBasis - percentDiff) < (prevEleMinSize+1))){
                        nextSplitterRow.style.flexBasis = ((prevSplitterRowBasis + nextSplitterRowBasis)-prevEleMinSize) + "%";
                        nextSplitterRow.setAttribute('lt-prop-size' , (((prevSplitterRowBasis + nextSplitterRowBasis)-prevEleMinSize) + "%"))
                        prevSplitterRow.style.flexBasis = prevEleMinSize + "%";
                        prevSplitterRow.setAttribute('lt-prop-size' , (prevEleMinSize+"%"))
                    } else if(((nextSplitterRowBasis + percentDiff) < (nextEleMinSize+1))){
                        prevSplitterRow.style.flexBasis = ((prevSplitterRowBasis + nextSplitterRowBasis)-nextEleMinSize) + "%";
                        prevSplitterRow.setAttribute('lt-prop-size' , (((prevSplitterRowBasis + nextSplitterRowBasis)-nextEleMinSize) + "%"));
                        nextSplitterRow.style.flexBasis = nextEleMinSize + "%";
                        nextSplitterRow.setAttribute('lt-prop-size' , (nextEleMinSize+"%"));
                    }
                } 

                if(((prevSplitterRowBasis - percentDiff) > prevEleMaxSize) && ((nextSplitterRowBasis + percentDiff) < nextEleMaxSize)){
                    if(((prevSplitterRowBasis - percentDiff) > (prevEleMaxSize+1))){
                        nextSplitterRow.style.flexBasis = ((prevSplitterRowBasis + nextSplitterRowBasis)-prevEleMaxSize) + "%";
                        nextSplitterRow.setAttribute('lt-prop-size' , (((prevSplitterRowBasis + nextSplitterRowBasis)-prevEleMaxSize) + "%"))
                        prevSplitterRow.style.flexBasis = prevEleMaxSize + "%";
                        prevSplitterRow.setAttribute('lt-prop-size' , (prevEleMaxSize+"%"))
                    } else if(((nextSplitterRowBasis + percentDiff) > (nextEleMaxSize+1))){
                        prevSplitterRow.style.flexBasis = ((prevSplitterRowBasis + nextSplitterRowBasis)-nextEleMaxSize) + "%";
                        prevSplitterRow.setAttribute('lt-prop-size' , (((prevSplitterRowBasis + nextSplitterRowBasis)-nextEleMaxSize) + "%"));
                        nextSplitterRow.style.flexBasis = nextEleMaxSize + "%";
                        nextSplitterRow.setAttribute('lt-prop-size' , (nextEleMaxSize+"%"));
                    }
                } 

            }
            function removeFun(){
                // lyteRowRe.style.background = "#ddd";
                lyteRowRe.classList.remove('splitResizing');
                splitterComponent.removeEventListener('mousemove' , adjustFun);
                splitterComponent.removeEventListener('mouseup' , removeFun);

                var prevId = prevSplitterRow.getAttribute('lt-prop-splitter-id');
                var nextId = nextSplitterRow.getAttribute('lt-prop-splitter-id');

                var returnData = {};
                returnData[prevId] = {
                    'element' : prevSplitterRow,
                    'size' : prevSplitterRow.getAttribute('lt-prop-size')
                }
                returnData[nextId] = {
                    'element' : nextSplitterRow,
                    'size' : nextSplitterRow.getAttribute('lt-prop-size')
                }

                if(splitterComponent.getMethods('onResizeEnd')){
                    splitterComponent.component.executeMethod('onResizeEnd' , returnData);
                }

            }
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteRowHandleCustomElements.register('lyte-row-handle');
}

/**
 * @customElement lyte-column-handle
 */


if(!window._lyteUiUtils.registeredCustomElements['lyte-column-handle']){
    window._lyteUiUtils.registeredCustomElements['lyte-column-handle'] = true


    class LyteColumnHandleCustomElements extends LyteUiComponentComponentRegistry.CustomElements {
        static options = {clone : {allCallbacks : false}};

        lookups() {
            return [{
                component: LyteUiComponentComponentRegistry
            }];
        }

        connectedCallback() {
            var lyteNode = this.$node;
            if(!$L(lyteNode).find('.columnHandleIcon')[0]){
                var columnHandleIcon = document.createElement('DIV');
                columnHandleIcon.setAttribute('class' , 'columnHandleIcon');
                lyteNode.appendChild(columnHandleIcon);
            }
        }

        constructor(node) {
            super();
            var lyteNode = node;

            var lyteColRe = lyteNode;
            var currentParent,currentIndex,prevSplitterCol,nextSplitterCol,currentIndex;
            var oldClientX;
            var prevSplitterColBasis;
            var nextSplitterColBasis;
            var splitterComponent;
            var prevEleMinSize = 0;
            var nextEleMinSize = 0;
            var prevFlexValues = {};
            var nextFlexValues = {};

            lyteColRe.addEventListener('mousedown' , resizeFun);
            function resizeFun(event){
                // lyteColRe.style.background = "black";
                // lyteColRe.children[0].style.background = "white";

                lyteColRe.classList.add('splitResizing');


                splitterComponent = $L(lyteColRe).closest('lyte-splitter').get(0);

                if(splitterComponent.getMethods('onResizeStart')){
                    splitterComponent.component.executeMethod('onResizeStart');
                }


                window.splitterComponentCol = $L(lyteColRe).closest('lyte-column-splitter').get(0);
                currentParent = lyteColRe.parentElement;
                window.childArray = Object.keys(currentParent.children).map(function(e){
                    return currentParent.children[e]
                })
                currentIndex = window.childArray.indexOf(lyteColRe);
                prevSplitterCol = window.childArray[currentIndex-1];
                nextSplitterCol = window.childArray[currentIndex+1];
                oldClientX = event.clientX;
                $L(lyteNode).parent().children('lyte-column-element').css('flexGrow',0);
                if(!window.getComputedStyle(prevSplitterCol).flexBasis){
                    prevSplitterCol.style.flexBasis = (((100/currentParent.querySelectorAll('lyte-column-element').length)-1)/2) + "%";
                }
                if((!window.getComputedStyle(nextSplitterCol).flexBasis)||(window.getComputedStyle(nextSplitterCol).flexBasis === "auto")){
                    nextSplitterCol.style.flexBasis = (((100/currentParent.querySelectorAll('lyte-column-element').length))/($L('lyte-column-element').length - 2)) + "%";
                }
                prevSplitterCol.style.flexGrow = nextSplitterCol.style.flexGrow = 0;
                oldClientX = event.clientX;
                prevSplitterColBasis = parseFloat(window.getComputedStyle(prevSplitterCol).flexBasis);
                nextSplitterColBasis = parseFloat(window.getComputedStyle(nextSplitterCol).flexBasis);
                if(prevSplitterCol.hasAttribute('lt-prop-min-size')){
                    prevEleMinSize = parseFloat(prevSplitterCol.getAttribute('lt-prop-min-size'));
                }
                if(nextSplitterCol.hasAttribute('lt-prop-min-size')){
                    nextEleMinSize = parseFloat(nextSplitterCol.getAttribute('lt-prop-min-size'));
                }
                if(!$L(prevSplitterCol).data('flexValues')){
                    prevFlexValues = {
                        "value" : window.getComputedStyle(prevSplitterCol).flexBasis
                    }
                }
                if(!$L(nextSplitterCol).data('flexValues')){
                    nextFlexValues = {
                        "value" : window.getComputedStyle(nextSplitterCol).flexBasis
                    }
                }

                $L(prevSplitterCol).data('flexValues' , prevFlexValues);
                $L(nextSplitterCol).data('flexValues' , nextFlexValues);


                splitterComponent.addEventListener('mousemove' , adjustFun);
                splitterComponent.addEventListener('mouseup' , removeFun);
            }
            function adjustFun(event){
                var clientXchange = oldClientX - event.clientX;
                var availableSpace = (currentParent.getBoundingClientRect().width - ($L(lyteColRe).parent().children('lyte-column-handle').length * 8));
                var percentDiff = ((clientXchange / availableSpace)*100);

                if(((prevSplitterColBasis - percentDiff) >= prevEleMinSize) && ((nextSplitterColBasis + percentDiff) >= nextEleMinSize)){
                    prevSplitterCol.style.flexBasis = (prevSplitterColBasis - percentDiff) + "%";
                    prevSplitterCol.setAttribute('lt-prop-size' , ((prevSplitterColBasis - percentDiff) + "%"));
                    nextSplitterCol.style.flexBasis = (nextSplitterColBasis + percentDiff) + "%";
                    nextSplitterCol.setAttribute('lt-prop-size' , ((nextSplitterColBasis + percentDiff) + "%"))
                    prevFlexValues.value = (prevSplitterColBasis - percentDiff);
                    nextFlexValues.value = (nextSplitterColBasis + percentDiff);
                    $L(prevSplitterCol).data('flexValues' , prevFlexValues)
                    $L(nextSplitterCol).data('flexValues' , nextFlexValues)
                } else {
                    if(((prevSplitterColBasis - percentDiff) < (prevEleMinSize+1))){
                        nextSplitterCol.style.flexBasis = ((prevSplitterColBasis + nextSplitterColBasis)-prevEleMinSize) + "%";
                        nextSplitterCol.setAttribute('lt-prop-size' , (((prevSplitterColBasis + nextSplitterColBasis)-prevEleMinSize) + "%"))
                        prevSplitterCol.style.flexBasis = prevEleMinSize+"%";
                        prevSplitterCol.setAttribute('lt-prop-size' , (prevEleMinSize+"%"))
                    } else if(((nextSplitterColBasis + percentDiff) < (nextEleMinSize+1))){
                        prevSplitterCol.style.flexBasis = ((prevSplitterColBasis + nextSplitterColBasis)-nextEleMinSize) + "%";
                        prevSplitterCol.setAttribute('lt-prop-size' , (((prevSplitterColBasis + nextSplitterColBasis)-nextEleMinSize) + "%"));
                        nextSplitterCol.style.flexBasis = nextEleMinSize+"%";
                        nextSplitterCol.setAttribute('lt-prop-size' , (nextEleMinSize+"%"));
                    }
                }
            }
            function removeFun(){

                lyteColRe.classList.remove('splitResizing');
                // lyteColRe.style.background = "#ddd";
                // lyteColRe.children[0].style.background = "black";
                splitterComponent.removeEventListener('mousemove' , adjustFun);
                splitterComponent.removeEventListener('mouseup' , removeFun);

                var prevId = prevSplitterCol.getAttribute('lt-prop-splitter-id');
                var nextId = nextSplitterCol.getAttribute('lt-prop-splitter-id');

                var returnData = {};
                returnData[prevId] = {
                    'element' : prevSplitterCol,
                    'size' : prevSplitterCol.getAttribute('lt-prop-size')
                }
                returnData[nextId] = {
                    'element' : nextSplitterCol,
                    'size' : nextSplitterCol.getAttribute('lt-prop-size')
                }

                if(splitterComponent.getMethods('onResizeEnd')){
                    splitterComponent.component.executeMethod('onResizeEnd' , returnData);
                }
            }
        }

        static get observedAttributes() {
            return []
        }
    }

    LyteColumnHandleCustomElements.register('lyte-column-handle');
}


/**
 * @syntax yielded
 *	 <lyte-splitter>
 *	     <template is="registerYield" yield-name="splitter">
 *	       <lyte-column-splitter>
 *	         <lyte-column-element>
 *	           <lyte-row-splitter>
 *	             <lyte-row-element>
 *	               <lyte-column-splitter>
 *	                 <lyte-column-element>C1</lyte-column-element>
 *	               </lyte-column-splitter>
 *	             </lyte-row-element>
 *	             <lyte-row-element>R2</lyte-row-element>
 *	             <lyte-row-element>
 *	               <lyte-column-splitter>
 *	                 <lyte-column-element>
 *	                   <lyte-row-splitter>
 *	                     <lyte-row-element>R1</lyte-row-element>
 *	                   </lyte-row-splitter>
 *	                 </lyte-column-element>
 *	                 <lyte-column-element>C2</lyte-column-element>
 *	               </lyte-column-splitter>
 *	             </lyte-row-element>
 *	           </lyte-row-splitter>
 *	         </lyte-column-element>
 *	         <lyte-column-element>
 *	           <lyte-column-splitter>
 *	             <lyte-column-element>
 *	               <lyte-row-splitter>
 *	                 <lyte-row-element>
 *	                   <lyte-column-splitter>
 *	                     <lyte-column-element>C1</lyte-column-element>
 *	                   </lyte-column-splitter>
 *	                 </lyte-row-element>
 *	                 <lyte-row-element>R2</lyte-row-element>
 *	               </lyte-row-splitter>
 *	             </lyte-column-element>
 *	             <lyte-column-element>C2</lyte-column-element>
 *	             <lyte-column-element>
 *	               <lyte-row-splitter>
 *	                 <lyte-row-element>R1</lyte-row-element>
 *	               </lyte-row-splitter>
 *	             </lyte-column-element>
 *	           </lyte-column-splitter>
 *	         </lyte-column-element>
 *	       </lyte-column-splitter>
 *	     </template>
 *	   </lyte-splitter>
 */
export { LyteSplitterComponent };
