import { prop } from "@slyte/core";
import { Component } from "../component.js";
import $L from "@zoho/lyte-dom";

/**
 * This component is used to select user desired items from the list of available items
 * @component  lyte-column-chooser
 * @version 3.64.0
 * @dependency lyte-checkbox
 *  /components/lyte-checkbox
 *  /theme/compiledCSS/default/ltr/lyte-ui-checkbox.css 
 */

class LyteColumnChooserComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			/**
			 * @componentProperty {array} ltPropHeader
			 * @default []
			 */
			ltPropHeader : prop( 'array', { default : [] } ),
			ltPropSortable : prop( 'boolean', { default : false } ),
			ltPropYield : prop( 'boolean', { default : false } )
		};		
	}

    add2Sort(__src, __target, __grp) {
		var __newelem = __grp.children[ __target ];
		__grp.addToSortable( __newelem );
	}

    execute(cb, args) {
		if( this.getMethods( cb ) ){
			args = Array.from( args );
			args.unshift( cb );
			return this.executeMethod.apply( this, args );
		}
	}

    switch(__old, __new) {
		var __elem = this.$node.getElementsByClassName( 'lyteSortableParent' )[ 0 ];

		if( __elem ){
			var place_index,
			__children = Array.from( __elem.children ).filter( function( item, index ){
				if( item.classList.contains( 'lyteSortablePlaceholder' ) ){
					place_index = index;
					return false;
				}
				return true;
			}),
			__src = __children[ __old ],
			__target = __children[ __new ],
			__header = this.data.ltPropHeader,
			__len = __header.length,
			__max = Math.max( __old, __new ),
			__count = 0,
			__over = 0;

			for( var i = 0; i < __len; i++ ){
				var __cur = __header[ i ];
				if( __cur.columnChooser ){
					if( __count == __old ){
						__src.setAttribute( "parent_index", i );
						__over++;
					} else if( __count == __new ){
						__target.setAttribute( "parent_index", i );
						__over++;
					}

					__count++;

					if( __over == 2 ){
						break;
					}
				}
			}

			if( this.getMethods( 'onBeforeDrop' ) ){
				this.executeMethod( 'onBeforeDrop', __src, __target, __elem, __old, __new );
			}

			window.requestAnimationFrame( this.add2Sort.bind( this, __old, __new > place_index ? __new + 1 : __new, __elem ) );

			return false;
		}
	}

    checked() {
		this.execute( 'onChecked', arguments );
	}

    unchecked() {
		this.execute( 'onUnchecked', arguments );
	}

    static methods() {
        return {
            checked : function(){
                /**
                  * @method onChecked
                  * @version 3.64.0
                  */
                this.execute( "onChecked", arguments );
            },

            unchecked : function(){
                /**
                  * @method onChecked
                  * @version 3.64.0
                  */
                this.execute( "onUnchecked", arguments );
            }
        };
    }

    static observers() {
        return {
            sort_obs : function( arg ){

                var __this = this,
                __data = __this.data;

                if( !__data.ltPropYield ){
                    var __elem = $L( '.lyteColumnChooser', __this.$node );
                    if( __data.ltPropSortable ){
                        __elem.sortable({
                            onSelect : function(){
                                return __this.execute( "onBeforeSelect", arguments );
                            },
                            onBeforeDrop : function( __checkbox, __grp, __place, __src, __target ){
                                if( __src != __target ){

                                    if( !__grp.classList.contains( 'lyteColumnChooser' ) ){
                                        __grp = __grp.parentNode;
                                    }

                                    window.requestAnimationFrame( __this.add2Sort.bind( __this, __src, __target, __grp ) );

                                    return __this.execute( "onBeforeDrop", arguments );
                                }
                            },
                            onDrop : function(){
                                __this.execute( "onDrop", arguments );
                            }
                        })
                    } else if( arg ) {
                        __elem.sortable( "destroy" );
                    }
                } else if( !arg ) {

                    var $node = this.$node;

                    $node.switchPositions = this.switch.bind( this );
                    $node.checked = this.checked.bind( this );
                    $node.unchecked = this.unchecked.bind( this );

                    var cb = "onRender";
                    this.getMethods( cb ) && this.executeMethod( cb, this.$node );
                }
            }.observes( 'ltPropSortable' ).on( 'didConnect' )
        };
    }
}


/**
 * @syntax Non Yielded
 * <lyte-column-chooser></lyte-column-chooser>
 */

export { LyteColumnChooserComponent };