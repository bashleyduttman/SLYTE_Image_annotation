import { prop } from "@slyte/core";
import { Component } from "../component.js";

class LyteSkipToComponent extends Component {
    constructor() {
        super();
    }

    data() {
		return {
			ltPropData: prop('array', { default: [{}] })
		};
	}

    init() {
		var _this = this;
		document.addEventListener("keydown", (event) => {
			if (event.key == "Enter") {
				if (document.activeElement) {
					var currentIndex = parseInt($L(document.activeElement).attr('dom-index'))
					if (currentIndex >= 0) {
						var currentObj = _this.getData('ltPropData')[currentIndex]
						if (currentObj.target) {
							$L(currentObj.target)[0].focus();
						}
						else if (currentObj.container) {
							var focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), *[contenteditable]';
							var iniFocusableItems = [];
							iniFocusableItems = $L(currentObj.container).find(focusableElementsString).filter(function (ind, item) {
								return $L(item).is(':visible') && (item.tabIndex != -1) && !(item.disabled)
							})
							console.log(iniFocusableItems);
							$L(iniFocusableItems)[0].focus();
						}
					}
				}
			}
		});
	}

    static actions() {
        return {
            // Functions for event handling
        };
    }

    static methods() {
        return {
            // Functions which can be used as callback in the component.
        };
    }
}

export { LyteSkipToComponent };
