import $L from "@zoho/lyte-dom";

( function() {
	var eventManipulator = function( format ) {
		this.events = [];
		this.format = format;
	};
	var hiddenObj ;
	eventManipulator.prototype.addEvents = function( events ) {
		this.events = this.events.concat( events );
		this.sortEvents();
	}
	eventManipulator.prototype.removeEvents = function( eventsToRemove ) {
		var that = this;

		this.events.filter( function( event ) {
			return that.shouldRemoveEvent( eventsToRemove, event );
		} );
	}
	eventManipulator.prototype.shouldRemoveEvent = function( eventsToRemove, event ) {
		for( var i = 0; i < eventsToRemove.length; i++ ) {
			if( event.id === eventsToRemove[ i ].id ) {
				return false;
			}
		}

		return true;
	}
	eventManipulator.prototype.sortEvents = function() {
		var that = this;

		this.events.sort( function( eventA, eventB ) {
			const sortBAfterA = -1,
			sortAAfterB = 1;

			var format = that.format,
			eventAStartDate = eventA.start,
			eventBStartDate = eventB.start,
			dateCompareObj = $L.moment( eventAStartDate, format ).fromNow( $L.moment( eventBStartDate, format ) ),
			differenceBetweenDates = dateCompareObj.timestamp;

			if( differenceBetweenDates != 0 ) {
				return differenceBetweenDates > 0 ? sortBAfterA : sortAAfterB;
			}
			else {
				return that.compareEndDates( eventA, eventB );
			}
		} );
	}
	eventManipulator.prototype.compareEndDates = function( eventA, eventB ) {
		const sortBAfterA = -1,
		sortAAfterB = 1;

		var eventAEndDate = eventA.end || '',
		eventBEndDate = eventB.end || '',
		format = this.format,
		dateCompareObj = $L.moment( eventAEndDate, format ).fromNow( $L.moment( eventBEndDate, format ) ),
		differenceBetweenDates = dateCompareObj.timestamp;

		return differenceBetweenDates > 0 ? sortAAfterB : sortBAfterA;
		
	}
	eventManipulator.prototype.generateEventObjArr = function( event , format, view , weekStart , isMultiUser , maxEvent ){
		
		var schedulerevent =  event;
		var eventObj = {};
		hiddenObj = {};
		schedulerevent.forEach(function(item){
			var start_date = $L.moment(item.start,format);
			var end_date =  $L.moment(item.end,format);
			item.allDayEvent = true;
			if( start_date.format('DD-MM-YYYY') === end_date.format('DD-MM-YYYY') ){
				item.allDayEvent = false;
			}
			var start_format = start_date.format('DD-MM-YYYY');
			eventObj = window.addEventObj(start_date,eventObj,item,start_format,view,format , weekStart, isMultiUser , maxEvent);
		});
		return {'eventObj': eventObj, 'hiddenObj': hiddenObj};
	}
	eventManipulator.prototype.isinBetween = function(date,eventObj,event,indexDate,view,format , weekStart, isMultiUser , maxEvent){
		return window.isinBetween(date,eventObj,event,indexDate,view,format , weekStart, isMultiUser , maxEvent);
	}
	window.addEventObj = function(date,eventObj,event,indexDate,view,format , weekStart, isMultiUser , maxEvent){
		var start_format = date.format('DD-MM-YYYY');
		var start_date =  $L.moment(event.start,format);
		var cloneObject = window.$u.clone(event);
		var weekstart = weekStart === undefined ? 0 : weekStart;
		if(start_format == start_date.format('DD-MM-YYYY')){
			cloneObject.StartOfEvent = true;
		}else{
			delete cloneObject.middleofevent;
			cloneObject.endOfevent  =true;
		}
		if( window.isexceedMaxevent(eventObj,indexDate,event,isMultiUser,view,maxEvent) && (cloneObject.allDayEvent || view == 'month') ){
			window.addHiddenObj(indexDate,cloneObject,event,isMultiUser,view);
			if(view == 'month' && !isMultiUser){
				return eventObj;
			}
		}else{
			eventObj = window.pushEvent(eventObj,event.userid,indexDate,cloneObject,isMultiUser,view)
		}	
		var end_date = $L.moment(event.end,format);
		if(( view !== 'week' )  && ( isMultiUser || ( view== 'day' && !isMultiUser))){
			if(start_format !== end_date.format('DD-MM-YYYY') ){
				date.add(1,'date',true);
				indexDate = date.format('DD-MM-YYYY');
				eventObj = addEventObj(date,eventObj,event,indexDate,view,format,weekStart, isMultiUser ,maxEvent);
			}
		}
		else{
			var curr_date = ((6 - weekstart   ) + date.get('day') + 1) % 7;
			var EndOftheWeek  = $L.moment(date).add((6 - curr_date),'date',true);
			var start = start_format;
			if( window.isinBetween( start_format, EndOftheWeek.format('DD-MM-YYYY'), end_date.format('DD-MM-YYYY'), format )){
				if( !cloneObject.StartOfEvent ){
					delete cloneObject.endOfevent;
					cloneObject.middleofevent = true;
				}
				if(cloneObject.allDayEvent){
					eventObj = window.addDummyEvent(start,EndOftheWeek.format('DD-MM-YYYY'),event,eventObj,date,isMultiUser,view,maxEvent);
				}

				eventObj = addEventObj(EndOftheWeek.add(1,'date',true),eventObj,event,EndOftheWeek.format('DD-MM-YYYY'),view,format,weekStart, isMultiUser ,maxEvent);
			}else{
				if(cloneObject.allDayEvent){
					eventObj = window.addDummyEvent(start,end_date.format('DD-MM-YYYY'),event,eventObj,date,isMultiUser,view,maxEvent);
				}
			}

		}	
		return eventObj;
	}
	window.isinBetween =  function(start , curr_date, end, format){
		format = (format.split(' '))[0];
		return $L.moment(start, format).fromNow($L.moment( curr_date, format )).past  === false && $L.moment(end,format).fromNow($L.moment( curr_date, format )).past  === true;
	}
	window.pushEvent =  function(eventObj,user,date,event,isMultiUser,view){
		if(isMultiUser && view !== 'month' ){
			eventObj[date] = eventObj[date] ? eventObj[date] : [];
			eventObj[date][user] = eventObj[date][user] ? eventObj[date][user] : [];
			eventObj[date][user].push(event);
		}else{
			eventObj[date] = eventObj[date] ? eventObj[date] : [];
			eventObj[date].push(event);
		}
		return eventObj;
	}
	window.isexceedMaxevent = function(eventObj,indexDate,event,isMultiUser,view,MaxEvent){
		var maxEvent = MaxEvent;
		if(isMultiUser  && view !== 'month' ){
			eventObj[indexDate] = eventObj[indexDate] ? eventObj[indexDate] : [];
			eventObj[indexDate][event.userid] = eventObj[indexDate][event.userid] ? eventObj[indexDate][event.userid] : [];
			var length;
			if( view !== 'month'){
				length = window.$u.groupBy(eventObj[indexDate][event.userid],'allDayEvent').true;
				length = length ? length.length : 0;
			}else{
				length = eventObj[indexDate][event.userid].length;
			}
			return length >= maxEvent;
		}else{
			eventObj[indexDate] = eventObj[indexDate] ? eventObj[indexDate] : [];
			var length;
			if(view !== 'month' ){
				length = window.$u.groupBy(eventObj[indexDate],'allDayEvent').true;
				length = length ? length.length : 0;
			}else{
				length = eventObj[indexDate].length;
			}
			return length >= maxEvent;
		}
	}
	window.addHiddenObj = function(indexDate,cloneObject,event,isMultiUser,view){
		hiddenObj = this.pushEvent(hiddenObj,event.userid,indexDate,cloneObject,isMultiUser,view);
	}
	window.addDummyEvent = function(start,end,event,eventObj,StartDate,isMultiUser,view,MaxEvent){
		while(start !== end){
			start = StartDate.add(1, 'date', true).format('DD-MM-YYYY');
			if( !isexceedMaxevent(eventObj,start,event,isMultiUser,view,MaxEvent) ){
				eventObj = pushEvent(eventObj,event.userid,start,{},isMultiUser,view);
			}
		}
		return eventObj;
	}


	window._lyteUiUtils.eventManipulator = eventManipulator;
	
	var Intersection = function(handleIntersect,itersectionDiv,root) {
		let options = {
			root: root,
			rootMargin: "0px",
			thershold : 0
		  };
		var observer = new Intersection(handleIntersect, options);
		observer.observe(itersectionDiv);
	};
	_lyteUiUtils.intersection = Intersection;



} )();
