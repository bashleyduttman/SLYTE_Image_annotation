import { Service } from "@slyte/core";
import { extendEventListeners } from "@slyte/core/src/lyte-utils"
import { ComponentRegistry } from "@slyte/component";

class I18n extends Service {
  static properties = new Map();
  requestProperties(urlObj, namespace){
    return new Promise(function(resolve, reject){
        var self = this;
        var xhttp = new XMLHttpRequest();
        xhttp.open(urlObj.method || "POST", urlObj.url, true);
        for(var header in urlObj.headers){
            xhttp.setRequestHeader(header, urlObj.headers[header]);
        }
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                if(xhttp.responseText){
                    try{
                        var props = JSON.parse(xhttp.responseText)
                    }
                    catch(exp){
                        console.warn("Cannot parse response", exp);
                        reject("Cannot parse response", exp)
                    }
                    if(props){
                        self.setProperties(props, namespace);
                        resolve(self.getProperties());
                    }
                }
            }
        };
        xhttp.send();
    }.bind(this))
  }

  getProperties(namespace){
      namespace = namespace || this.cNamespace;
      if(this.properties && this.properties.has(namespace)){
          return this.properties.get(namespace);
      }
      return {};
  }

  hasProperty(key, scope){
    return scope && this.properties.has(scope) ? this.properties.get(scope).hasOwnProperty(key) : false;
  }

  getLyteIns(context){
    return context.$app || context.$addon;
  }

  getScope(ins, key){
    var hash, 
    cons = ins.constructor;
    if(ins.__isApp || ins.__isAddon){
      hash = ins._hash;
    }
    else if(cons){
      if(cons.__lMod == "Component"){
        // hash = cons;
        hash = cons._hash;
        var cins = ins, parentLyteIns = this.getLyteIns(ins);
        // while(cins.$node._callee != undefined && cins.$node._route == undefined ){
        //   if(this.hasProperty(key, cins.constructor)){
        //     // hash = cins.constructor;
        //     hash = cins.constructor._hash;
        //     break;
        //   }
        //   cins = cins.$node._callee.component;
        //   if(parentLyteIns != this.getLyteIns(cins)){
        //     // hash = cins.constructor
        //     hash = cins.constructor._hash
        //     break;
        //   }
        //   // hash = cins.constructor;
        //   hash = cins.constructor._hash;
        // }
        var cRoute;
        if(cins.$node._route){
          cRoute = cins.$node._route;
        }
        if(!this.hasProperty(key, hash)){
          hash = cons._registryClass._hash;
          // hash = cons._registryClass;
          if(!this.hasProperty(key, hash)){
            // hash = ins.$app.constructor._hash;
            if(cRoute){
              if(parentLyteIns.$.modules.router){
                var rIns = parentLyteIns.$.modules.router[0].getRouteInstance(cRoute), router;
                while(rIns){
                  router = rIns.$router;
                  if(this.hasProperty(key, rIns.constructor._hash)){
                    hash = rIns.constructor._hash;
                    break;
                  }
                  rIns = rIns.parent;
                }
                if(!rIns && router){
                  hash = router._hash;
                  if(!this.hasProperty(key, hash)){
                    hash = ins.$app.constructor._hash;
                    // hash = this.getLyteIns(ins).constructor;
                  }
                }
              }
            }
            else{
              hash = this.getLyteIns(ins).constructor;
            }
          }
        }
      }
      else if(cons.__lMod == "Route"){
        var rIns = ins, router;
        while(rIns){
          router = rIns.$router;
          if(this.hasProperty(key, rIns.constructor._hash)){
            hash = rIns.constructor._hash;
            break;
          }
          rIns = rIns.parent;
        }
        if(!rIns && router){
          hash = router.constructor;
          if(!this.hasProperty(key, hash)){
            // hash = ins.$app.constructor._hash;
            hash = this.getLyteIns(ins).constructor;
          }
        }
      }
      else if(cons.__lMod == "ComponentRegistry"){
        hash = cons._hash;
        // hash = cons;
        if(!this.hasProperty(key, hash)){
          hash = ins.$app.constructor._hash;
          // hash = this.getLyteIns(ins).constructor;
        }
      }
      else if(cons.__lMod == "Router"){
        hash = cons;
        if(!this.hasProperty(key, hash)){
          hash = ins.$app.constructor._hash;
          // hash = this.getLyteIns(ins).constructor;
        }
      }
    }
    else if(typeof ins == "string"){
      return ins;
    }
    return hash;
  }

  translate(key,params,scope){
    debugger;
    //console.log("I18n.translate ::: called for key :: "+key+" ::: "+params+" :::: "+module);
    if(scope){
      scope = this.getScope(scope, key);
    }
    var namespace = scope || this.cNamespace;
    var i18nedKey = key;
    if(this.properties){
        var props = this.properties.get(namespace);
        params = (params && !Array.isArray(params)) ? [params] : params;
        if(props && props[key]){
            i18nedKey = props[key];
        }
        if(i18nedKey &&  Array.isArray(params) && params.length){
            i18nedKey = i18nedKey.replace(/{(\d+)}/g, function(template, idx) {
                var param = params[idx]
                if(typeof param == "string"){
                    return param;
                }
                else if(param && typeof param == "object"){
                    return this.translate(param.key, param.params, param.namespace || namespace);
                }
            });
        }
    }
    return i18nedKey;
  }

  translateMultiple(keysJSONArray, namespace){
      var keysArrayLen = keysJSONArray.length;
      namespace = namespace || this.cNamespace;
      var translatedKeys = {};
      for(var idx = 0 ; idx < keysArrayLen ; idx++ ){
          var data = keysJSONArray[idx], key, params = [], nmspace = namespace;
          if(data && typeof data == "object"){
              key = data.key, params = data.params, nmspace = data.namespace;
          }
          else if(typeof data == "string"){
              key = data;
          }
          translatedKeys[key] = this.translate(key, params, nmspace || namespace);
      }      
      return translatedKeys;
  }

  setDefaultNamespace(name){
      this.cNamespace = name || "root";
  }

  set(key,val,namespace){         
      namespace = namespace || this.cNamespace;
      if(this.properties){
          if(!this.properties.has(namespace)){
            this.properties.set(namespace, {});
          }
          var props = this.properties.get(namespace);
          // var props = this.properties[namespace] = this.properties[namespace] || {};
          if(key && val){
              props[key] = val;    
          }        
      }
  }

  static setProperties(keyvaljson, namespace){
      namespace = namespace || this.cNamespace;
      if(this.properties){
          if(!this.properties.has(namespace)){
            this.properties.set(namespace, {});
          }
          var props = this.properties.get(namespace);
          // var props = this.properties[namespace] = this.properties[namespace] || {};
          if(props){
              Object.assign(props, keyvaljson);
          }
      }
  }
  
  setProperties(keyvaljson, namespace){
    I18n.setProperties.apply(this, [keyvaljson, namespace]);
  }

  constructor(options) {
      super(options);
      var self = this;
      this.properties = new Map();
      if(I18n.properties.size){
        I18n.properties.forEach(function(value, key){
          self.properties.set(key, value);
        });
      }
      // this.properties = Object.assign({},I18n.properties);
      this.dNamespace = "root";
      this.globalKey = "I18n";
      this.cNamespace = this.dNamespace;
      options = options || {};
      options.defaultNamespace ? this.dNamespace = this.cNamespace = options.defaultNamespace : undefined;
      var namespace = options.namespace || this.cNamespace;
      if(options.properties && typeof options.properties == "object"){
        this.setProperties(options.properties, namespace);
      }
      var glbKey = options.globalKey || this.globalKey;
      Object.defineProperty(window, glbKey, {
          value : this
      });
      I18n.addEventListener("add", function(obj, hash){
        self.setProperties(obj, hash);
      });
      ComponentRegistry.registerHelper(options.helperName || "translate", function(key, params, namespace){
          return self.translate(key, params, this);
      });
      ComponentRegistry.registerHelper((options.helperName || "translate")+"Params", function(){
          return Array.from(arguments);
      });
  }
  static register(properties, hash){
    I18n.setProperties(properties, hash);
    this.triggerEvent("add", properties, hash);
  }
}
extendEventListeners(I18n);
export  {I18n};