import { Service } from "./service";

class Migrate extends Service{
    constructor(){
        super();
        var listen = {};
        this.migrateLyte(this.$app);
        if(this.$app.$.modules.hasOwnProperty("router")){
            this.migrateRouter(this.$app.$.modules.router[0]); 
        }
        else{
            listen.router = true;
        }
        if(this.$app.$.modules.hasOwnProperty("component")){
            this.migrateComponent(this.$app.$.modules.component[0]);
        }
        else{
            listen.component = true;
        }
        if(this.$app.$.modules.hasOwnProperty("db")){
            this.migrateDb(this.$app.$.modules.db[0]);
        }
        else{
            listen.db = true;
        }
        if(Object.keys(listen).length){
            var self = this;
            var id = this.$app.$.modules.addEventListener("add", function(name, ins){
                switch(name){
                    case "component": {
                        if(listen.component){
                            self.migrateComponent(self.$app.$.modules.component[0]);
                            delete listen.component;
                        }
                    }
                    break;
                    case "router": {
                        if(listen.router){
                            self.migrateRouter(self.$app.$.modules.router[0]);
                            delete listen.router;
                        }
                    }
                    break;
                    case "db": {
                        if(listen.db){
                            self.migrateDb(self.$app.$.modules.db[0]);
                            delete listen.db;
                        }
                    }
                    break;

                    default : {
                        if(!Object.keys(listen).length){
                            self.$app.$.modules.removeEventListener(id);
                        }
                    }
                }
            });
        }
    }
    migrateComponent(ins){
            var allowedReadInsProps = [ "registeredHelpers", "registeredComponents"];
            var allowedReadInsFunctions = ["set", "render", "appendChild", "replaceWith", "insertBefore", "insertAfter", "arrayUtils", "objectUtils", "get", "modifyTemplate", "compileDynamicTemplate", "doDomProcessing", "getComponentTemplate"];
            var allowedReadClassFunctions = ["registerHelper", "unregisterComponent", "registerCustomPropHandler"];
            var allowedWriteProps = [];
            var registryClass = ins.constructor;
            this.Component = new Proxy(ins, {
                get(target, prop, receiver){
                    if(allowedReadInsProps.indexOf(prop)!= -1) {
                        return target[prop];
                    } else if(allowedReadInsFunctions.indexOf(prop) != -1) {
                        return function() {
                            return target[prop].apply(target, Array.from(arguments));
                        }
                    } else if(allowedReadClassFunctions.indexOf(prop) != -1) {
                        return function() {
                            return registryClass[prop].apply(registryClass, Array.from(arguments));
                        }
                    }
                }   
                ,
                set(obj, prop, value){
                    if(allowedWriteProps.indexOf(prop) !== -1){
                        obj[prop] = value; 
                    }
                    return true;
                }
            });
        }
    migrateRouter(ins){
        // var allowedReadProps = ["getRouteInstance", "transitionTo", "replaceWith", "checkIfSameRoute", "getRoute", "getURL", "beforeRouteTransition", "afterRouteTransition"];
        var allowedReadProps = [];
        var allowedWriteProps = []
        this.Router = new Proxy(ins, {
            get(target, prop, receiver){
                if(allowedReadProps.indexOf(prop) !== -1){
                    return target[prop];
                }
            }   
            ,
            set(obj, prop, value){
                if(allowedWriteProps.indexOf(prop) !== -1){
                    obj[prop] = value; 
                }
                return true;
            }
        });
    }
    migrateDb(ins){
        var allowedReadProps = ["model", "adapter", "serializer"];
        var allowedWriteProps = [];
        var allowedMethods = ["addField", "getPrimaryKey", "triggerUpdate", "batch", "clearCachedQuery", "setErrorMessages","pushPayload", "triggerAction", "unloadAll", "unloadRecord", "findAll", "findRecord", "peekAll", "peekRecord", "modelFor", "create", "update", "delete", "createRecord", "deleteRecord", "deleteMany", "rollBack"];
        var methodNameChange = { "findAll": "getAll", "findRecord": "getEntity", "createRecord": "newEntity", "deleteRecord": "deleteEntity", "rollBack": "revert", "unloadAll":"dropAll", "unloadRecord":"dropEntity", "pushPayload": "push"};
        this.store = window.store = new Proxy(ins, {
            get(target, prop, receiver){
                if(allowedReadProps.indexOf(prop) !== -1){
                    switch(prop){
                        case "model": {
                            return target.schema;
                        }
                        case "adapter": {
                            return target.connector;
                        }
                        default: {
                            return target[prop];
                        }
                    }
                }
                else if(allowedMethods.indexOf(prop) !== -1){
                    switch(prop){
                        case "findAll":
                        case "findRecord": 
                        case "createRecord":
                        case "deleteRecord":
                        case "rollBack":
                        case "unloadAll":
                        case "unloadRecord":
                        case "pushPayload":
                        {
                            return function(){
                                var arr = Array.from(arguments);
                                arr[0] = target.schema[arr[0]];
                                arr[0] = arr[0] ? arr[0].def : undefined
                                return target[methodNameChange[prop]].apply(target, arr);
                            }
                        }
                        case "modelFor": {
                            return function(){
                                return target.getSchema.apply(target, arguments);
                            }
                        }
                        case "peekAll": {
                            return function(){
                                var arr = Array.from(arguments);
                                arr[0] = target.schema[arr[0]];
                                arr[0] = arr[0] ? arr[0].def : undefined
                                return target.cache.getAll.apply(target, arr);
                            }
                        }
                        case "peekRecord": {
                            return function(){
                                var arr = Array.from(arguments);
                                arr[0] = target.schema[arr[0]];
                                arr[0] = arr[0] ? arr[0].def : undefined
                                return target.cache.getEntity.apply(target, arr);
                            }
                        }
                        default: {
                            return function(){
                                var arr = Array.from(arguments);
                                arr[0] = target.schema[arr[0]];
                                arr[0] = arr[0] ? arr[0].def : undefined
                                return target[prop].apply(target, arr);
                            }
                        }                    
                    }
                }
            }   
            ,
            set(obj, prop, value){
                if(allowedWriteProps.indexOf(prop) !== -1){
                    obj[prop] = value; 
                }
                return true;
            }
        });
    }
    migrateLyte(ins){
            var allowedReadProps = ["Component", "Router"];
            var allowedClassReadProps = ["createCustomElement"];
            var allowedReadFunctions = ["triggerEvent", "addEventListener", "removeEventListener","arrayUtils", "objectUtils", "injectResources", "removeFromCache", "resolvePromises"];
            var allowedWriteProps = []
            var self = this;
            this.Lyte = window.Lyte = new Proxy(ins, {
                get(target, prop, receiver){
                    switch(prop) {
                        case "Component" : 
                            return self.Component;
                        case "Router" : 
                            return self.Router;
                        case "Secruity" : 
                            return target.Security;
                        default : 
                            if(allowedReadProps.indexOf(prop) !== -1){
                                return target[prop];
                            } else if(allowedReadFunctions.indexOf(prop) != -1) {
                                return function() {
                                    return target[prop].apply(target, Array.from(arguments));
                                }
                            } else if(allowedClassReadProps.indexOf(prop) != -1) {
                                return function() {
                                    return target.constructor[prop].apply(target.constructor[prop], Array.from(arguments));
                                }
                            }
                    }
                    
                }   
                ,
                set(obj, prop, value){
                    if(allowedWriteProps.indexOf(prop) !== -1){
                        obj[prop] = value; 
                    }
                    return true;
                }
            });
        }
}

export { Migrate };
