

/**
 * Encoder
 * */
'use strict'; // No I18N
(function(encoder) {

    var characterToEntityMap = {};
    var characterToEntityArray = "34=&quot|38=&amp|60=&lt|62=&gt|160=&nbsp|161=&iexcl|162=&cent|163=&pound|164=&curren|165=&yen|166=&brvbar|167=&sect|168=&uml|169=&copy|170=&ordf|171=&laquo|172=&not|173=&shy|174=&reg|175=&macr|176=&deg|177=&plusmn|178=&sup2|179=&sup3|180=&acute|181=&micro|182=&para|183=&middot|184=&cedil|185=&sup1|186=&ordm|187=&raquo|188=&frac14|189=&frac12|190=&frac34|191=&iquest|192=&Agrave|193=&Aacute|194=&Acirc|195=&Atilde|196=&Auml|197=&Aring|198=&AElig|199=&Ccedil|200=&Egrave|201=&Eacute|202=&Ecirc|203=&Euml|204=&Igrave|205=&Iacute|206=&Icirc|207=&Iuml|208=&ETH|209=&Ntilde|210=&Ograve|211=&Oacute|212=&Ocirc|213=&Otilde|214=&Ouml|215=&times|216=&Oslash|217=&Ugrave|218=&Uacute|219=&Ucirc|220=&Uuml|221=&Yacute|222=&THORN|223=&szlig|224=&agrave|225=&aacute|226=&acirc|227=&atilde|228=&auml|229=&aring|230=&aelig|231=&ccedil|232=&egrave|233=&eacute|234=&ecirc|235=&euml|236=&igrave|237=&iacute|238=&icirc|239=&iuml|240=&eth|241=&ntilde|242=&ograve|243=&oacute|244=&ocirc|245=&otilde|246=&ouml|247=&divide|248=&oslash|249=&ugrave|250=&uacute|251=&ucirc|252=&uuml|253=&yacute|254=&thorn|255=&yuml|338=&OElig|339=&oelig|352=&Scaron|353=&scaron|376=&Yuml|402=&fnof|710=&circ|732=&tilde|913=&Alpha|914=&Beta|915=&Gamma|916=&Delta|917=&Epsilon|918=&Zeta|919=&Eta|920=&Theta|921=&Iota|922=&Kappa|923=&Lambda|924=&Mu|925=&Nu|926=&Xi|927=&Omicron|928=&Pi|929=&Rho|931=&Sigma|932=&Tau|933=&Upsilon|934=&Phi|935=&Chi|936=&Psi|937=&Omega|945=&alpha|946=&beta|947=&gamma|948=&delta|949=&epsilon|950=&zeta|951=&eta|952=&theta|953=&iota|954=&kappa|955=&lambda|956=&mu|957=&nu|958=&xi|959=&omicron|960=&pi|961=&rho|962=&sigmaf|963=&sigma|964=&tau|965=&upsilon|966=&phi|967=&chi|968=&psi|969=&omega|977=&thetasym|978=&upsih|982=&piv|8194=&ensp|8195=&emsp|8201=&thinsp|8204=&zwnj|8205=&zwj|8206=&lrm|8207=&rlm|8211=&ndash|8212=&mdash|8216=&lsquo|8217=&rsquo|8218=&sbquo|8220=&ldquo|8221=&rdquo|8222=&bdquo|8224=&dagger|8225=&Dagger|8226=&bull|8230=&hellip|8240=&permil|8242=&prime|8243=&Prime|8249=&lsaquo|8250=&rsaquo|8254=&oline|8260=&frasl|8364=&euro|8465=&image|8472=&weierp|8476=&real|8482=&trade|8501=&alefsym|8592=&larr|8593=&uarr|8594=&rarr|8595=&darr|8596=&harr|8629=&crarr|8656=&lArr|8657=&uArr|8658=&rArr|8659=&dArr|8660=&hArr|8704=&forall|8706=&part|8707=&exist|8709=&empty|8711=&nabla|8712=&isin|8713=&notin|8715=&ni|8719=&prod|8721=&sum|8722=&minus|8727=&lowast|8730=&radic|8733=&prop|8734=&infin|8736=&ang|8743=&and|8744=&or|8745=&cap|8746=&cup|8747=&int|8756=&there4|8764=&sim|8773=&cong|8776=&asymp|8800=&ne|8801=&equiv|8804=&le|8805=&ge|8834=&sub|8835=&sup|8836=&nsub|8838=&sube|8839=&supe|8853=&oplus|8855=&otimes|8869=&perp|8901=&sdot|8968=&lceil|8969=&rceil|8970=&lfloor|8971=&rfloor|10216=&lang|10217=&rang|9674=&loz|9824=&spades|9827=&clubs|9829=&hearts|9830=&diams"; // No I18N
    characterToEntityArray = characterToEntityArray.split("|");
    for (var each = 0; each < characterToEntityArray.length; each++) {
        var eachEntry = characterToEntityArray[each].split("=");
        characterToEntityMap[eachEntry[0]] = eachEntry[1];
    }

    function toCharCodeArr(charArr){
        var charCodeArr = [];
        for(var i = 0; i < charArr.length; i++){
            charCodeArr.push(charArr[i].charCodeAt(0));
        }
        return charCodeArr;
    }

    var config = {
        characterToEntityMap: characterToEntityMap,
        IMMUNE_HTML:        toCharCodeArr(new Array(',', '.', '-', '_', ' ')), // No I18N
        IMMUNE_HTMLATTR:    toCharCodeArr(new Array(',', '.', '-', '_')), // No I18N
        IMMUNE_CSS:         toCharCodeArr(new Array()),
        IMMUNE_JAVASCRIPT:  toCharCodeArr(new Array(',', '.', '_')) // No I18N
    }

    ZSEC.util.defineProperty(ZSEC, 'Encoder', encoder(config), true, false, false, true); // No I18N

}(function encoder(config) {

    var Encoder = {};
    var characterToEntityMap = config.characterToEntityMap;

    var hex = [];
    for (var c = 0; c < 0xFF; c++) {
        if (c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A) {
            hex[c] = null;
        } else {
            hex[c] = c.toString(16);
        }
    };

    var getHexForNonAlphanumeric = function(c) {
        if (c < 256) {
            return hex[c];
        }
        return c.toString(16);
    };

    var encodeHTMCharacter = function(aImmune, c) {
        if (ZSEC.util.ArrayIndexOf.call(aImmune, c) != -1) {
            return String.fromCodePoint(c);
        }
        var hex = getHexForNonAlphanumeric(c);
        if (hex == null) {
            return String.fromCodePoint(c);
        }

        // returning space for non printable characters
        if ((c <= 0x1f && c != '\t' && c != '\n' && c != '\r') || (c >= 0x7f && c <= 0x9f) || c == ' ') { // No I18N
            return " "; // No I18N
        }

        var entityName = characterToEntityMap[c];
        if (entityName != null) {
            return entityName + ";"; // No I18N
        }

        return "&#x" + hex + ";"; // No I18N
    }

    var encodeJsCharacter = function(aImmune, c) {
        if (ZSEC.util.ArrayIndexOf.call(aImmune, c) != -1) {
            return String.fromCharCode(c);
        }
        var hex = getHexForNonAlphanumeric(c);
        if (hex == null) {
            return String.fromCharCode(c);
        }
        var tmp = c.toString(16);
        if (c < 256) {
            var pad = "00".substr(tmp.length); // No I18N
            return "\\x" + pad + tmp.toUpperCase(); // No I18N
        }
        pad = "0000".substr(tmp.length); // No I18N
        return "\\u" + pad + tmp.toUpperCase(); // No I18N
    };

    var encodeCssCharacter = function(aImmune, c) {
        if (ZSEC.util.ArrayIndexOf.call(aImmune, c) != -1) {
            return String.fromCodePoint(c);
        }

        var hex = getHexForNonAlphanumeric(c);
        if (hex == null) {
            return String.fromCodePoint(c);
        }

        return "\\" + hex + " "; // No I18N
    };

    /**
     * It iterate over the characters in sInput and calls characterEncoder to encode it. It iterate either by code unit or code point depend uppon the isHandleUnicodeChar value
     * @param   {Array} aImmune -> immune character list
     * @param   {String} sInput
     * @param   {Function}  characterEncoder
     * @param   {Boolean}  isHandleUnicodeChar -> if true iterate by codePoint
     */
    function encode(aImmune, sInput, characterEncoder, isHandleUnicodeChar) {

        if (sInput == null || sInput == undefined || "string" != typeof sInput) { // No I18N
            return sInput;
        }
        var out = ''; // No I18N
        for (var i = 0; i < sInput.length; i++) {
            if (isHandleUnicodeChar) {
                var c = sInput.codePointAt(i);
                out += characterEncoder(aImmune, c, isHandleUnicodeChar);
                if (c > 0xFFFF) {
                    i++;
                }
            } else {
                out += characterEncoder(aImmune, sInput.charCodeAt(i));

            }
        }
        return out;
    };


    /**
     * It encodes text which has to be rendered as element text, Here input has to be iterated by code point
     *@param  {String} input
     */
    Encoder.encodeForHTML = function encodeForHTML(input) {
        return encode(config.IMMUNE_HTML, input, encodeHTMCharacter, true);
    };


    /**
     * It encodes text which has to be rendered as html attribute value(except attributes executes as js example onclick,onblur etc...), Here input has to be iterated by code point
     *@param {String} input
     */
    Encoder.encodeForHTMLAttribute = function encodeForHTMLAttribute(input) {
        return encode(config.IMMUNE_HTMLATTR, input, encodeHTMCharacter, true);
    };


    /**
     * It encodes text which has to be rendered as value inside the script tag or html attribute which get executed as js(onclick,onblur etc...), Here input has to be iterated by code unit
     *@param {String} inputtriggertrigger
     */
    Encoder.encodeForJavaScript = function encodeForJavaScript(input) {
        return encode(config.IMMUNE_JAVASCRIPT, input, encodeJsCharacter, false);
    };

    /**
     * It encodes text which has to be rendered as css property name or value, Here input has to be iterated by code unit
     *@param {String} input
     */
    Encoder.encodeForCSS = function encodeForCSS(input) {
        return encode(config.IMMUNE_CSS, input, encodeCssCharacter, true);
    };

    if (Object.freeze) {
        Object.freeze(Encoder)
    }
    return Encoder;
}));