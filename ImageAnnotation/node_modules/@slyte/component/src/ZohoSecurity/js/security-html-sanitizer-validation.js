

/**
 * configValidator
 * */
'use strict'; // No I18N
ZSEC.util.defineProperty(ZSEC, 'configValidator', {}, false, false, true); // No I18N

(function(root) {

    function HTMLPurifierValidation(conf, allConfigFlags, inheritableConfig, defaultForbiddenTags, defaultForbiddenAttr) {
        var booleanFlags = addToSet({}, ["ALLOW_ARIA_ATTR", "ALLOW_DATA_ATTR", "ALLOW_UNKNOWN_PROTOCOLS", "SAFE_FOR_JQUERY", "SAFE_FOR_TEMPLATES", "WHOLE_DOCUMENT", "RETURN_DOM", "RETURN_DOM_FRAGMENT", "RETURN_DOM_IMPORT", "FORCE_BODY", "SANITIZE_DOM", "KEEP_CONTENT", "STYLE_VALIDATION", "REMOVE_ONEVENTS"]); // No I18N

        //Check for any misspelled flags
        for (var eachFlag in conf) {
            if (!(eachFlag in allConfigFlags)) {
                throw new Error("Invalid Flag in configuration! Value: " + eachFlag + ". Must be one of the following: " + JSON.stringify(["ALLOW_ARIA_ATTR", "ALLOW_DATA_ATTR", "ALLOW_UNKNOWN_PROTOCOLS", "SAFE_FOR_JQUERY", "SAFE_FOR_TEMPLATES", "WHOLE_DOCUMENT", "RETURN_DOM", "RETURN_DOM_FRAGMENT", "RETURN_DOM_IMPORT", "FORCE_BODY", "SANITIZE_DOM", "KEEP_CONTENT", "STYLE_VALIDATION", "ALLOWED_STYLE", "ALLOWED_TAGS", "ALLOWED_ATTR", "FORBID_TAGS", "FORBID_ATTR", "ADD_URI_SAFE_ATTR", "EXTENDS", "GLOBAL_APPEND_ATTRIBUTES", "GLOBAL_ATTRIBUTE_RULES", "REMOVE_ONEVENTS"])); // No I18N
            }
        }

        //Check Values of all Boolean Flags in the configuration
        for (var eachBooleanFlag in booleanFlags) {
            if (!(conf[eachBooleanFlag] === true || conf[eachBooleanFlag] === false)) {
                throw new Error("Invalid Value for '" + eachBooleanFlag + "' in the configuration. It needs to be either 'true' or 'false'") // No I18N
            }
        }

        //DATA Attributes should be removed when SAFE_FOR_TEMPLATES is set to true
        if (conf.SAFE_FOR_TEMPLATES) {
            if (conf.ALLOW_DATA_ATTR) {
                throw new Error("'ALLOW_DATA_ATTR' should not be set when 'SAFE_FOR_TEMPLATES' is true"); // No I18N
            }
        }

        //Validate value of ALLOWED_STYLE and set allowed tags/attributes accordingly
        if (conf.ALLOWED_STYLE) {
            conf.ALLOWED_STYLE = conf.ALLOWED_STYLE.toUpperCase();
            if (!(conf.ALLOWED_STYLE == "ALL" || conf.ALLOWED_STYLE == "INTERNAL" || conf.ALLOWED_STYLE == "INLINE" || conf.ALLOWED_STYLE == "NONE")) { // No I18N
                throw new Error("Invalid Value for 'ALLOWED_STYLE' in the configuration. It needs to be either 'ALL', 'INTERNAL', 'INLINE' or 'NONE'"); // No I18N
            }
        }

        //Validate ADD_URI_SAFE_ATTR in configuration
        if (conf.ADD_URI_SAFE_ATTR) {
            if (!(conf.ADD_URI_SAFE_ATTR.constructor === Array)) {
                throw new Error("Invalid Value for 'ADD_URI_SAFE_ATTR' in the configuration.It must be an Array"); // No I18N
            }
        } else {
            conf.ADD_URI_SAFE_ATTR = [];
        }

        //Validate GLOBAL_APPEND_ATTRIBUTES rules in the configuration
        if (conf.GLOBAL_APPEND_ATTRIBUTES) {
            for (var each = 0; each < conf.GLOBAL_APPEND_ATTRIBUTES.length; each++) {
                if (conf.GLOBAL_APPEND_ATTRIBUTES[each].NAME != undefined && conf.GLOBAL_APPEND_ATTRIBUTES[each].VALUE != undefined) {
                    if (conf.GLOBAL_APPEND_ATTRIBUTES[each].CRITERIA) {
                        for (var j = 0; j < conf.GLOBAL_APPEND_ATTRIBUTES[each].CRITERIA.length; j++) {
                            var eachCriteria = conf.GLOBAL_APPEND_ATTRIBUTES[each].CRITERIA[j];
                            // TODO: Improve validation checks here
                            if (!eachCriteria.NAME) {
                                throw new Error("Invalid value for MAX_LENGTH in GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                            }
                            if (eachCriteria.MAX_LENGTH && eachCriteria.MAX_LENGTH.constructor !== Number) {
                                throw new Error("Invalid value for MAX_LENGTH in GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                            }
                            if (eachCriteria.MIN_LENGTH && eachCriteria.MIN_LENGTH.constructor !== Number) {
                                throw new Error("Invalid value for MIN_LENGTH in GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                            }
                            if (eachCriteria.REGEX && eachCriteria.REGEX.constructor !== RegExp) {
                                throw new Error("Invalid value for REGEX in GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                            }
                            if (eachCriteria.LIST && eachCriteria.LIST.constructor !== Array) {
                                throw new Error("Invalid value for LIST in GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                            }
                        }
                    }
                } else {
                    throw new Error("The Attribute Name and Attribute Value must be mentioned for GLOBAL_APPEND_ATTRIBUTES rules", conf.GLOBAL_APPEND_ATTRIBUTES[each]); // No I18N
                }
            }
        } else {
            conf.GLOBAL_APPEND_ATTRIBUTES = [];
        }

        //Validate GLOBAL_ATTRIBUTE_RULES rules in the configuration
        if (conf.GLOBAL_ATTRIBUTE_RULES) {
            for (var i in conf.GLOBAL_ATTRIBUTE_RULES) {
                if (conf.GLOBAL_ATTRIBUTE_RULES.hasOwnProperty(i)) {
                    var eachValidateRule = conf.GLOBAL_ATTRIBUTE_RULES[i];
                    if (!(eachValidateRule.NAME == undefined)) {
                        if (!(eachValidateRule.ACTION == undefined)) {
                            if (eachValidateRule.ACTION != "REMOVE_ATTRIBUTE" && eachValidateRule.ACTION != "REMOVE_ATTRIBUTE_VALUE" && eachValidateRule.ACTION != "REPLACE") {
                                throw new Error("Invalid value for ACTION in GLOBAL_ATTRIBUTE_RULES rule. Must be one of 'REMOVE_ELEMENT', 'REMOVE_ATTRIBUTE', 'REMOVE_ATTRIBUTE_VALUE', or 'REPLACE'", eachValidateRule); // No I18N
                            }
                            if (eachValidateRule.MAX_LENGTH && eachValidateRule.MAX_LENGTH.constructor !== Number) {
                                throw new Error("Invalid value for MAX_LENGTH in GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                            }
                            if (eachValidateRule.MIN_LENGTH && eachValidateRule.MIN_LENGTH.constructor !== Number) {
                                throw new Error("Invalid value for MIN_LENGTH in GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                            }
                            if (eachValidateRule.REGEX && eachValidateRule.REGEX.constructor !== RegExp) {
                                throw new Error("Invalid value for REGEX in GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                            }
                            if (eachValidateRule.LIST && eachValidateRule.LIST.constructor !== Array) {
                                throw new Error("Invalid value for LIST in GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                            }
                        } else {
                            throw new Error("ACTION must be mentioned for GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                        }
                    } else {
                        throw new Error("The Attribute Name must be mentioned for GLOBAL_ATTRIBUTE_RULES rules", eachValidateRule); // No I18N
                    }
                }
            }
        } else {
            conf.GLOBAL_ATTRIBUTE_RULES = {};
        }

        //Check for mismatch in style validation
        if (conf.ALLOWED_STYLE == "ALL") { // No I18N
            if (conf.FORBID_TAGS.indexOf('style') > -1 || conf.FORBID_ATTR.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'ALL'"); // No I18N
            }
        } else if (conf.ALLOWED_STYLE == "INLINE") { // No I18N
            if (conf.FORBID_ATTR.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'INLINE'"); // No I18N
            }
            if (conf.ALLOWED_TAGS.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the allowed tag list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'INLINE'"); // No I18N
            }
        } else if (conf.ALLOWED_STYLE == "INTERNAL") { // No I18N
            if (conf.FORBID_TAGS.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the forbidden tag/attribute list but have specified to not remove it in the 'ALLOWED_STYLE' flag by setting it to 'INTERNAL'"); // No I18N
            }
            if (conf.ALLOWED_ATTR.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the allowed attribute list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'INTERNAL'"); // No I18N
            }
        } else if (conf.ALLOWED_STYLE == "NONE") { // No I18N
            if (conf.ALLOWED_TAGS.indexOf('style') > -1 || conf.ALLOWED_ATTR.indexOf('style') > -1) { // No I18N
                throw new Error("You have added style to the allowed tag/attribute list but have specified to remove it in the 'ALLOWED_STYLE' flag by setting it to 'NONE'"); // No I18N
            }
        }

        //Check for mismatches between allowed/forbidden tags/attributes
        for (var each in conf.ALLOWED_TAGS_OBJ) {
            if (each.toLowerCase() in conf.FORBID_TAGS_OBJ) {
                if (each != "style") { // No I18N
                    throw new Error("Conflict in Allowed and Forbidden Tags! Tag '" + each + "' is given in FORBID_TAGS and ALLOWED_TAGS in configuration!"); // No I18N
                }
            }
            if (each.toLowerCase() in defaultForbiddenTags) {
                throw new Error("Tag '" + each + "' is forbidden by default. The following Tags are forbidden by default: 'script','iframe' "); // No I18N
            }
        }
        for (var each in conf.ALLOWED_ATTR_OBJ) {
            if (each.toLowerCase() in conf.FORBID_ATTR_OBJ) {
                if (each != "style") { // No I18N
                    throw new Error("Conflict in Allowed and Forbidden Attributes! Attribute '" + each + "' is given in FORBID_ATTR and ALLOWED_ATTR in configuration!"); // No I18N
                }
            }
            if (each.toLowerCase() in defaultForbiddenAttr) {
                throw new Error("Attribute '" + each + "' is forbidden by default. The following Attributes are forbidden by default: "); // No I18N
            }
        }
    }

    ZSEC.util.defineProperty(root, 'HTMLPurifierValidation', HTMLPurifierValidation, false, false, true); // No I18N

})(ZSEC.configValidator);

